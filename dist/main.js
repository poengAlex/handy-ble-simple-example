/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var EntryPoint;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@protobufjs/aspromise/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@protobufjs/aspromise/index.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/@protobufjs/aspromise/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/base64/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@protobufjs/base64/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/@protobufjs/base64/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/eventemitter/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@protobufjs/eventemitter/index.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/@protobufjs/eventemitter/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/float/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@protobufjs/float/index.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/@protobufjs/float/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/inquire/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@protobufjs/inquire/index.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
eval("\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/@protobufjs/inquire/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/pool/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/pool/index.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/@protobufjs/pool/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/utf8/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/utf8/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/@protobufjs/utf8/index.js?");

/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.17.21';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Error message constants. */\n  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',\n      FUNC_ERROR_TEXT = 'Expected a function',\n      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n      CLONE_FLAT_FLAG = 2,\n      CLONE_SYMBOLS_FLAG = 4;\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  /** Used to compose bitmasks for function metadata. */\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_BOUND_FLAG = 4,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_CURRY_RIGHT_FLAG = 16,\n      WRAP_PARTIAL_FLAG = 32,\n      WRAP_PARTIAL_RIGHT_FLAG = 64,\n      WRAP_ARY_FLAG = 128,\n      WRAP_REARG_FLAG = 256,\n      WRAP_FLIP_FLAG = 512;\n\n  /** Used as default options for `_.truncate`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2,\n      LAZY_WHILE_FLAG = 3;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n  /** Used to associate wrap methods with their bit flags. */\n  var wrapFlags = [\n    ['ary', WRAP_ARY_FLAG],\n    ['bind', WRAP_BIND_FLAG],\n    ['bindKey', WRAP_BIND_KEY_FLAG],\n    ['curry', WRAP_CURRY_FLAG],\n    ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n    ['flip', WRAP_FLIP_FLAG],\n    ['partial', WRAP_PARTIAL_FLAG],\n    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n    ['rearg', WRAP_REARG_FLAG]\n  ];\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      domExcTag = '[object DOMException]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]',\n      weakSetTag = '[object WeakSet]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n      reUnescapedHtml = /[&<>\"']/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n      reHasRegExpChar = RegExp(reRegExpChar.source);\n\n  /** Used to match leading whitespace. */\n  var reTrimStart = /^\\s+/;\n\n  /** Used to match a single whitespace character. */\n  var reWhitespace = /\\s/;\n\n  /** Used to match wrap detail comments. */\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      reSplitDetails = /,? & /;\n\n  /** Used to match words composed of alphanumeric characters. */\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n  /**\n   * Used to validate the `validate` option in `_.template` variable.\n   *\n   * Forbids characters which could potentially change the meaning of the function argument definition:\n   * - \"(),\" (modification of function parameters)\n   * - \"=\" (default value)\n   * - \"[]{}\" (destructuring of function parameters)\n   * - \"/\" (beginning of a comment)\n   * - whitespace\n   */\n  var reForbiddenIdentifierChars = /[()=,{}\\[\\]\\/\\s]/;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n      rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reUnicodeWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n    rsUpper + '+' + rsOptContrUpper,\n    rsOrdUpper,\n    rsOrdLower,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map Latin Unicode letters to basic Latin letters. */\n  var deburredLetters = {\n    // Latin-1 Supplement block.\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss',\n    // Latin Extended-A block.\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    '\\u0132': 'IJ', '\\u0133': 'ij',\n    '\\u0152': 'Oe', '\\u0153': 'oe',\n    '\\u0149': \"'n\", '\\u017f': 's'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\"\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseFloat = parseFloat,\n      freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports =  true && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && \"object\" == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      // Use `util.types` for Node.js 10+.\n      var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n      if (types) {\n        return types;\n      }\n\n      // Legacy `process.binding('util')` for Node.js < 10.\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEachRight(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n\n    while (length--) {\n      if (iteratee(array[length], length, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n    var length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[--length];\n    }\n    while (length--) {\n      accumulator = iteratee(accumulator, array[length], length, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  var asciiSize = baseProperty('length');\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n  }\n\n  /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */\n  function baseFindKey(collection, predicate, eachFunc) {\n    var result;\n    eachFunc(collection, function(value, key, collection) {\n      if (predicate(value, key, collection)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value\n      ? strictIndexOf(array, value, fromIndex)\n      : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n\n  /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (comparator(array[index], value)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */\n  function baseMean(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n    return length ? (baseSum(array, iteratee) / length) : NAN;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n\n    array.sort(comparer);\n    while (length--) {\n      array[length] = array[length].value;\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */\n  function baseSum(array, iteratee) {\n    var result,\n        index = -1,\n        length = array.length;\n\n    while (++index < length) {\n      var current = iteratee(array[index]);\n      if (current !== undefined) {\n        result = result === undefined ? current : (result + current);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */\n  function baseToPairs(object, props) {\n    return arrayMap(props, function(key) {\n      return [key, object[key]];\n    });\n  }\n\n  /**\n   * The base implementation of `_.trim`.\n   *\n   * @private\n   * @param {string} string The string to trim.\n   * @returns {string} Returns the trimmed string.\n   */\n  function baseTrim(string) {\n    return string\n      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n      : string;\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */\n  function countHolders(array, placeholder) {\n    var length = array.length,\n        result = 0;\n\n    while (length--) {\n      if (array[length] === placeholder) {\n        ++result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */\n  function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value === placeholder || value === PLACEHOLDER) {\n        array[index] = PLACEHOLDER;\n        result[resIndex++] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */\n  function setToPairs(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = [value, value];\n    });\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictLastIndexOf(array, value, fromIndex) {\n    var index = fromIndex + 1;\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */\n  function stringSize(string) {\n    return hasUnicode(string)\n      ? unicodeSize(string)\n      : asciiSize(string);\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n   * character of `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the index of the last non-whitespace character.\n   */\n  function trimmedEndIndex(string) {\n    var index = string.length;\n\n    while (index-- && reWhitespace.test(string.charAt(index))) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  function unicodeSize(string) {\n    var result = reUnicode.lastIndex = 0;\n    while (reUnicode.test(string)) {\n      ++result;\n    }\n    return result;\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  var runInContext = (function runInContext(context) {\n    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n\n    /** Built-in constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for built-in method references. */\n    var arrayProto = Array.prototype,\n        funcProto = Function.prototype,\n        objectProto = Object.prototype;\n\n    /** Used to detect overreaching core-js shims. */\n    var coreJsData = context['__core-js_shared__'];\n\n    /** Used to resolve the decompiled source of functions. */\n    var funcToString = funcProto.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /** Used to detect methods masquerading as native. */\n    var maskSrcKey = (function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n      return uid ? ('Symbol(src)_1.' + uid) : '';\n    }());\n\n    /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var nativeObjectToString = objectProto.toString;\n\n    /** Used to infer the `Object` constructor. */\n    var objectCtorString = funcToString.call(Object);\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Built-in value references. */\n    var Buffer = moduleExports ? context.Buffer : undefined,\n        Symbol = context.Symbol,\n        Uint8Array = context.Uint8Array,\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n        getPrototype = overArg(Object.getPrototypeOf, Object),\n        objectCreate = Object.create,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        splice = arrayProto.splice,\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n        symIterator = Symbol ? Symbol.iterator : undefined,\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n    var defineProperty = (function() {\n      try {\n        var func = getNative(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n      } catch (e) {}\n    }());\n\n    /** Mocked built-ins. */\n    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n\n    /* Built-in method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeFloor = Math.floor,\n        nativeGetSymbols = Object.getOwnPropertySymbols,\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n        nativeIsFinite = context.isFinite,\n        nativeJoin = arrayProto.join,\n        nativeKeys = overArg(Object.keys, Object),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = Date.now,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeReverse = arrayProto.reverse;\n\n    /* Built-in method references that are verified to be native. */\n    var DataView = getNative(context, 'DataView'),\n        Map = getNative(context, 'Map'),\n        Promise = getNative(context, 'Promise'),\n        Set = getNative(context, 'Set'),\n        WeakMap = getNative(context, 'WeakMap'),\n        nativeCreate = getNative(Object, 'create');\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /** Used to detect maps, sets, and weakmaps. */\n    var dataViewCtorString = toSource(DataView),\n        mapCtorString = toSource(Map),\n        promiseCtorString = toSource(Promise),\n        setCtorString = toSource(Set),\n        weakMapCtorString = toSource(WeakMap);\n\n    /** Used to convert symbols to primitives and strings. */\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array and iteratees accept only\n     * one argument. The heuristic for whether a section qualifies for shortcut\n     * fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(proto) {\n        if (!isObject(proto)) {\n          return {};\n        }\n        if (objectCreate) {\n          return objectCreate(proto);\n        }\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n      };\n    }());\n\n    /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */\n    function LodashWrapper(value, chainAll) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__chain__ = !!chainAll;\n      this.__index__ = 0;\n      this.__values__ = undefined;\n    }\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n     * following template settings to use alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */\n        '_': lodash\n      }\n    };\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n    lodash.prototype.constructor = lodash;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = copyArray(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = copyArray(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = copyArray(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n        return baseWrapperValue(array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Hash(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function hashDelete(key) {\n      var result = this.has(key) && delete this.__data__[key];\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n    }\n\n    /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n    }\n\n    /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */\n    function hashSet(key, value) {\n      var data = this.__data__;\n      this.size += this.has(key) ? 0 : 1;\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      return this;\n    }\n\n    // Add methods to `Hash`.\n    Hash.prototype.clear = hashClear;\n    Hash.prototype['delete'] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function ListCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */\n    function listCacheClear() {\n      this.__data__ = [];\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function listCacheDelete(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      --this.size;\n      return true;\n    }\n\n    /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function listCacheGet(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      return index < 0 ? undefined : data[index][1];\n    }\n\n    /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n\n    /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */\n    function listCacheSet(key, value) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        ++this.size;\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n\n    // Add methods to `ListCache`.\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype['delete'] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function MapCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */\n    function mapCacheClear() {\n      this.size = 0;\n      this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n      };\n    }\n\n    /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function mapCacheDelete(key) {\n      var result = getMapData(this, key)['delete'](key);\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n\n    /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */\n    function mapCacheSet(key, value) {\n      var data = getMapData(this, key),\n          size = data.size;\n\n      data.set(key, value);\n      this.size += data.size == size ? 0 : 1;\n      return this;\n    }\n\n    // Add methods to `MapCache`.\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype['delete'] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var index = -1,\n          length = values == null ? 0 : values.length;\n\n      this.__data__ = new MapCache;\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n\n    /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n\n    /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n\n    // Add methods to `SetCache`.\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Stack(entries) {\n      var data = this.__data__ = new ListCache(entries);\n      this.size = data.size;\n    }\n\n    /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */\n    function stackClear() {\n      this.__data__ = new ListCache;\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function stackDelete(key) {\n      var data = this.__data__,\n          result = data['delete'](key);\n\n      this.size = data.size;\n      return result;\n    }\n\n    /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n\n    /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */\n    function stackSet(key, value) {\n      var data = this.__data__;\n      if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n          pairs.push([key, value]);\n          this.size = ++data.size;\n          return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n      }\n      data.set(key, value);\n      this.size = data.size;\n      return this;\n    }\n\n    // Add methods to `Stack`.\n    Stack.prototype.clear = stackClear;\n    Stack.prototype['delete'] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */\n    function arrayLikeKeys(value, inherited) {\n      var isArr = isArray(value),\n          isArg = !isArr && isArguments(value),\n          isBuff = !isArr && !isArg && isBuffer(value),\n          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n          skipIndexes = isArr || isArg || isBuff || isType,\n          result = skipIndexes ? baseTimes(value.length, String) : [],\n          length = result.length;\n\n      for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (\n               // Safari 9 has enumerable `arguments.length` in strict mode.\n               key == 'length' ||\n               // Node.js 0.10 has enumerable non-index properties on buffers.\n               (isBuff && (key == 'offset' || key == 'parent')) ||\n               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n               // Skip index properties.\n               isIndex(key, length)\n            ))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */\n    function arraySample(array) {\n      var length = array.length;\n      return length ? array[baseRandom(0, length - 1)] : undefined;\n    }\n\n    /**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function arraySampleSize(array, n) {\n      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function arrayShuffle(array) {\n      return shuffleSelf(copyArray(array));\n    }\n\n    /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignMergeValue(object, key, value) {\n      if ((value !== undefined && !eq(object[key], value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignValue(object, key, value) {\n      var objValue = object[key];\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseAggregator(collection, setter, iteratee, accumulator) {\n      baseEach(collection, function(value, key, collection) {\n        setter(accumulator, value, iteratee(value), collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return object && copyObject(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `_.assignIn` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssignIn(object, source) {\n      return object && copyObject(source, keysIn(source), object);\n    }\n\n    /**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function baseAssignValue(object, key, value) {\n      if (key == '__proto__' && defineProperty) {\n        defineProperty(object, key, {\n          'configurable': true,\n          'enumerable': true,\n          'value': value,\n          'writable': true\n        });\n      } else {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Array} Returns the picked elements.\n     */\n    function baseAt(object, paths) {\n      var index = -1,\n          length = paths.length,\n          result = Array(length),\n          skip = object == null;\n\n      while (++index < length) {\n        result[index] = skip ? undefined : get(object, paths[index]);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */\n    function baseClamp(number, lower, upper) {\n      if (number === number) {\n        if (upper !== undefined) {\n          number = number <= upper ? number : upper;\n        }\n        if (lower !== undefined) {\n          number = number >= lower ? number : lower;\n        }\n      }\n      return number;\n    }\n\n    /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Deep clone\n     *  2 - Flatten inherited properties\n     *  4 - Clone symbols\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, bitmask, customizer, key, object, stack) {\n      var result,\n          isDeep = bitmask & CLONE_DEEP_FLAG,\n          isFlat = bitmask & CLONE_FLAT_FLAG,\n          isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n      if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return copyArray(value, result);\n        }\n      } else {\n        var tag = getTag(value),\n            isFunc = tag == funcTag || tag == genTag;\n\n        if (isBuffer(value)) {\n          return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = (isFlat || isFunc) ? {} : initCloneObject(value);\n          if (!isDeep) {\n            return isFlat\n              ? copySymbolsIn(value, baseAssignIn(result, value))\n              : copySymbols(value, baseAssign(result, value));\n          }\n        } else {\n          if (!cloneableTags[tag]) {\n            return object ? value : {};\n          }\n          result = initCloneByTag(value, tag, isDeep);\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n      stack.set(value, result);\n\n      if (isSet(value)) {\n        value.forEach(function(subValue) {\n          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n        });\n      } else if (isMap(value)) {\n        value.forEach(function(subValue, key) {\n          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n        });\n      }\n\n      var keysFunc = isFull\n        ? (isFlat ? getAllKeysIn : getAllKeys)\n        : (isFlat ? keysIn : keys);\n\n      var props = isArr ? undefined : keysFunc(value);\n      arrayEach(props || value, function(subValue, key) {\n        if (props) {\n          key = subValue;\n          subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseConforms(source) {\n      var props = keys(source);\n      return function(object) {\n        return baseConformsTo(object, source, props);\n      };\n    }\n\n    /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */\n    function baseConformsTo(object, source, props) {\n      var length = props.length;\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (length--) {\n        var key = props[length],\n            predicate = source[key],\n            value = object[key];\n\n        if ((value === undefined && !(key in object)) || !predicate(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          isCommon = true,\n          length = array.length,\n          result = [],\n          valuesLength = values.length;\n\n      if (!length) {\n        return result;\n      }\n      if (iteratee) {\n        values = arrayMap(values, baseUnary(iteratee));\n      }\n      if (comparator) {\n        includes = arrayIncludesWith;\n        isCommon = false;\n      }\n      else if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee == null ? value : iteratee(value);\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === computed) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (!includes(values, computed, comparator)) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n\n        if (current != null && (computed === undefined\n              ? (current === current && !isSymbol(current))\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = toInteger(start);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : toInteger(end);\n      if (end < 0) {\n        end += length;\n      }\n      end = start > end ? 0 : toLength(end);\n      while (start < end) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, depth, predicate, isStrict, result) {\n      var index = -1,\n          length = array.length;\n\n      predicate || (predicate = isFlattenable);\n      result || (result = []);\n\n      while (++index < length) {\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n          if (depth > 1) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return object && baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return object && baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */\n    function baseFunctions(object, props) {\n      return arrayFilter(props, function(key) {\n        return isFunction(object[key]);\n      });\n    }\n\n    /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path) {\n      path = castPath(path, object);\n\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result = keysFunc(object);\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n    }\n\n    /**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    function baseGetTag(value) {\n      if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n      }\n      return (symToStringTag && symToStringTag in Object(value))\n        ? getRawTag(value)\n        : objectToString(value);\n    }\n\n    /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */\n    function baseGt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHas(object, key) {\n      return object != null && hasOwnProperty.call(object, key);\n    }\n\n    /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHasIn(object, key) {\n      return object != null && key in Object(object);\n    }\n\n    /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */\n    function baseInRange(number, start, end) {\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n    }\n\n    /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */\n    function baseIntersection(arrays, iteratee, comparator) {\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n          length = arrays[0].length,\n          othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(othLength),\n          maxLength = Infinity,\n          result = [];\n\n      while (othIndex--) {\n        var array = arrays[othIndex];\n        if (othIndex && iteratee) {\n          array = arrayMap(array, baseUnary(iteratee));\n        }\n        maxLength = nativeMin(array.length, maxLength);\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n          ? new SetCache(othIndex && array)\n          : undefined;\n      }\n      array = arrays[0];\n\n      var index = -1,\n          seen = caches[0];\n\n      outer:\n      while (++index < length && result.length < maxLength) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (!(seen\n              ? cacheHas(seen, computed)\n              : includes(result, computed, comparator)\n            )) {\n          othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if (!(cache\n                  ? cacheHas(cache, computed)\n                  : includes(arrays[othIndex], computed, comparator))\n                ) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseInverter(object, setter, iteratee, accumulator) {\n      baseForOwn(object, function(value, key, object) {\n        setter(accumulator, iteratee(value), key, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function baseInvoke(object, path, args) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      var func = object == null ? object : object[toKey(last(path))];\n      return func == null ? undefined : apply(func, object, args);\n    }\n\n    /**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */\n    function baseIsArguments(value) {\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\n    }\n\n    /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */\n    function baseIsArrayBuffer(value) {\n      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n    }\n\n    /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */\n    function baseIsDate(value) {\n      return isObjectLike(value) && baseGetTag(value) == dateTag;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Unordered comparison\n     *  2 - Partial comparison\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = objIsArr ? arrayTag : getTag(object),\n          othTag = othIsArr ? arrayTag : getTag(other);\n\n      objTag = objTag == argsTag ? objectTag : objTag;\n      othTag = othTag == argsTag ? objectTag : othTag;\n\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n          return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n      }\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return (objIsArr || isTypedArray(object))\n          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n      }\n      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object,\n              othUnwrapped = othIsWrapped ? other.value() : other;\n\n          stack || (stack = new Stack);\n          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack);\n      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n    }\n\n    /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */\n    function baseIsMap(value) {\n      return isObjectLike(value) && getTag(value) == mapTag;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, source, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var stack = new Stack;\n          if (customizer) {\n            var result = customizer(objValue, srcValue, key, object, source, stack);\n          }\n          if (!(result === undefined\n                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n                : result\n              )) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n\n    /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */\n    function baseIsRegExp(value) {\n      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n    }\n\n    /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */\n    function baseIsSet(value) {\n      return isObjectLike(value) && getTag(value) == setTag;\n    }\n\n    /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) &&\n        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n    }\n\n    /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */\n    function baseIteratee(value) {\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n      if (typeof value == 'function') {\n        return value;\n      }\n      if (value == null) {\n        return identity;\n      }\n      if (typeof value == 'object') {\n        return isArray(value)\n          ? baseMatchesProperty(value[0], value[1])\n          : baseMatches(value);\n      }\n      return property(value);\n    }\n\n    /**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeys(object) {\n      if (!isPrototype(object)) {\n        return nativeKeys(object);\n      }\n      var result = [];\n      for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeysIn(object) {\n      if (!isObject(object)) {\n        return nativeKeysIn(object);\n      }\n      var isProto = isPrototype(object),\n          result = [];\n\n      for (var key in object) {\n        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */\n    function baseLt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n      }\n      return function(object) {\n        return object === source || baseIsMatch(object, source, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n      }\n      return function(object) {\n        var objValue = get(object, path);\n        return (objValue === undefined && objValue === srcValue)\n          ? hasIn(object, path)\n          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMerge(object, source, srcIndex, customizer, stack) {\n      if (object === source) {\n        return;\n      }\n      baseFor(source, function(srcValue, key) {\n        stack || (stack = new Stack);\n        if (isObject(srcValue)) {\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        }\n        else {\n          var newValue = customizer\n            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n            : undefined;\n\n          if (newValue === undefined) {\n            newValue = srcValue;\n          }\n          assignMergeValue(object, key, newValue);\n        }\n      }, keysIn);\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = safeGet(object, key),\n          srcValue = safeGet(source, key),\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n      }\n      var newValue = customizer\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      var isCommon = newValue === undefined;\n\n      if (isCommon) {\n        var isArr = isArray(srcValue),\n            isBuff = !isArr && isBuffer(srcValue),\n            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n          if (isArray(objValue)) {\n            newValue = objValue;\n          }\n          else if (isArrayLikeObject(objValue)) {\n            newValue = copyArray(objValue);\n          }\n          else if (isBuff) {\n            isCommon = false;\n            newValue = cloneBuffer(srcValue, true);\n          }\n          else if (isTyped) {\n            isCommon = false;\n            newValue = cloneTypedArray(srcValue, true);\n          }\n          else {\n            newValue = [];\n          }\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          newValue = objValue;\n          if (isArguments(objValue)) {\n            newValue = toPlainObject(objValue);\n          }\n          else if (!isObject(objValue) || isFunction(objValue)) {\n            newValue = initCloneObject(srcValue);\n          }\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n      }\n      assignMergeValue(object, key, newValue);\n    }\n\n    /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */\n    function baseNth(array, n) {\n      var length = array.length;\n      if (!length) {\n        return;\n      }\n      n += n < 0 ? length : 0;\n      return isIndex(n, length) ? array[n] : undefined;\n    }\n\n    /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseOrderBy(collection, iteratees, orders) {\n      if (iteratees.length) {\n        iteratees = arrayMap(iteratees, function(iteratee) {\n          if (isArray(iteratee)) {\n            return function(value) {\n              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n            }\n          }\n          return iteratee;\n        });\n      } else {\n        iteratees = [identity];\n      }\n\n      var index = -1;\n      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n\n      var result = baseMap(collection, function(value, key, collection) {\n        var criteria = arrayMap(iteratees, function(iteratee) {\n          return iteratee(value);\n        });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function basePick(object, paths) {\n      return basePickBy(object, paths, function(value, path) {\n        return hasIn(object, path);\n      });\n    }\n\n    /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */\n    function basePickBy(object, paths, predicate) {\n      var index = -1,\n          length = paths.length,\n          result = {};\n\n      while (++index < length) {\n        var path = paths[index],\n            value = baseGet(object, path);\n\n        if (predicate(value, path)) {\n          baseSet(result, castPath(path, object), value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */\n    function basePropertyDeep(path) {\n      return function(object) {\n        return baseGet(object, path);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAll(array, values, iteratee, comparator) {\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n          index = -1,\n          length = values.length,\n          seen = array;\n\n      if (array === values) {\n        values = copyArray(values);\n      }\n      if (iteratee) {\n        seen = arrayMap(array, baseUnary(iteratee));\n      }\n      while (++index < length) {\n        var fromIndex = 0,\n            value = values[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n          if (seen !== array) {\n            splice.call(seen, fromIndex, 1);\n          }\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0,\n          lastIndex = length - 1;\n\n      while (length--) {\n        var index = indexes[length];\n        if (length == lastIndex || index !== previous) {\n          var previous = index;\n          if (isIndex(index)) {\n            splice.call(array, index, 1);\n          } else {\n            baseUnset(array, index);\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(lower, upper) {\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n    }\n\n    /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */\n    function baseRange(start, end, step, fromRight) {\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (length--) {\n        result[fromRight ? length : ++index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */\n    function baseRepeat(string, n) {\n      var result = '';\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        if (n) {\n          string += string;\n        }\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */\n    function baseRest(func, start) {\n      return setToString(overRest(func, start, identity), func + '');\n    }\n\n    /**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */\n    function baseSample(collection) {\n      return arraySample(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function baseSampleSize(collection, n) {\n      var array = values(collection);\n      return shuffleSelf(array, baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseSet(object, path, value, customizer) {\n      if (!isObject(object)) {\n        return object;\n      }\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = toKey(path[index]),\n            newValue = value;\n\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n          return object;\n        }\n\n        if (index != lastIndex) {\n          var objValue = nested[key];\n          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n          if (newValue === undefined) {\n            newValue = isObject(objValue)\n              ? objValue\n              : (isIndex(path[index + 1]) ? [] : {});\n          }\n        }\n        assignValue(nested, key, newValue);\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\n      return defineProperty(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(string),\n        'writable': true\n      });\n    };\n\n    /**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function baseShuffle(collection) {\n      return shuffleSelf(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = end > length ? length : end;\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndex(array, value, retHighest) {\n      var low = 0,\n          high = array == null ? low : array.length;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if (computed !== null && !isSymbol(computed) &&\n              (retHighest ? (computed <= value) : (computed < value))) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return baseSortedIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n      var low = 0,\n          high = array == null ? 0 : array.length;\n      if (high === 0) {\n        return 0;\n      }\n\n      value = iteratee(value);\n      var valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsSymbol = isSymbol(value),\n          valIsUndefined = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            othIsDefined = computed !== undefined,\n            othIsNull = computed === null,\n            othIsReflexive = computed === computed,\n            othIsSymbol = isSymbol(computed);\n\n        if (valIsNaN) {\n          var setLow = retHighest || othIsReflexive;\n        } else if (valIsUndefined) {\n          setLow = othIsReflexive && (retHighest || othIsDefined);\n        } else if (valIsNull) {\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n        } else if (valIsSymbol) {\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n        } else if (othIsNull || othIsSymbol) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseSortedUniq(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        if (!index || !eq(computed, seen)) {\n          var seen = computed;\n          result[resIndex++] = value === 0 ? 0 : value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */\n    function baseToNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      return +value;\n    }\n\n    /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */\n    function baseToString(value) {\n      // Exit early for strings to avoid a performance hit in some environments.\n      if (typeof value == 'string') {\n        return value;\n      }\n      if (isArray(value)) {\n        // Recursively convert values (susceptible to call stack limits).\n        return arrayMap(value, baseToString) + '';\n      }\n      if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseUniq(array, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          length = array.length,\n          isCommon = true,\n          result = [],\n          seen = result;\n\n      if (comparator) {\n        isCommon = false;\n        includes = arrayIncludesWith;\n      }\n      else if (length >= LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : createSet(array);\n        if (set) {\n          return setToArray(set);\n        }\n        isCommon = false;\n        includes = cacheHas;\n        seen = new SetCache;\n      }\n      else {\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (!includes(seen, computed, comparator)) {\n          if (seen !== result) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The property path to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */\n    function baseUnset(object, path) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      return object == null || delete object[toKey(last(path))];\n    }\n\n    /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseUpdate(object, path, updater, customizer) {\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n    }\n\n    /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) &&\n        predicate(array[index], index, array)) {}\n\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      return arrayReduce(actions, function(result, action) {\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }, result);\n    }\n\n    /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */\n    function baseXor(arrays, iteratee, comparator) {\n      var length = arrays.length;\n      if (length < 2) {\n        return length ? baseUniq(arrays[0]) : [];\n      }\n      var index = -1,\n          result = Array(length);\n\n      while (++index < length) {\n        var array = arrays[index],\n            othIndex = -1;\n\n        while (++othIndex < length) {\n          if (othIndex != index) {\n            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n          }\n        }\n      }\n      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n    }\n\n    /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */\n    function baseZipObject(props, values, assignFunc) {\n      var index = -1,\n          length = props.length,\n          valsLength = values.length,\n          result = {};\n\n      while (++index < length) {\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n      }\n      return result;\n    }\n\n    /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */\n    function castArrayLikeObject(value) {\n      return isArrayLikeObject(value) ? value : [];\n    }\n\n    /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */\n    function castFunction(value) {\n      return typeof value == 'function' ? value : identity;\n    }\n\n    /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {Array} Returns the cast property path array.\n     */\n    function castPath(value, object) {\n      if (isArray(value)) {\n        return value;\n      }\n      return isKey(value, object) ? [value] : stringToPath(toString(value));\n    }\n\n    /**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    var castRest = baseRest;\n\n    /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */\n    function castSlice(array, start, end) {\n      var length = array.length;\n      end = end === undefined ? length : end;\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\n    }\n\n    /**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */\n    var clearTimeout = ctxClearTimeout || function(id) {\n      return root.clearTimeout(id);\n    };\n\n    /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */\n    function cloneBuffer(buffer, isDeep) {\n      if (isDeep) {\n        return buffer.slice();\n      }\n      var length = buffer.length,\n          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n      buffer.copy(result);\n      return result;\n    }\n\n    /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function cloneArrayBuffer(arrayBuffer) {\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n      return result;\n    }\n\n    /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */\n    function cloneDataView(dataView, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n    }\n\n    /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */\n    function cloneRegExp(regexp) {\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n      result.lastIndex = regexp.lastIndex;\n      return result;\n    }\n\n    /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */\n    function cloneSymbol(symbol) {\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n    }\n\n    /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */\n    function cloneTypedArray(typedArray, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n    }\n\n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsDefined = value !== undefined,\n            valIsNull = value === null,\n            valIsReflexive = value === value,\n            valIsSymbol = isSymbol(value);\n\n        var othIsDefined = other !== undefined,\n            othIsNull = other === null,\n            othIsReflexive = other === other,\n            othIsSymbol = isSymbol(other);\n\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n          return 1;\n        }\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n\n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersLength = holders.length,\n          leftIndex = -1,\n          leftLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(leftLength + rangeLength),\n          isUncurried = !isCurried;\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n      }\n      while (rangeLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersIndex = -1,\n          holdersLength = holders.length,\n          rightIndex = -1,\n          rightLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(rangeLength + rightLength),\n          isUncurried = !isCurried;\n\n      while (++argsIndex < rangeLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function copyArray(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */\n    function copyObject(source, props, object, customizer) {\n      var isNew = !object;\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n\n        var newValue = customizer\n          ? customizer(object[key], source[key], key, object, source)\n          : undefined;\n\n        if (newValue === undefined) {\n          newValue = source[key];\n        }\n        if (isNew) {\n          baseAssignValue(object, key, newValue);\n        } else {\n          assignValue(object, key, newValue);\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Copies own symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbols(source, object) {\n      return copyObject(source, getSymbols(source), object);\n    }\n\n    /**\n     * Copies own and inherited symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbolsIn(source, object) {\n      return copyObject(source, getSymbolsIn(source), object);\n    }\n\n    /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee) {\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n            accumulator = initializer ? initializer() : {};\n\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n      };\n    }\n\n    /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return baseRest(function(object, sources) {\n        var index = -1,\n            length = sources.length,\n            customizer = length > 1 ? sources[length - 1] : undefined,\n            guard = length > 2 ? sources[2] : undefined;\n\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\n          ? (length--, customizer)\n          : undefined;\n\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        object = Object(object);\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, index, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        if (collection == null) {\n          return collection;\n        }\n        if (!isArrayLike(collection)) {\n          return eachFunc(collection, iteratee);\n        }\n        var length = collection.length,\n            index = fromRight ? length : -1,\n            iterable = Object(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var index = -1,\n            iterable = Object(object),\n            props = keysFunc(object),\n            length = props.length;\n\n        while (length--) {\n          var key = props[fromRight ? length : ++index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createBind(func, bitmask, thisArg) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */\n    function createCaseFirst(methodName) {\n      return function(string) {\n        string = toString(string);\n\n        var strSymbols = hasUnicode(string)\n          ? stringToArray(string)\n          : undefined;\n\n        var chr = strSymbols\n          ? strSymbols[0]\n          : string.charAt(0);\n\n        var trailing = strSymbols\n          ? castSlice(strSymbols, 1).join('')\n          : string.slice(1);\n\n        return chr[methodName]() + trailing;\n      };\n    }\n\n    /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtor(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors. See\n        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCurry(func, bitmask, arity) {\n      var Ctor = createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length,\n            placeholder = getHolder(wrapper);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n          ? []\n          : replaceHolders(args, placeholder);\n\n        length -= holders.length;\n        if (length < arity) {\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n            args, holders, undefined, undefined, arity - length);\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return apply(fn, this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(findIndexFunc) {\n      return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!isArrayLike(collection)) {\n          var iteratee = getIteratee(predicate, 3);\n          collection = keys(collection);\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return flatRest(function(funcs) {\n        var length = funcs.length,\n            index = length,\n            prereq = LodashWrapper.prototype.thru;\n\n        if (fromRight) {\n          funcs.reverse();\n        }\n        while (index--) {\n          var func = funcs[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n            var wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? index : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) &&\n                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\n                !data[4].length && data[9] == 1\n              ) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func))\n              ? wrapper[funcName]()\n              : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 && isArray(value)) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      });\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & WRAP_ARY_FLAG,\n          isBind = bitmask & WRAP_BIND_FLAG,\n          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n          isFlip = bitmask & WRAP_FLIP_FLAG,\n          Ctor = isBindKey ? undefined : createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length;\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (isCurried) {\n          var placeholder = getHolder(wrapper),\n              holdersCount = countHolders(args, placeholder);\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders, isCurried);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n        }\n        length -= holdersCount;\n        if (isCurried && length < arity) {\n          var newHolders = replaceHolders(args, placeholder);\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n            args, newHolders, argPos, ary, arity - length\n          );\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        length = args.length;\n        if (argPos) {\n          args = reorder(args, argPos);\n        } else if (isFlip && length > 1) {\n          args.reverse();\n        }\n        if (isAry && ary < length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtor(fn);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */\n    function createInverter(setter, toIteratee) {\n      return function(object, iteratee) {\n        return baseInverter(object, setter, toIteratee(iteratee), {});\n      };\n    }\n\n    /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */\n    function createMathOperation(operator, defaultValue) {\n      return function(value, other) {\n        var result;\n        if (value === undefined && other === undefined) {\n          return defaultValue;\n        }\n        if (value !== undefined) {\n          result = value;\n        }\n        if (other !== undefined) {\n          if (result === undefined) {\n            return other;\n          }\n          if (typeof value == 'string' || typeof other == 'string') {\n            value = baseToString(value);\n            other = baseToString(other);\n          } else {\n            value = baseToNumber(value);\n            other = baseToNumber(other);\n          }\n          result = operator(value, other);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */\n    function createOver(arrayFunc) {\n      return flatRest(function(iteratees) {\n        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n        return baseRest(function(args) {\n          var thisArg = this;\n          return arrayFunc(iteratees, function(iteratee) {\n            return apply(iteratee, thisArg, args);\n          });\n        });\n      });\n    }\n\n    /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */\n    function createPadding(length, chars) {\n      chars = chars === undefined ? ' ' : baseToString(chars);\n\n      var charsLength = chars.length;\n      if (charsLength < 2) {\n        return charsLength ? baseRepeat(chars, length) : chars;\n      }\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n      return hasUnicode(chars)\n        ? castSlice(stringToArray(result), 0, length).join('')\n        : result.slice(0, length);\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createPartial(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength),\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        return apply(fn, isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */\n    function createRange(fromRight) {\n      return function(start, end, step) {\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n          end = step = undefined;\n        }\n        // Ensure the sign of `-0` is preserved.\n        start = toFinite(start);\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toFinite(end);\n        }\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n        return baseRange(start, end, step, fromRight);\n      };\n    }\n\n    /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */\n    function createRelationalOperation(operator) {\n      return function(value, other) {\n        if (!(typeof value == 'string' && typeof other == 'string')) {\n          value = toNumber(value);\n          other = toNumber(other);\n        }\n        return operator(value, other);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & WRAP_CURRY_FLAG,\n          newHolders = isCurry ? holders : undefined,\n          newHoldersRight = isCurry ? undefined : holders,\n          newPartials = isCurry ? partials : undefined,\n          newPartialsRight = isCurry ? undefined : partials;\n\n      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n      }\n      var newData = [\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n        newHoldersRight, argPos, ary, arity\n      ];\n\n      var result = wrapFunc.apply(undefined, newData);\n      if (isLaziable(func)) {\n        setData(result, newData);\n      }\n      result.placeholder = placeholder;\n      return setWrapToString(result, func, bitmask);\n    }\n\n    /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        number = toNumber(number);\n        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n        if (precision && nativeIsFinite(number)) {\n          // Shift with exponential notation to avoid floating-point issues.\n          // See [MDN](https://mdn.io/round#Examples) for more details.\n          var pair = (toString(number) + 'e').split('e'),\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n          pair = (toString(value) + 'e').split('e');\n          return +(pair[0] + 'e' + (+pair[1] - precision));\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n      return new Set(values);\n    };\n\n    /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */\n    function createToPairs(keysFunc) {\n      return function(object) {\n        var tag = getTag(object);\n        if (tag == mapTag) {\n          return mapToArray(object);\n        }\n        if (tag == setTag) {\n          return setToPairs(object);\n        }\n        return baseToPairs(object, keysFunc(object));\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *    1 - `_.bind`\n     *    2 - `_.bindKey`\n     *    4 - `_.curry` or `_.curryRight` of a bound function\n     *    8 - `_.curry`\n     *   16 - `_.curryRight`\n     *   32 - `_.partial`\n     *   64 - `_.partialRight`\n     *  128 - `_.rearg`\n     *  256 - `_.ary`\n     *  512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n      arity = arity === undefined ? arity : toInteger(arity);\n      length -= holders ? holders.length : 0;\n\n      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func);\n\n      var newData = [\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n        argPos, ary, arity\n      ];\n\n      if (data) {\n        mergeData(newData, data);\n      }\n      func = newData[0];\n      bitmask = newData[1];\n      thisArg = newData[2];\n      partials = newData[3];\n      holders = newData[4];\n      arity = newData[9] = newData[9] === undefined\n        ? (isBindKey ? 0 : func.length)\n        : nativeMax(newData[9] - length, 0);\n\n      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n      }\n      if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n        var result = createBind(func, bitmask, thisArg);\n      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n        result = createCurry(func, bitmask, arity);\n      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n        result = createPartial(func, bitmask, thisArg, partials);\n      } else {\n        result = createHybrid.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setWrapToString(setter(result, newData), func, bitmask);\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n     * of source objects to the destination object for all destination properties\n     * that resolve to `undefined`.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsAssignIn(objValue, srcValue, key, object) {\n      if (objValue === undefined ||\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        return srcValue;\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n     * objects into destination objects that are passed thru.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n      if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n        stack['delete'](srcValue);\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n     * objects.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {string} key The key of the property to inspect.\n     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n     */\n    function customOmitClone(value) {\n      return isPlainObject(value) ? undefined : value;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      // Check that cyclic values are equal.\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n      }\n      var index = -1,\n          result = true,\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n      stack.set(array, other);\n      stack.set(other, array);\n\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, arrValue, index, other, array, stack)\n            : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n          if (compared) {\n            continue;\n          }\n          result = false;\n          break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n          if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) &&\n                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                  return seen.push(othIndex);\n                }\n              })) {\n            result = false;\n            break;\n          }\n        } else if (!(\n              arrValue === othValue ||\n                equalFunc(arrValue, othValue, bitmask, customizer, stack)\n            )) {\n          result = false;\n          break;\n        }\n      }\n      stack['delete'](array);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if ((object.byteLength != other.byteLength) ||\n              (object.byteOffset != other.byteOffset)) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n\n        case arrayBufferTag:\n          if ((object.byteLength != other.byteLength) ||\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n            return false;\n          }\n          return true;\n\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\n          // Invalid dates are coerced to `NaN`.\n          return eq(+object, +other);\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings, primitives and objects,\n          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n          // for more details.\n          return object == (other + '');\n\n        case mapTag:\n          var convert = mapToArray;\n\n        case setTag:\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n          convert || (convert = setToArray);\n\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= COMPARE_UNORDERED_FLAG;\n\n          // Recursively compare objects (susceptible to call stack limits).\n          stack.set(object, other);\n          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n          stack['delete'](object);\n          return result;\n\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          objProps = getAllKeys(object),\n          objLength = objProps.length,\n          othProps = getAllKeys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      // Check that cyclic values are equal.\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n      }\n      var result = true;\n      stack.set(object, other);\n      stack.set(other, object);\n\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, objValue, key, other, object, stack)\n            : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined\n              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n              : compared\n            )) {\n          result = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (result && !skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          result = false;\n        }\n      }\n      stack['delete'](object);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    function flatRest(func) {\n      return setToString(overRest(func, undefined, flatten), func + '');\n    }\n\n    /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n\n    /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeysIn(object) {\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = (func.name + ''),\n          array = realNames[result],\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */\n    function getHolder(func) {\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n      return object.placeholder;\n    }\n\n    /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getIteratee() {\n      var result = lodash.iteratee || iteratee;\n      result = result === iteratee ? baseIteratee : result;\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\n    }\n\n    /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n    }\n\n    /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = keys(object),\n          length = result.length;\n\n      while (length--) {\n        var key = result[length],\n            value = object[key];\n\n        result[length] = [key, value, isStrictComparable(value)];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : undefined;\n    }\n\n    /**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */\n    function getRawTag(value) {\n      var isOwn = hasOwnProperty.call(value, symToStringTag),\n          tag = value[symToStringTag];\n\n      try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n      } catch (e) {}\n\n      var result = nativeObjectToString.call(value);\n      if (unmasked) {\n        if (isOwn) {\n          value[symToStringTag] = tag;\n        } else {\n          delete value[symToStringTag];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n      if (object == null) {\n        return [];\n      }\n      object = Object(object);\n      return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n      });\n    };\n\n    /**\n     * Creates an array of the own and inherited enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n      var result = [];\n      while (object) {\n        arrayPush(result, getSymbols(object));\n        object = getPrototype(object);\n      }\n      return result;\n    };\n\n    /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    var getTag = baseGetTag;\n\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n        (Map && getTag(new Map) != mapTag) ||\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n        (Set && getTag(new Set) != setTag) ||\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n      getTag = function(value) {\n        var result = baseGetTag(value),\n            Ctor = result == objectTag ? value.constructor : undefined,\n            ctorString = Ctor ? toSource(Ctor) : '';\n\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString: return dataViewTag;\n            case mapCtorString: return mapTag;\n            case promiseCtorString: return promiseTag;\n            case setCtorString: return setTag;\n            case weakMapCtorString: return weakMapTag;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */\n    function getWrapDetails(source) {\n      var match = source.match(reWrapDetails);\n      return match ? match[1].split(reSplitDetails) : [];\n    }\n\n    /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */\n    function hasPath(object, path, hasFunc) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          result = false;\n\n      while (++index < length) {\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n          break;\n        }\n        object = object[key];\n      }\n      if (result || ++index != length) {\n        return result;\n      }\n      length = object == null ? 0 : object.length;\n      return !!length && isLength(length) && isIndex(key, length) &&\n        (isArray(object) || isArguments(object));\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = new array.constructor(length);\n\n      // Add properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return cloneArrayBuffer(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case dataViewTag:\n          return cloneDataView(object, isDeep);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          return cloneTypedArray(object, isDeep);\n\n        case mapTag:\n          return new Ctor;\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          return cloneRegExp(object);\n\n        case setTag:\n          return new Ctor;\n\n        case symbolTag:\n          return cloneSymbol(object);\n      }\n    }\n\n    /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */\n    function insertWrapDetails(source, details) {\n      var length = details.length;\n      if (!length) {\n        return source;\n      }\n      var lastIndex = length - 1;\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n      details = details.join(length > 2 ? ', ' : ' ');\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n    }\n\n    /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */\n    function isFlattenable(value) {\n      return isArray(value) || isArguments(value) ||\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      var type = typeof value;\n      length = length == null ? MAX_SAFE_INTEGER : length;\n\n      return !!length &&\n        (type == 'number' ||\n          (type != 'symbol' && reIsUint.test(value))) &&\n            (value > -1 && value % 1 == 0 && value < length);\n    }\n\n    /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)\n          ) {\n        return eq(object[index], value);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      if (isArray(value)) {\n        return false;\n      }\n      var type = typeof value;\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n          value == null || isSymbol(value)) {\n        return true;\n      }\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object));\n    }\n\n    /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */\n    function isKeyable(value) {\n      var type = typeof value;\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func),\n          other = lodash[funcName];\n\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */\n    function isMasked(func) {\n      return !!maskSrcKey && (maskSrcKey in func);\n    }\n\n    /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */\n    var isMaskable = coreJsData ? isFunction : stubFalse;\n\n    /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */\n    function isPrototype(value) {\n      var Ctor = value && value.constructor,\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n      return value === proto;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function matchesStrictComparable(key, srcValue) {\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        return object[key] === srcValue &&\n          (srcValue !== undefined || (key in Object(object)));\n      };\n    }\n\n    /**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */\n    function memoizeCapped(func) {\n      var result = memoize(func, function(key) {\n        if (cache.size === MAX_MEMOIZE_SIZE) {\n          cache.clear();\n        }\n        return key;\n      });\n\n      var cache = result.cache;\n      return result;\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n      var isCombo =\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & WRAP_BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = value;\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & WRAP_ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function nativeKeysIn(object) {\n      var result = [];\n      if (object != null) {\n        for (var key in Object(object)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */\n    function objectToString(value) {\n      return nativeObjectToString.call(value);\n    }\n\n    /**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */\n    function overRest(func, start, transform) {\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            array = Array(length);\n\n        while (++index < length) {\n          array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n      };\n    }\n\n    /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */\n    function parent(object, path) {\n      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = copyArray(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the property to get.\n     * @returns {*} Returns the property value.\n     */\n    function safeGet(object, key) {\n      if (key === 'constructor' && typeof object[key] === 'function') {\n        return;\n      }\n\n      if (key == '__proto__') {\n        return;\n      }\n\n      return object[key];\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = shortOut(baseSetData);\n\n    /**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    var setTimeout = ctxSetTimeout || function(func, wait) {\n      return root.setTimeout(func, wait);\n    };\n\n    /**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var setToString = shortOut(baseSetToString);\n\n    /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */\n    function setWrapToString(wrapper, reference, bitmask) {\n      var source = (reference + '');\n      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n    }\n\n    /**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */\n    function shortOut(func) {\n      var count = 0,\n          lastCalled = 0;\n\n      return function() {\n        var stamp = nativeNow(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return arguments[0];\n          }\n        } else {\n          count = 0;\n        }\n        return func.apply(undefined, arguments);\n      };\n    }\n\n    /**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */\n    function shuffleSelf(array, size) {\n      var index = -1,\n          length = array.length,\n          lastIndex = length - 1;\n\n      size = size === undefined ? length : size;\n      while (++index < size) {\n        var rand = baseRandom(index, lastIndex),\n            value = array[rand];\n\n        array[rand] = array[index];\n        array[index] = value;\n      }\n      array.length = size;\n      return array;\n    }\n\n    /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */\n    var stringToPath = memoizeCapped(function(string) {\n      var result = [];\n      if (string.charCodeAt(0) === 46 /* . */) {\n        result.push('');\n      }\n      string.replace(rePropName, function(match, number, quote, subString) {\n        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    });\n\n    /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */\n    function toKey(value) {\n      if (typeof value == 'string' || isSymbol(value)) {\n        return value;\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e) {}\n        try {\n          return (func + '');\n        } catch (e) {}\n      }\n      return '';\n    }\n\n    /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */\n    function updateWrapDetails(details, bitmask) {\n      arrayEach(wrapFlags, function(pair) {\n        var value = '_.' + pair[0];\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n          details.push(value);\n        }\n      });\n      return details.sort();\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      if (wrapper instanceof LazyWrapper) {\n        return wrapper.clone();\n      }\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n      result.__actions__ = copyArray(wrapper.__actions__);\n      result.__index__  = wrapper.__index__;\n      result.__values__ = wrapper.__values__;\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n        size = 1;\n      } else {\n        size = nativeMax(toInteger(size), 0);\n      }\n      var length = array == null ? 0 : array.length;\n      if (!length || size < 1) {\n        return [];\n      }\n      var index = 0,\n          resIndex = 0,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[resIndex++] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array == null ? 0 : array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    function concat() {\n      var length = arguments.length;\n      if (!length) {\n        return [];\n      }\n      var args = Array(length - 1),\n          array = arguments[0],\n          index = length;\n\n      while (index--) {\n        args[index - 1] = arguments[index];\n      }\n      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n    }\n\n    /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */\n    var difference = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var differenceBy = baseRest(function(array, values) {\n      var iteratee = last(values);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */\n    var differenceWith = baseRest(function(array, values) {\n      var comparator = last(values);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */\n    function fill(array, value, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    function findIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    function findLastIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length - 1;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = fromIndex < 0\n          ? nativeMax(length + index, 0)\n          : nativeMin(index, length - 1);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n    }\n\n    /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */\n    function flatten(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, 1) : [];\n    }\n\n    /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */\n    function flattenDeep(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, INFINITY) : [];\n    }\n\n    /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */\n    function flattenDepth(array, depth) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(array, depth);\n    }\n\n    /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function fromPairs(pairs) {\n      var index = -1,\n          length = pairs == null ? 0 : pairs.length,\n          result = {};\n\n      while (++index < length) {\n        var pair = pairs[index];\n        result[pair[0]] = pair[1];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */\n    function head(array) {\n      return (array && array.length) ? array[0] : undefined;\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseIndexOf(array, value, index);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 0, -1) : [];\n    }\n\n    /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */\n    var intersection = baseRest(function(arrays) {\n      var mapped = arrayMap(arrays, castArrayLikeObject);\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped)\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */\n    var intersectionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (iteratee === last(mapped)) {\n        iteratee = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */\n    var intersectionWith = baseRest(function(arrays) {\n      var comparator = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      if (comparator) {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */\n    function join(array, separator) {\n      return array == null ? '' : nativeJoin.call(array, separator);\n    }\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n      }\n      return value === value\n        ? strictLastIndexOf(array, value, index)\n        : baseFindIndex(array, baseIsNaN, index, true);\n    }\n\n    /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */\n    function nth(array, n) {\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n    }\n\n    /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    var pull = baseRest(pullAll);\n\n    /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    function pullAll(array, values) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values)\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */\n    function pullAllBy(array, values, iteratee) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */\n    function pullAllWith(array, values, comparator) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, undefined, comparator)\n        : array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */\n    var pullAt = flatRest(function(array, indexes) {\n      var length = array == null ? 0 : array.length,\n          result = baseAt(array, indexes);\n\n      basePullAt(array, arrayMap(indexes, function(index) {\n        return isIndex(index, length) ? +index : index;\n      }).sort(compareAscending));\n\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getIteratee(predicate, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function reverse(array) {\n      return array == null ? array : nativeReverse.call(array);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      else {\n        start = start == null ? 0 : toInteger(start);\n        end = end === undefined ? length : toInteger(end);\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */\n    function sortedIndex(array, value) {\n      return baseSortedIndex(array, value);\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */\n    function sortedIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */\n    function sortedIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value);\n        if (index < length && eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */\n    function sortedLastIndex(array, value) {\n      return baseSortedIndex(array, value, true);\n    }\n\n    /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */\n    function sortedLastIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n    }\n\n    /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */\n    function sortedLastIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value, true) - 1;\n        if (eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */\n    function sortedUniq(array) {\n      return (array && array.length)\n        ? baseSortedUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */\n    function sortedUniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function tail(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 1, length) : [];\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */\n    function takeRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */\n    function takeWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */\n    var union = baseRest(function(arrays) {\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var unionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var unionWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */\n    function uniq(array) {\n      return (array && array.length) ? baseUniq(array) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniqBy(array, iteratee) {\n      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */\n    function uniqWith(array, comparator) {\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var length = 0;\n      array = arrayFilter(array, function(group) {\n        if (isArrayLikeObject(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      return baseTimes(length, function(index) {\n        return arrayMap(array, baseProperty(index));\n      });\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      return arrayMap(result, function(group) {\n        return apply(iteratee, undefined, group);\n      });\n    }\n\n    /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */\n    var without = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */\n    var xor = baseRest(function(arrays) {\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var xorBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var xorWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n    });\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */\n    var zip = baseRest(unzip);\n\n    /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function zipObject(props, values) {\n      return baseZipObject(props || [], values || [], assignValue);\n    }\n\n    /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */\n    function zipObjectDeep(props, values) {\n      return baseZipObject(props || [], values || [], baseSet);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */\n    var zipWith = baseRest(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n      return unzipWith(arrays, iteratee);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor) {\n      return interceptor(value);\n    }\n\n    /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */\n    var wrapperAt = flatRest(function(paths) {\n      var length = paths.length,\n          start = length ? paths[0] : 0,\n          value = this.__wrapped__,\n          interceptor = function(object) { return baseAt(object, paths); };\n\n      if (length > 1 || this.__actions__.length ||\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\n        return this.thru(interceptor);\n      }\n      value = value.slice(start, +start + (length ? 1 : 0));\n      value.__actions__.push({\n        'func': thru,\n        'args': [interceptor],\n        'thisArg': undefined\n      });\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n        if (length && !array.length) {\n          array.push(undefined);\n        }\n        return array;\n      });\n    });\n\n    /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */\n    function wrapperNext() {\n      if (this.__values__ === undefined) {\n        this.__values__ = toArray(this.value());\n      }\n      var done = this.__index__ >= this.__values__.length,\n          value = done ? undefined : this.__values__[this.__index__++];\n\n      return { 'done': done, 'value': value };\n    }\n\n    /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */\n    function wrapperToIterator() {\n      return this;\n    }\n\n    /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        clone.__index__ = 0;\n        clone.__values__ = undefined;\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({\n          'func': thru,\n          'args': [reverse],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(reverse);\n    }\n\n    /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        ++result[key];\n      } else {\n        baseAssignValue(result, key, 1);\n      }\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, guard) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     *\n     * // Combining several predicates using `_.overEvery` or `_.overSome`.\n     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n     * // => objects for ['fred', 'barney']\n     */\n    function filter(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(findLastIndex);\n\n    /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMap(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), 1);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMapDeep(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), INFINITY);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */\n    function flatMapDepth(collection, iteratee, depth) {\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(map(collection, iteratee), depth);\n    }\n\n    /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forEach(collection, iteratee) {\n      var func = isArray(collection) ? arrayEach : baseEach;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */\n    function forEachRight(collection, iteratee) {\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        baseAssignValue(result, key, [value]);\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */\n    function includes(collection, value, fromIndex, guard) {\n      collection = isArrayLike(collection) ? collection : values(collection);\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n      var length = collection.length;\n      if (fromIndex < 0) {\n        fromIndex = nativeMax(length + fromIndex, 0);\n      }\n      return isString(collection)\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n    }\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invokeMap = baseRest(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */\n    var keyBy = createAggregator(function(result, value, key) {\n      baseAssignValue(result, key, value);\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    function orderBy(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      orders = guard ? undefined : orders;\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseOrderBy(collection, iteratees, orders);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */\n    function reduce(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduce : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n    }\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */\n    function reject(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, negate(getIteratee(predicate, 3)));\n    }\n\n    /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */\n    function sample(collection) {\n      var func = isArray(collection) ? arraySample : baseSample;\n      return func(collection);\n    }\n\n    /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */\n    function sampleSize(collection, n, guard) {\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n      return func(collection, n);\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n      return func(collection);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      if (collection == null) {\n        return 0;\n      }\n      if (isArrayLike(collection)) {\n        return isString(collection) ? stringSize(collection) : collection.length;\n      }\n      var tag = getTag(collection);\n      if (tag == mapTag || tag == setTag) {\n        return collection.size;\n      }\n      return baseKeys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, guard) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 30 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n     */\n    var sortBy = baseRest(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var length = iteratees.length;\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [iteratees[0]];\n      }\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */\n    var now = ctxNow || function() {\n      return root.Date.now();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      n = guard ? undefined : n;\n      n = (func && n == null) ? func.length : n;\n      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = baseRest(function(func, thisArg, partials) {\n      var bitmask = WRAP_BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bind));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = baseRest(function(object, key, partials) {\n      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bindKey));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    function curry(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curry.placeholder;\n      return result;\n    }\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    function curryRight(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;\n      return result;\n    }\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */\n    function debounce(func, wait, options) {\n      var lastArgs,\n          lastThis,\n          maxWait,\n          result,\n          timerId,\n          lastCallTime,\n          lastInvokeTime = 0,\n          leading = false,\n          maxing = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function invokeFunc(time) {\n        var args = lastArgs,\n            thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n\n      function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n        return maxing\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n          : timeWaiting;\n      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n\n      function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n      }\n\n      function cancel() {\n        if (timerId !== undefined) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n      }\n\n      function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n          if (timerId === undefined) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            // Handle invocations in a tight loop.\n            clearTimeout(timerId);\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === undefined) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */\n    var defer = baseRest(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */\n    var delay = baseRest(function(func, wait, args) {\n      return baseDelay(func, toNumber(wait) || 0, args);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */\n    function flip(func) {\n      return createWrap(func, WRAP_FLIP_FLAG);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n      };\n      memoized.cache = new (memoize.Cache || MapCache);\n      return memoized;\n    }\n\n    // Expose `MapCache`.\n    memoize.Cache = MapCache;\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        var args = arguments;\n        switch (args.length) {\n          case 0: return !predicate.call(this);\n          case 1: return !predicate.call(this, args[0]);\n          case 2: return !predicate.call(this, args[0], args[1]);\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n        }\n        return !predicate.apply(this, args);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */\n    var overArgs = castRest(function(func, transforms) {\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n\n      var funcsLength = transforms.length;\n      return baseRest(function(args) {\n        var index = -1,\n            length = nativeMin(args.length, funcsLength);\n\n        while (++index < length) {\n          args[index] = transforms[index].call(this, args[index]);\n        }\n        return apply(func, this, args);\n      });\n    });\n\n    /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partial));\n      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partialRight));\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */\n    var rearg = flatRest(function(func, indexes) {\n      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function rest(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? start : toInteger(start);\n      return baseRest(func, start);\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start == null ? 0 : nativeMax(toInteger(start), 0);\n      return baseRest(function(args) {\n        var array = args[start],\n            otherArgs = castSlice(args, 0, start);\n\n        if (array) {\n          arrayPush(otherArgs, array);\n        }\n        return apply(func, this, otherArgs);\n      });\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        'leading': leading,\n        'maxWait': wait,\n        'trailing': trailing\n      });\n    }\n\n    /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */\n    function unary(func) {\n      return ary(func, 1);\n    }\n\n    /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return partial(castFunction(wrapper), value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */\n    function castArray() {\n      if (!arguments.length) {\n        return [];\n      }\n      var value = arguments[0];\n      return isArray(value) ? value : [value];\n    }\n\n    /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */\n    function clone(value) {\n      return baseClone(value, CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */\n    function cloneWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */\n    function cloneDeep(value) {\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */\n    function cloneDeepWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */\n    function conformsTo(object, source) {\n      return source == null || baseConformsTo(object, source, keys(source));\n    }\n\n    /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */\n    function eq(value, other) {\n      return value === other || (value !== value && other !== other);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    var gt = createRelationalOperation(baseGt);\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    var gte = createRelationalOperation(function(value, other) {\n      return value >= other;\n    });\n\n    /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n        !propertyIsEnumerable.call(value, 'callee');\n    };\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */\n    var isArray = Array.isArray;\n\n    /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n\n    /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(value.length) && !isFunction(value);\n    }\n\n    /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */\n    function isArrayLikeObject(value) {\n      return isObjectLike(value) && isArrayLike(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        (isObjectLike(value) && baseGetTag(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */\n    var isBuffer = nativeIsBuffer || stubFalse;\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\n    /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) &&\n          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n        return !value.length;\n      }\n      var tag = getTag(value);\n      if (tag == mapTag || tag == setTag) {\n        return !value.size;\n      }\n      if (isPrototype(value)) {\n        return !baseKeys(value).length;\n      }\n      for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are compared by strict equality, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */\n    function isEqual(value, other) {\n      return baseIsEqual(value, other);\n    }\n\n    /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */\n    function isEqualWith(value, other, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      if (!isObjectLike(value)) {\n        return false;\n      }\n      var tag = baseGetTag(value);\n      return tag == errorTag || tag == domExcTag ||\n        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      if (!isObject(value)) {\n        return false;\n      }\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n      var tag = baseGetTag(value);\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n    }\n\n    /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */\n    function isInteger(value) {\n      return typeof value == 'number' && value == toInteger(value);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */\n    function isLength(value) {\n      return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */\n    function isObject(value) {\n      var type = typeof value;\n      return value != null && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */\n    function isObjectLike(value) {\n      return value != null && typeof value == 'object';\n    }\n\n    /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n    /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */\n    function isMatch(object, source) {\n      return object === source || baseIsMatch(object, source, getMatchData(source));\n    }\n\n    /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */\n    function isMatchWith(object, source, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseIsMatch(object, source, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some\n      // ActiveX objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (isMaskable(value)) {\n        throw new Error(CORE_ERROR_TEXT);\n      }\n      return baseIsNative(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */\n    function isNil(value) {\n      return value == null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        (isObjectLike(value) && baseGetTag(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n        return false;\n      }\n      var proto = getPrototype(value);\n      if (proto === null) {\n        return true;\n      }\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n        funcToString.call(Ctor) == objectCtorString;\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\n    /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */\n    function isSafeInteger(value) {\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */\n    function isSymbol(value) {\n      return typeof value == 'symbol' ||\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */\n    function isWeakMap(value) {\n      return isObjectLike(value) && getTag(value) == weakMapTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */\n    function isWeakSet(value) {\n      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    var lt = createRelationalOperation(baseLt);\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    var lte = createRelationalOperation(function(value, other) {\n      return value <= other;\n    });\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */\n    function toArray(value) {\n      if (!value) {\n        return [];\n      }\n      if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n      }\n      if (symIterator && value[symIterator]) {\n        return iteratorToArray(value[symIterator]());\n      }\n      var tag = getTag(value),\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n      return func(value);\n    }\n\n    /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */\n    function toFinite(value) {\n      if (!value) {\n        return value === 0 ? value : 0;\n      }\n      value = toNumber(value);\n      if (value === INFINITY || value === -INFINITY) {\n        var sign = (value < 0 ? -1 : 1);\n        return sign * MAX_INTEGER;\n      }\n      return value === value ? value : 0;\n    }\n\n    /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */\n    function toInteger(value) {\n      var result = toFinite(value),\n          remainder = result % 1;\n\n      return result === result ? (remainder ? result - remainder : result) : 0;\n    }\n\n    /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */\n    function toLength(value) {\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n    }\n\n    /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */\n    function toNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n        value = isObject(other) ? (other + '') : other;\n      }\n      if (typeof value != 'string') {\n        return value === 0 ? value : +value;\n      }\n      value = baseTrim(value);\n      var isBinary = reIsBinary.test(value);\n      return (isBinary || reIsOctal.test(value))\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n        : (reIsBadHex.test(value) ? NAN : +value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return copyObject(value, keysIn(value));\n    }\n\n    /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */\n    function toSafeInteger(value) {\n      return value\n        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\n        : (value === 0 ? value : 0);\n    }\n\n    /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */\n    function toString(value) {\n      return value == null ? '' : baseToString(value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var assign = createAssigner(function(object, source) {\n      if (isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n      }\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          assignValue(object, key, source[key]);\n        }\n      }\n    });\n\n    /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */\n    var assignIn = createAssigner(function(object, source) {\n      copyObject(source, keysIn(source), object);\n    });\n\n    /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keysIn(source), object, customizer);\n    });\n\n    /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keys(source), object, customizer);\n    });\n\n    /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties == null ? result : baseAssign(result, properties);\n    }\n\n    /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var defaults = baseRest(function(object, sources) {\n      object = Object(object);\n\n      var index = -1;\n      var length = sources.length;\n      var guard = length > 2 ? sources[2] : undefined;\n\n      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n        length = 1;\n      }\n\n      while (++index < length) {\n        var source = sources[index];\n        var props = keysIn(source);\n        var propsIndex = -1;\n        var propsLength = props.length;\n\n        while (++propsIndex < propsLength) {\n          var key = props[propsIndex];\n          var value = object[key];\n\n          if (value === undefined ||\n              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n            object[key] = source[key];\n          }\n        }\n      }\n\n      return object;\n    });\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */\n    var defaultsDeep = baseRest(function(args) {\n      args.push(undefined, customDefaultsMerge);\n      return apply(mergeWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    function findKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n    }\n\n    /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */\n    function forIn(object, iteratee) {\n      return object == null\n        ? object\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */\n    function forInRight(object, iteratee) {\n      return object == null\n        ? object\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forOwn(object, iteratee) {\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */\n    function forOwnRight(object, iteratee) {\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */\n    function functions(object) {\n      return object == null ? [] : baseFunctions(object, keys(object));\n    }\n\n    /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */\n    function functionsIn(object) {\n      return object == null ? [] : baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, path);\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */\n    function has(object, path) {\n      return object != null && hasPath(object, path, baseHas);\n    }\n\n    /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */\n    function hasIn(object, path) {\n      return object != null && hasPath(object, path, baseHasIn);\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */\n    var invert = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      result[value] = key;\n    }, constant(identity));\n\n    /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */\n    var invertBy = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }, getIteratee);\n\n    /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */\n    var invoke = baseRest(baseInvoke);\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    function keys(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    function mapKeys(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, iteratee(value, key, object), value);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    function mapValues(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, key, iteratee(value, key, object));\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */\n    var merge = createAssigner(function(object, source, srcIndex) {\n      baseMerge(object, source, srcIndex);\n    });\n\n    /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n      baseMerge(object, source, srcIndex, customizer);\n    });\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable property paths of `object` that are not omitted.\n     *\n     * **Note:** This method is considerably slower than `_.pick`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */\n    var omit = flatRest(function(object, paths) {\n      var result = {};\n      if (object == null) {\n        return result;\n      }\n      var isDeep = false;\n      paths = arrayMap(paths, function(path) {\n        path = castPath(path, object);\n        isDeep || (isDeep = path.length > 1);\n        return path;\n      });\n      copyObject(object, getAllKeysIn(object), result);\n      if (isDeep) {\n        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n      }\n      var length = paths.length;\n      while (length--) {\n        baseUnset(result, paths[length]);\n      }\n      return result;\n    });\n\n    /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */\n    function omitBy(object, predicate) {\n      return pickBy(object, negate(getIteratee(predicate)));\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var pick = flatRest(function(object, paths) {\n      return object == null ? {} : basePick(object, paths);\n    });\n\n    /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    function pickBy(object, predicate) {\n      if (object == null) {\n        return {};\n      }\n      var props = arrayMap(getAllKeysIn(object), function(prop) {\n        return [prop];\n      });\n      predicate = getIteratee(predicate);\n      return basePickBy(object, props, function(value, path) {\n        return predicate(value, path[0]);\n      });\n    }\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length;\n\n      // Ensure the loop is entered when path is empty.\n      if (!length) {\n        length = 1;\n        object = undefined;\n      }\n      while (++index < length) {\n        var value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n          index = length;\n          value = defaultValue;\n        }\n        object = isFunction(value) ? value.call(object) : value;\n      }\n      return object;\n    }\n\n    /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      return object == null ? object : baseSet(object, path, value);\n    }\n\n    /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function setWith(object, path, value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseSet(object, path, value, customizer);\n    }\n\n    /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */\n    var toPairs = createToPairs(keys);\n\n    /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */\n    var toPairsIn = createToPairs(keysIn);\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function transform(object, iteratee, accumulator) {\n      var isArr = isArray(object),\n          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n      iteratee = getIteratee(iteratee, 4);\n      if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) {\n          accumulator = isArr ? new Ctor : [];\n        }\n        else if (isObject(object)) {\n          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n        }\n        else {\n          accumulator = {};\n        }\n      }\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */\n    function unset(object, path) {\n      return object == null ? true : baseUnset(object, path);\n    }\n\n    /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */\n    function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }\n\n    /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function updateWith(object, path, updater, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n    }\n\n    /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return object == null ? [] : baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return object == null ? [] : baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */\n    function clamp(number, lower, upper) {\n      if (upper === undefined) {\n        upper = lower;\n        lower = undefined;\n      }\n      if (upper !== undefined) {\n        upper = toNumber(upper);\n        upper = upper === upper ? upper : 0;\n      }\n      if (lower !== undefined) {\n        lower = toNumber(lower);\n        lower = lower === lower ? lower : 0;\n      }\n      return baseClamp(toNumber(number), lower, upper);\n    }\n\n    /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */\n    function inRange(number, start, end) {\n      start = toFinite(start);\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = toFinite(end);\n      }\n      number = toNumber(number);\n      return baseInRange(number, start, end);\n    }\n\n    /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(lower, upper, floating) {\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n        upper = floating = undefined;\n      }\n      if (floating === undefined) {\n        if (typeof upper == 'boolean') {\n          floating = upper;\n          upper = undefined;\n        }\n        else if (typeof lower == 'boolean') {\n          floating = lower;\n          lower = undefined;\n        }\n      }\n      if (lower === undefined && upper === undefined) {\n        lower = 0;\n        upper = 1;\n      }\n      else {\n        lower = toFinite(lower);\n        if (upper === undefined) {\n          upper = lower;\n          lower = 0;\n        } else {\n          upper = toFinite(upper);\n        }\n      }\n      if (lower > upper) {\n        var temp = lower;\n        lower = upper;\n        upper = temp;\n      }\n      if (floating || lower % 1 || upper % 1) {\n        var rand = nativeRandom();\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n      }\n      return baseRandom(lower, upper);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? capitalize(word) : word);\n    });\n\n    /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      return upperFirst(toString(string).toLowerCase());\n    }\n\n    /**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = toString(string);\n      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = toString(string);\n      target = baseToString(target);\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : baseClamp(toInteger(position), 0, length);\n\n      var end = position;\n      position -= target.length;\n      return position >= 0 && string.slice(position, end) == target;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      string = toString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */\n    function escapeRegExp(string) {\n      string = toString(string);\n      return (string && reHasRegExpChar.test(string))\n        ? string.replace(reRegExpChar, '\\\\$&')\n        : string;\n    }\n\n    /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */\n    var lowerCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */\n    var lowerFirst = createCaseFirst('toLowerCase');\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      if (!length || strLength >= length) {\n        return string;\n      }\n      var mid = (length - strLength) / 2;\n      return (\n        createPadding(nativeFloor(mid), chars) +\n        string +\n        createPadding(nativeCeil(mid), chars)\n      );\n    }\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */\n    function padEnd(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (string + createPadding(length - strLength, chars))\n        : string;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */\n    function padStart(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (createPadding(length - strLength, chars) + string)\n        : string;\n    }\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      if (guard || radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n, guard) {\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      return baseRepeat(toString(string), n);\n    }\n\n    /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */\n    function replace() {\n      var args = arguments,\n          string = toString(args[0]);\n\n      return args.length < 3 ? string : string.replace(args[1], args[2]);\n    }\n\n    /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */\n    function split(string, separator, limit) {\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n        separator = limit = undefined;\n      }\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n      if (!limit) {\n        return [];\n      }\n      string = toString(string);\n      if (string && (\n            typeof separator == 'string' ||\n            (separator != null && !isRegExp(separator))\n          )) {\n        separator = baseToString(separator);\n        if (!separator && hasUnicode(string)) {\n          return castSlice(stringToArray(string), 0, limit);\n        }\n      }\n      return string.split(separator, limit);\n    }\n\n    /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + upperFirst(word);\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = toString(string);\n      position = position == null\n        ? 0\n        : baseClamp(toInteger(position), 0, string.length);\n\n      target = baseToString(target);\n      return string.slice(position, position + target.length) == target;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, guard) {\n      // Based on John Resig's `tmpl` implementation\n      // (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      string = toString(string);\n      options = assignInWith({}, options, settings, customDefaultsAssignIn);\n\n      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      // The sourceURL gets injected into the source that's eval-ed, so be careful\n      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in\n      // and escape the comment, thus injecting code that gets evaled.\n      var sourceURL = '//# sourceURL=' +\n        (hasOwnProperty.call(options, 'sourceURL')\n          ? (options.sourceURL + '').replace(/\\s/g, ' ')\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products needs `match` returned in\n        // order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      var variable = hasOwnProperty.call(options, 'variable') && options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Throw an error if a forbidden character was found in `variable`, to prevent\n      // potential command injection attacks.\n      else if (reForbiddenIdentifierChars.test(variable)) {\n        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);\n      }\n\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source)\n          .apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */\n    function toLower(value) {\n      return toString(value).toLowerCase();\n    }\n\n    /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */\n    function toUpper(value) {\n      return toString(value).toUpperCase();\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return baseTrim(string);\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          chrSymbols = stringToArray(chars),\n          start = charsStartIndex(strSymbols, chrSymbols),\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n      return castSlice(strSymbols, start, end).join('');\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimEnd(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.slice(0, trimmedEndIndex(string) + 1);\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n      return castSlice(strSymbols, 0, end).join('');\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimStart(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimStart, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          start = charsStartIndex(strSymbols, stringToArray(chars));\n\n      return castSlice(strSymbols, start).join('');\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function truncate(string, options) {\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (isObject(options)) {\n        var separator = 'separator' in options ? options.separator : separator;\n        length = 'length' in options ? toInteger(options.length) : length;\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\n      }\n      string = toString(string);\n\n      var strLength = string.length;\n      if (hasUnicode(string)) {\n        var strSymbols = stringToArray(string);\n        strLength = strSymbols.length;\n      }\n      if (length >= strLength) {\n        return string;\n      }\n      var end = length - stringSize(omission);\n      if (end < 1) {\n        return omission;\n      }\n      var result = strSymbols\n        ? castSlice(strSymbols, 0, end).join('')\n        : string.slice(0, end);\n\n      if (separator === undefined) {\n        return result + omission;\n      }\n      if (strSymbols) {\n        end += (result.length - end);\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              substring = result;\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            var newEnd = match.index;\n          }\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\n        }\n      } else if (string.indexOf(baseToString(separator), end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = toString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */\n    var upperCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toUpperCase();\n    });\n\n    /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */\n    var upperFirst = createCaseFirst('toUpperCase');\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      string = toString(string);\n      pattern = guard ? undefined : pattern;\n\n      if (pattern === undefined) {\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n      }\n      return string.match(pattern) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = baseRest(function(func, args) {\n      try {\n        return apply(func, undefined, args);\n      } catch (e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */\n    var bindAll = flatRest(function(object, methodNames) {\n      arrayEach(methodNames, function(key) {\n        key = toKey(key);\n        baseAssignValue(object, key, bind(object[key], object));\n      });\n      return object;\n    });\n\n    /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */\n    function cond(pairs) {\n      var length = pairs == null ? 0 : pairs.length,\n          toIteratee = getIteratee();\n\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n        if (typeof pair[1] != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return [toIteratee(pair[0]), pair[1]];\n      });\n\n      return baseRest(function(args) {\n        var index = -1;\n        while (++index < length) {\n          var pair = pairs[index];\n          if (apply(pair[0], this, args)) {\n            return apply(pair[1], this, args);\n          }\n        }\n      });\n    }\n\n    /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */\n    function conforms(source) {\n      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */\n    function defaultTo(value, defaultValue) {\n      return (value == null || value !== value) ? defaultValue : value;\n    }\n\n    /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */\n    function iteratee(func) {\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * **Note:** Multiple values can be checked by combining several matchers\n     * using `_.overSome`\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     *\n     * // Checking for several possible values\n     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * **Note:** Multiple values can be checked by combining several matchers\n     * using `_.overSome`\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     *\n     * // Checking for several possible values\n     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */\n    var method = baseRest(function(path, args) {\n      return function(object) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = baseRest(function(object, args) {\n      return function(path) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      var props = keys(source),\n          methodNames = baseFunctions(source, props);\n\n      if (options == null &&\n          !(isObject(source) && (methodNames.length || !props.length))) {\n        options = source;\n        source = object;\n        object = this;\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n          isFunc = isFunction(object);\n\n      arrayEach(methodNames, function(methodName) {\n        var func = source[methodName];\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = function() {\n            var chainAll = this.__chain__;\n            if (chain || chainAll) {\n              var result = object(this.__wrapped__),\n                  actions = result.__actions__ = copyArray(this.__actions__);\n\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n              result.__chain__ = chainAll;\n              return result;\n            }\n            return func.apply(object, arrayPush([this.value()], arguments));\n          };\n        }\n      });\n\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      if (root._ === this) {\n        root._ = oldDash;\n      }\n      return this;\n    }\n\n    /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */\n    function nthArg(n) {\n      n = toInteger(n);\n      return baseRest(function(args) {\n        return baseNth(args, n);\n      });\n    }\n\n    /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */\n    var over = createOver(arrayMap);\n\n    /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * Following shorthands are possible for providing predicates.\n     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.\n     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overEvery = createOver(arrayEvery);\n\n    /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * Following shorthands are possible for providing predicates.\n     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.\n     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     *\n     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])\n     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])\n     */\n    var overSome = createOver(arraySome);\n\n    /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return object == null ? undefined : baseGet(object, path);\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    var range = createRange();\n\n    /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */\n    var rangeRight = createRange(true);\n\n    /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */\n    function stubArray() {\n      return [];\n    }\n\n    /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */\n    function stubFalse() {\n      return false;\n    }\n\n    /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */\n    function stubObject() {\n      return {};\n    }\n\n    /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */\n    function stubString() {\n      return '';\n    }\n\n    /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */\n    function stubTrue() {\n      return true;\n    }\n\n    /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */\n    function times(n, iteratee) {\n      n = toInteger(n);\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var index = MAX_ARRAY_LENGTH,\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n      iteratee = getIteratee(iteratee);\n      n -= MAX_ARRAY_LENGTH;\n\n      var result = baseTimes(length, iteratee);\n      while (++index < n) {\n        iteratee(index);\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return arrayMap(value, toKey);\n      }\n      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return toString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    var add = createMathOperation(function(augend, addend) {\n      return augend + addend;\n    }, 0);\n\n    /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */\n    var divide = createMathOperation(function(dividend, divisor) {\n      return dividend / divisor;\n    }, 1);\n\n    /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */\n    function max(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseGt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */\n    function maxBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n        : undefined;\n    }\n\n    /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */\n    function mean(array) {\n      return baseMean(array, identity);\n    }\n\n    /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */\n    function meanBy(array, iteratee) {\n      return baseMean(array, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */\n    function min(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseLt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */\n    function minBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n        : undefined;\n    }\n\n    /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\n      return multiplier * multiplicand;\n    }, 1);\n\n    /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */\n    var subtract = createMathOperation(function(minuend, subtrahend) {\n      return minuend - subtrahend;\n    }, 0);\n\n    /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */\n    function sum(array) {\n      return (array && array.length)\n        ? baseSum(array, identity)\n        : 0;\n    }\n\n    /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */\n    function sumBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSum(array, getIteratee(iteratee, 2))\n        : 0;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return wrapped values in chain sequences.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.assignIn = assignIn;\n    lodash.assignInWith = assignInWith;\n    lodash.assignWith = assignWith;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.castArray = castArray;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.concat = concat;\n    lodash.cond = cond;\n    lodash.conforms = conforms;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.differenceBy = differenceBy;\n    lodash.differenceWith = differenceWith;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatMap = flatMap;\n    lodash.flatMapDeep = flatMapDeep;\n    lodash.flatMapDepth = flatMapDepth;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flattenDepth = flattenDepth;\n    lodash.flip = flip;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.fromPairs = fromPairs;\n    lodash.functions = functions;\n    lodash.functionsIn = functionsIn;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.intersectionBy = intersectionBy;\n    lodash.intersectionWith = intersectionWith;\n    lodash.invert = invert;\n    lodash.invertBy = invertBy;\n    lodash.invokeMap = invokeMap;\n    lodash.iteratee = iteratee;\n    lodash.keyBy = keyBy;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.mergeWith = mergeWith;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.negate = negate;\n    lodash.nthArg = nthArg;\n    lodash.omit = omit;\n    lodash.omitBy = omitBy;\n    lodash.once = once;\n    lodash.orderBy = orderBy;\n    lodash.over = over;\n    lodash.overArgs = overArgs;\n    lodash.overEvery = overEvery;\n    lodash.overSome = overSome;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pickBy = pickBy;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAll = pullAll;\n    lodash.pullAllBy = pullAllBy;\n    lodash.pullAllWith = pullAllWith;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rangeRight = rangeRight;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.reverse = reverse;\n    lodash.sampleSize = sampleSize;\n    lodash.set = set;\n    lodash.setWith = setWith;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortedUniq = sortedUniq;\n    lodash.sortedUniqBy = sortedUniqBy;\n    lodash.split = split;\n    lodash.spread = spread;\n    lodash.tail = tail;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.toArray = toArray;\n    lodash.toPairs = toPairs;\n    lodash.toPairsIn = toPairsIn;\n    lodash.toPath = toPath;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.unary = unary;\n    lodash.union = union;\n    lodash.unionBy = unionBy;\n    lodash.unionWith = unionWith;\n    lodash.uniq = uniq;\n    lodash.uniqBy = uniqBy;\n    lodash.uniqWith = uniqWith;\n    lodash.unset = unset;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.update = update;\n    lodash.updateWith = updateWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.without = without;\n    lodash.words = words;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.xorBy = xorBy;\n    lodash.xorWith = xorWith;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipObjectDeep = zipObjectDeep;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.entries = toPairs;\n    lodash.entriesIn = toPairsIn;\n    lodash.extend = assignIn;\n    lodash.extendWith = assignInWith;\n\n    // Add methods to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return unwrapped values in chain sequences.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clamp = clamp;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.cloneDeepWith = cloneDeepWith;\n    lodash.cloneWith = cloneWith;\n    lodash.conformsTo = conformsTo;\n    lodash.deburr = deburr;\n    lodash.defaultTo = defaultTo;\n    lodash.divide = divide;\n    lodash.endsWith = endsWith;\n    lodash.eq = eq;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.floor = floor;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.hasIn = hasIn;\n    lodash.head = head;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.invoke = invoke;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isArrayBuffer = isArrayBuffer;\n    lodash.isArrayLike = isArrayLike;\n    lodash.isArrayLikeObject = isArrayLikeObject;\n    lodash.isBoolean = isBoolean;\n    lodash.isBuffer = isBuffer;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isEqualWith = isEqualWith;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isInteger = isInteger;\n    lodash.isLength = isLength;\n    lodash.isMap = isMap;\n    lodash.isMatch = isMatch;\n    lodash.isMatchWith = isMatchWith;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNil = isNil;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isObjectLike = isObjectLike;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isSafeInteger = isSafeInteger;\n    lodash.isSet = isSet;\n    lodash.isString = isString;\n    lodash.isSymbol = isSymbol;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.isWeakMap = isWeakMap;\n    lodash.isWeakSet = isWeakSet;\n    lodash.join = join;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lowerCase = lowerCase;\n    lodash.lowerFirst = lowerFirst;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.maxBy = maxBy;\n    lodash.mean = mean;\n    lodash.meanBy = meanBy;\n    lodash.min = min;\n    lodash.minBy = minBy;\n    lodash.stubArray = stubArray;\n    lodash.stubFalse = stubFalse;\n    lodash.stubObject = stubObject;\n    lodash.stubString = stubString;\n    lodash.stubTrue = stubTrue;\n    lodash.multiply = multiply;\n    lodash.nth = nth;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padEnd = padEnd;\n    lodash.padStart = padStart;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.replace = replace;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.sample = sample;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedIndexBy = sortedIndexBy;\n    lodash.sortedIndexOf = sortedIndexOf;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.subtract = subtract;\n    lodash.sum = sum;\n    lodash.sumBy = sumBy;\n    lodash.template = template;\n    lodash.times = times;\n    lodash.toFinite = toFinite;\n    lodash.toInteger = toInteger;\n    lodash.toLength = toLength;\n    lodash.toLower = toLower;\n    lodash.toNumber = toNumber;\n    lodash.toSafeInteger = toSafeInteger;\n    lodash.toString = toString;\n    lodash.toUpper = toUpper;\n    lodash.trim = trim;\n    lodash.trimEnd = trimEnd;\n    lodash.trimStart = trimStart;\n    lodash.truncate = truncate;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.upperCase = upperCase;\n    lodash.upperFirst = upperFirst;\n\n    // Add aliases.\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.first = head;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), { 'chain': false });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n\n        var result = (this.__filtered__ && !index)\n          ? new LazyWrapper(this)\n          : this.clone();\n\n        if (result.__filtered__) {\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n        } else {\n          result.__views__.push({\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n          });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee) {\n        var result = this.clone();\n        result.__iteratees__.push({\n          'iteratee': getIteratee(iteratee, 3),\n          'type': type\n        });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n    arrayEach(['head', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n    arrayEach(['initial', 'tail'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.find = function(predicate) {\n      return this.filter(predicate).head();\n    };\n\n    LazyWrapper.prototype.findLast = function(predicate) {\n      return this.reverse().find(predicate);\n    };\n\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n      if (typeof path == 'function') {\n        return new LazyWrapper(this);\n      }\n      return this.map(function(value) {\n        return baseInvoke(value, path, args);\n      });\n    });\n\n    LazyWrapper.prototype.reject = function(predicate) {\n      return this.filter(negate(getIteratee(predicate)));\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = toInteger(start);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = toInteger(end);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n      return this.reverse().takeWhile(predicate).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(MAX_ARRAY_LENGTH);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n          isTaker = /^(?:head|last)$/.test(methodName),\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n          retUnwrapped = isTaker || /^find/.test(methodName);\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var value = this.__wrapped__,\n            args = isTaker ? [1] : arguments,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        var interceptor = function(value) {\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n          return (isTaker && chainAll) ? result[0] : result;\n        };\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var chainAll = this.__chain__,\n            isHybrid = !!this.__actions__.length,\n            isUnwrapped = retUnwrapped && !chainAll,\n            onlyLazy = isLazy && !isHybrid;\n\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n          return new LodashWrapper(result, chainAll);\n        }\n        if (isUnwrapped && onlyLazy) {\n          return func.apply(this, args);\n        }\n        result = this.thru(interceptor);\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n      };\n    });\n\n    // Add `Array` methods to `lodash.prototype`.\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n      var func = arrayProto[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          var value = this.value();\n          return func.apply(isArray(value) ? value : [], args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(isArray(value) ? value : [], args);\n        });\n      };\n    });\n\n    // Map minified method names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = lodashFunc.name + '';\n        if (!hasOwnProperty.call(realNames, key)) {\n          realNames[key] = [];\n        }\n        realNames[key].push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\n      'name': 'wrapper',\n      'func': undefined\n    }];\n\n    // Add methods to `LazyWrapper`.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chain sequence methods to the `lodash` wrapper.\n    lodash.prototype.at = wrapperAt;\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.next = wrapperNext;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add lazy aliases.\n    lodash.prototype.first = lodash.prototype.head;\n\n    if (symIterator) {\n      lodash.prototype[symIterator] = wrapperToIterator;\n    }\n    return lodash;\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (true) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return _;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else {}\n}.call(this));\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/lodash/lodash.js?");

/***/ }),

/***/ "./node_modules/protobufjs/minimal.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/minimal.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// minimal library entry point.\n\n\nmodule.exports = __webpack_require__(/*! ./src/index-minimal */ \"./node_modules/protobufjs/src/index-minimal.js\");\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/protobufjs/minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/index-minimal.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/index-minimal.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = __webpack_require__(/*! ./writer */ \"./node_modules/protobufjs/src/writer.js\");\nprotobuf.BufferWriter = __webpack_require__(/*! ./writer_buffer */ \"./node_modules/protobufjs/src/writer_buffer.js\");\nprotobuf.Reader       = __webpack_require__(/*! ./reader */ \"./node_modules/protobufjs/src/reader.js\");\nprotobuf.BufferReader = __webpack_require__(/*! ./reader_buffer */ \"./node_modules/protobufjs/src/reader_buffer.js\");\n\n// Utility\nprotobuf.util         = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\nprotobuf.rpc          = __webpack_require__(/*! ./rpc */ \"./node_modules/protobufjs/src/rpc.js\");\nprotobuf.roots        = __webpack_require__(/*! ./roots */ \"./node_modules/protobufjs/src/roots.js\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/protobufjs/src/index-minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/reader.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/reader.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = Reader;\n\nvar util      = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/protobufjs/src/reader.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/reader_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/reader_buffer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = __webpack_require__(/*! ./reader */ \"./node_modules/protobufjs/src/reader.js\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/protobufjs/src/reader_buffer.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/roots.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/roots.js ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/protobufjs/src/roots.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/rpc.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/src/rpc.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = __webpack_require__(/*! ./rpc/service */ \"./node_modules/protobufjs/src/rpc/service.js\");\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/protobufjs/src/rpc.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/rpc/service.js":
/*!****************************************************!*\
  !*** ./node_modules/protobufjs/src/rpc/service.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = Service;\n\nvar util = __webpack_require__(/*! ../util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/protobufjs/src/rpc/service.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/util/longbits.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/util/longbits.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = LongBits;\n\nvar util = __webpack_require__(/*! ../util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/protobufjs/src/util/longbits.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/util/minimal.js":
/*!*****************************************************!*\
  !*** ./node_modules/protobufjs/src/util/minimal.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = __webpack_require__(/*! @protobufjs/aspromise */ \"./node_modules/@protobufjs/aspromise/index.js\");\n\n// converts to / from base64 encoded strings\nutil.base64 = __webpack_require__(/*! @protobufjs/base64 */ \"./node_modules/@protobufjs/base64/index.js\");\n\n// base class of rpc.Service\nutil.EventEmitter = __webpack_require__(/*! @protobufjs/eventemitter */ \"./node_modules/@protobufjs/eventemitter/index.js\");\n\n// float handling accross browsers\nutil.float = __webpack_require__(/*! @protobufjs/float */ \"./node_modules/@protobufjs/float/index.js\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = __webpack_require__(/*! @protobufjs/inquire */ \"./node_modules/@protobufjs/inquire/index.js\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = __webpack_require__(/*! @protobufjs/utf8 */ \"./node_modules/@protobufjs/utf8/index.js\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = __webpack_require__(/*! @protobufjs/pool */ \"./node_modules/@protobufjs/pool/index.js\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = __webpack_require__(/*! ./longbits */ \"./node_modules/protobufjs/src/util/longbits.js\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof __webpack_require__.g !== \"undefined\"\n                   && __webpack_require__.g\n                   && __webpack_require__.g.process\n                   && __webpack_require__.g.process.versions\n                   && __webpack_require__.g.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && __webpack_require__.g\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/protobufjs/src/util/minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/writer.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/writer.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = Writer;\n\nvar util      = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/protobufjs/src/writer.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/writer_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/writer_buffer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = __webpack_require__(/*! ./writer */ \"./node_modules/protobufjs/src/writer.js\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n\n\n//# sourceURL=webpack://EntryPoint/./node_modules/protobufjs/src/writer_buffer.js?");

/***/ }),

/***/ "./proto-ts/bundel.js":
/*!****************************!*\
  !*** ./proto-ts/bundel.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CmdConfigWifiSsidGet\": () => (/* binding */ CmdConfigWifiSsidGet),\n/* harmony export */   \"CmdConnectionKeyGen\": () => (/* binding */ CmdConnectionKeyGen),\n/* harmony export */   \"CmdConnectionKeyGet\": () => (/* binding */ CmdConnectionKeyGet),\n/* harmony export */   \"CmdEIOConnect\": () => (/* binding */ CmdEIOConnect),\n/* harmony export */   \"CmdFirmwareVersionGet\": () => (/* binding */ CmdFirmwareVersionGet),\n/* harmony export */   \"CmdHardwareVersionGet\": () => (/* binding */ CmdHardwareVersionGet),\n/* harmony export */   \"CmdModelGet\": () => (/* binding */ CmdModelGet),\n/* harmony export */   \"CmdPcbaVersionGet\": () => (/* binding */ CmdPcbaVersionGet),\n/* harmony export */   \"CmdPing\": () => (/* binding */ CmdPing),\n/* harmony export */   \"CmdProductionDateGet\": () => (/* binding */ CmdProductionDateGet),\n/* harmony export */   \"CmdProtocolVersionGet\": () => (/* binding */ CmdProtocolVersionGet),\n/* harmony export */   \"CmdSerialNumberGet\": () => (/* binding */ CmdSerialNumberGet),\n/* harmony export */   \"CmdTermsGet\": () => (/* binding */ CmdTermsGet),\n/* harmony export */   \"CmdTermsSet\": () => (/* binding */ CmdTermsSet),\n/* harmony export */   \"CmdWifiStaIpGet\": () => (/* binding */ CmdWifiStaIpGet),\n/* harmony export */   \"CmdWifiStaMacGet\": () => (/* binding */ CmdWifiStaMacGet),\n/* harmony export */   \"HdyMsgType\": () => (/* binding */ HdyMsgType),\n/* harmony export */   \"HdyPayload\": () => (/* binding */ HdyPayload),\n/* harmony export */   \"RespConfigWifiSsidGet\": () => (/* binding */ RespConfigWifiSsidGet),\n/* harmony export */   \"RespConnectionKeyGen\": () => (/* binding */ RespConnectionKeyGen),\n/* harmony export */   \"RespConnectionKeyGet\": () => (/* binding */ RespConnectionKeyGet),\n/* harmony export */   \"RespEIOConnect\": () => (/* binding */ RespEIOConnect),\n/* harmony export */   \"RespFirmwareVersionGet\": () => (/* binding */ RespFirmwareVersionGet),\n/* harmony export */   \"RespHardwareVersionGet\": () => (/* binding */ RespHardwareVersionGet),\n/* harmony export */   \"RespModelGet\": () => (/* binding */ RespModelGet),\n/* harmony export */   \"RespPcbaVersionGet\": () => (/* binding */ RespPcbaVersionGet),\n/* harmony export */   \"RespPing\": () => (/* binding */ RespPing),\n/* harmony export */   \"RespProductionDateGet\": () => (/* binding */ RespProductionDateGet),\n/* harmony export */   \"RespProtocolVersionGet\": () => (/* binding */ RespProtocolVersionGet),\n/* harmony export */   \"RespSerialNumberGet\": () => (/* binding */ RespSerialNumberGet),\n/* harmony export */   \"RespTermsGet\": () => (/* binding */ RespTermsGet),\n/* harmony export */   \"RespTermsSet\": () => (/* binding */ RespTermsSet),\n/* harmony export */   \"RespWifiStaIpGet\": () => (/* binding */ RespWifiStaIpGet),\n/* harmony export */   \"RespWifiStaMacGet\": () => (/* binding */ RespWifiStaMacGet),\n/* harmony export */   \"cloud\": () => (/* binding */ cloud),\n/* harmony export */   \"default\": () => (/* binding */ $root),\n/* harmony export */   \"espressif\": () => (/* binding */ espressif),\n/* harmony export */   \"handyplug\": () => (/* binding */ handyplug),\n/* harmony export */   \"hdyRpc\": () => (/* binding */ hdyRpc)\n/* harmony export */ });\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protobufjs/minimal */ \"./node_modules/protobufjs/minimal.js\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__);\n/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\n\n// Common aliases\nconst $Reader = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader, $Writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer, $util = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util;\n\n// Exported root namespace\nconst $root = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.roots[\"default\"] || (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.roots[\"default\"] = {});\n\nconst cloud = $root.cloud = (() => {\n\n    /**\n     * Namespace cloud.\n     * @exports cloud\n     * @namespace\n     */\n    const cloud = {};\n\n    /**\n     * CloudConfigStatus enum.\n     * @name cloud.CloudConfigStatus\n     * @enum {number}\n     * @property {number} Success=0 Success value\n     * @property {number} InvalidParam=1 InvalidParam value\n     * @property {number} InvalidState=2 InvalidState value\n     */\n    cloud.CloudConfigStatus = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Success\"] = 0;\n        values[valuesById[1] = \"InvalidParam\"] = 1;\n        values[valuesById[2] = \"InvalidState\"] = 2;\n        return values;\n    })();\n\n    cloud.CmdGetSetDetails = (function() {\n\n        /**\n         * Properties of a CmdGetSetDetails.\n         * @memberof cloud\n         * @interface ICmdGetSetDetails\n         * @property {string|null} [UserID] CmdGetSetDetails UserID\n         * @property {string|null} [SecretKey] CmdGetSetDetails SecretKey\n         */\n\n        /**\n         * Constructs a new CmdGetSetDetails.\n         * @memberof cloud\n         * @classdesc Represents a CmdGetSetDetails.\n         * @implements ICmdGetSetDetails\n         * @constructor\n         * @param {cloud.ICmdGetSetDetails=} [properties] Properties to set\n         */\n        function CmdGetSetDetails(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CmdGetSetDetails UserID.\n         * @member {string} UserID\n         * @memberof cloud.CmdGetSetDetails\n         * @instance\n         */\n        CmdGetSetDetails.prototype.UserID = \"\";\n\n        /**\n         * CmdGetSetDetails SecretKey.\n         * @member {string} SecretKey\n         * @memberof cloud.CmdGetSetDetails\n         * @instance\n         */\n        CmdGetSetDetails.prototype.SecretKey = \"\";\n\n        /**\n         * Creates a new CmdGetSetDetails instance using the specified properties.\n         * @function create\n         * @memberof cloud.CmdGetSetDetails\n         * @static\n         * @param {cloud.ICmdGetSetDetails=} [properties] Properties to set\n         * @returns {cloud.CmdGetSetDetails} CmdGetSetDetails instance\n         */\n        CmdGetSetDetails.create = function create(properties) {\n            return new CmdGetSetDetails(properties);\n        };\n\n        /**\n         * Encodes the specified CmdGetSetDetails message. Does not implicitly {@link cloud.CmdGetSetDetails.verify|verify} messages.\n         * @function encode\n         * @memberof cloud.CmdGetSetDetails\n         * @static\n         * @param {cloud.CmdGetSetDetails} message CmdGetSetDetails message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CmdGetSetDetails.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.UserID != null && Object.hasOwnProperty.call(message, \"UserID\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.UserID);\n            if (message.SecretKey != null && Object.hasOwnProperty.call(message, \"SecretKey\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.SecretKey);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CmdGetSetDetails message, length delimited. Does not implicitly {@link cloud.CmdGetSetDetails.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof cloud.CmdGetSetDetails\n         * @static\n         * @param {cloud.CmdGetSetDetails} message CmdGetSetDetails message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CmdGetSetDetails.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CmdGetSetDetails message from the specified reader or buffer.\n         * @function decode\n         * @memberof cloud.CmdGetSetDetails\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {cloud.CmdGetSetDetails} CmdGetSetDetails\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CmdGetSetDetails.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloud.CmdGetSetDetails();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.UserID = reader.string();\n                    break;\n                case 2:\n                    message.SecretKey = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CmdGetSetDetails message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof cloud.CmdGetSetDetails\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {cloud.CmdGetSetDetails} CmdGetSetDetails\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CmdGetSetDetails.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CmdGetSetDetails message.\n         * @function verify\n         * @memberof cloud.CmdGetSetDetails\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CmdGetSetDetails.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.UserID != null && message.hasOwnProperty(\"UserID\"))\n                if (!$util.isString(message.UserID))\n                    return \"UserID: string expected\";\n            if (message.SecretKey != null && message.hasOwnProperty(\"SecretKey\"))\n                if (!$util.isString(message.SecretKey))\n                    return \"SecretKey: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a CmdGetSetDetails message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof cloud.CmdGetSetDetails\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {cloud.CmdGetSetDetails} CmdGetSetDetails\n         */\n        CmdGetSetDetails.fromObject = function fromObject(object) {\n            if (object instanceof $root.cloud.CmdGetSetDetails)\n                return object;\n            let message = new $root.cloud.CmdGetSetDetails();\n            if (object.UserID != null)\n                message.UserID = String(object.UserID);\n            if (object.SecretKey != null)\n                message.SecretKey = String(object.SecretKey);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CmdGetSetDetails message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof cloud.CmdGetSetDetails\n         * @static\n         * @param {cloud.CmdGetSetDetails} message CmdGetSetDetails\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CmdGetSetDetails.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.UserID = \"\";\n                object.SecretKey = \"\";\n            }\n            if (message.UserID != null && message.hasOwnProperty(\"UserID\"))\n                object.UserID = message.UserID;\n            if (message.SecretKey != null && message.hasOwnProperty(\"SecretKey\"))\n                object.SecretKey = message.SecretKey;\n            return object;\n        };\n\n        /**\n         * Converts this CmdGetSetDetails to JSON.\n         * @function toJSON\n         * @memberof cloud.CmdGetSetDetails\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CmdGetSetDetails.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return CmdGetSetDetails;\n    })();\n\n    cloud.RespGetSetDetails = (function() {\n\n        /**\n         * Properties of a RespGetSetDetails.\n         * @memberof cloud\n         * @interface IRespGetSetDetails\n         * @property {cloud.CloudConfigStatus|null} [Status] RespGetSetDetails Status\n         * @property {string|null} [DeviceSecret] RespGetSetDetails DeviceSecret\n         */\n\n        /**\n         * Constructs a new RespGetSetDetails.\n         * @memberof cloud\n         * @classdesc Represents a RespGetSetDetails.\n         * @implements IRespGetSetDetails\n         * @constructor\n         * @param {cloud.IRespGetSetDetails=} [properties] Properties to set\n         */\n        function RespGetSetDetails(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RespGetSetDetails Status.\n         * @member {cloud.CloudConfigStatus} Status\n         * @memberof cloud.RespGetSetDetails\n         * @instance\n         */\n        RespGetSetDetails.prototype.Status = 0;\n\n        /**\n         * RespGetSetDetails DeviceSecret.\n         * @member {string} DeviceSecret\n         * @memberof cloud.RespGetSetDetails\n         * @instance\n         */\n        RespGetSetDetails.prototype.DeviceSecret = \"\";\n\n        /**\n         * Creates a new RespGetSetDetails instance using the specified properties.\n         * @function create\n         * @memberof cloud.RespGetSetDetails\n         * @static\n         * @param {cloud.IRespGetSetDetails=} [properties] Properties to set\n         * @returns {cloud.RespGetSetDetails} RespGetSetDetails instance\n         */\n        RespGetSetDetails.create = function create(properties) {\n            return new RespGetSetDetails(properties);\n        };\n\n        /**\n         * Encodes the specified RespGetSetDetails message. Does not implicitly {@link cloud.RespGetSetDetails.verify|verify} messages.\n         * @function encode\n         * @memberof cloud.RespGetSetDetails\n         * @static\n         * @param {cloud.RespGetSetDetails} message RespGetSetDetails message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RespGetSetDetails.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.Status != null && Object.hasOwnProperty.call(message, \"Status\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Status);\n            if (message.DeviceSecret != null && Object.hasOwnProperty.call(message, \"DeviceSecret\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.DeviceSecret);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RespGetSetDetails message, length delimited. Does not implicitly {@link cloud.RespGetSetDetails.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof cloud.RespGetSetDetails\n         * @static\n         * @param {cloud.RespGetSetDetails} message RespGetSetDetails message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RespGetSetDetails.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RespGetSetDetails message from the specified reader or buffer.\n         * @function decode\n         * @memberof cloud.RespGetSetDetails\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {cloud.RespGetSetDetails} RespGetSetDetails\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RespGetSetDetails.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloud.RespGetSetDetails();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.Status = reader.int32();\n                    break;\n                case 2:\n                    message.DeviceSecret = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RespGetSetDetails message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof cloud.RespGetSetDetails\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {cloud.RespGetSetDetails} RespGetSetDetails\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RespGetSetDetails.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RespGetSetDetails message.\n         * @function verify\n         * @memberof cloud.RespGetSetDetails\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RespGetSetDetails.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.Status != null && message.hasOwnProperty(\"Status\"))\n                switch (message.Status) {\n                default:\n                    return \"Status: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                    break;\n                }\n            if (message.DeviceSecret != null && message.hasOwnProperty(\"DeviceSecret\"))\n                if (!$util.isString(message.DeviceSecret))\n                    return \"DeviceSecret: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RespGetSetDetails message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof cloud.RespGetSetDetails\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {cloud.RespGetSetDetails} RespGetSetDetails\n         */\n        RespGetSetDetails.fromObject = function fromObject(object) {\n            if (object instanceof $root.cloud.RespGetSetDetails)\n                return object;\n            let message = new $root.cloud.RespGetSetDetails();\n            switch (object.Status) {\n            case \"Success\":\n            case 0:\n                message.Status = 0;\n                break;\n            case \"InvalidParam\":\n            case 1:\n                message.Status = 1;\n                break;\n            case \"InvalidState\":\n            case 2:\n                message.Status = 2;\n                break;\n            }\n            if (object.DeviceSecret != null)\n                message.DeviceSecret = String(object.DeviceSecret);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RespGetSetDetails message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof cloud.RespGetSetDetails\n         * @static\n         * @param {cloud.RespGetSetDetails} message RespGetSetDetails\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RespGetSetDetails.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.Status = options.enums === String ? \"Success\" : 0;\n                object.DeviceSecret = \"\";\n            }\n            if (message.Status != null && message.hasOwnProperty(\"Status\"))\n                object.Status = options.enums === String ? $root.cloud.CloudConfigStatus[message.Status] : message.Status;\n            if (message.DeviceSecret != null && message.hasOwnProperty(\"DeviceSecret\"))\n                object.DeviceSecret = message.DeviceSecret;\n            return object;\n        };\n\n        /**\n         * Converts this RespGetSetDetails to JSON.\n         * @function toJSON\n         * @memberof cloud.RespGetSetDetails\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RespGetSetDetails.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RespGetSetDetails;\n    })();\n\n    /**\n     * CloudConfigMsgType enum.\n     * @name cloud.CloudConfigMsgType\n     * @enum {number}\n     * @property {number} TypeCmdGetSetDetails=0 TypeCmdGetSetDetails value\n     * @property {number} TypeRespGetSetDetails=1 TypeRespGetSetDetails value\n     */\n    cloud.CloudConfigMsgType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"TypeCmdGetSetDetails\"] = 0;\n        values[valuesById[1] = \"TypeRespGetSetDetails\"] = 1;\n        return values;\n    })();\n\n    cloud.CloudConfigPayload = (function() {\n\n        /**\n         * Properties of a CloudConfigPayload.\n         * @memberof cloud\n         * @interface ICloudConfigPayload\n         * @property {cloud.CloudConfigMsgType|null} [msg] CloudConfigPayload msg\n         * @property {cloud.CmdGetSetDetails|null} [cmdGetSetDetails] CloudConfigPayload cmdGetSetDetails\n         * @property {cloud.RespGetSetDetails|null} [respGetSetDetails] CloudConfigPayload respGetSetDetails\n         */\n\n        /**\n         * Constructs a new CloudConfigPayload.\n         * @memberof cloud\n         * @classdesc Represents a CloudConfigPayload.\n         * @implements ICloudConfigPayload\n         * @constructor\n         * @param {cloud.ICloudConfigPayload=} [properties] Properties to set\n         */\n        function CloudConfigPayload(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CloudConfigPayload msg.\n         * @member {cloud.CloudConfigMsgType} msg\n         * @memberof cloud.CloudConfigPayload\n         * @instance\n         */\n        CloudConfigPayload.prototype.msg = 0;\n\n        /**\n         * CloudConfigPayload cmdGetSetDetails.\n         * @member {cloud.CmdGetSetDetails|null|undefined} cmdGetSetDetails\n         * @memberof cloud.CloudConfigPayload\n         * @instance\n         */\n        CloudConfigPayload.prototype.cmdGetSetDetails = null;\n\n        /**\n         * CloudConfigPayload respGetSetDetails.\n         * @member {cloud.RespGetSetDetails|null|undefined} respGetSetDetails\n         * @memberof cloud.CloudConfigPayload\n         * @instance\n         */\n        CloudConfigPayload.prototype.respGetSetDetails = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * CloudConfigPayload payload.\n         * @member {\"cmdGetSetDetails\"|\"respGetSetDetails\"|undefined} payload\n         * @memberof cloud.CloudConfigPayload\n         * @instance\n         */\n        Object.defineProperty(CloudConfigPayload.prototype, \"payload\", {\n            get: $util.oneOfGetter($oneOfFields = [\"cmdGetSetDetails\", \"respGetSetDetails\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new CloudConfigPayload instance using the specified properties.\n         * @function create\n         * @memberof cloud.CloudConfigPayload\n         * @static\n         * @param {cloud.ICloudConfigPayload=} [properties] Properties to set\n         * @returns {cloud.CloudConfigPayload} CloudConfigPayload instance\n         */\n        CloudConfigPayload.create = function create(properties) {\n            return new CloudConfigPayload(properties);\n        };\n\n        /**\n         * Encodes the specified CloudConfigPayload message. Does not implicitly {@link cloud.CloudConfigPayload.verify|verify} messages.\n         * @function encode\n         * @memberof cloud.CloudConfigPayload\n         * @static\n         * @param {cloud.CloudConfigPayload} message CloudConfigPayload message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CloudConfigPayload.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.msg != null && Object.hasOwnProperty.call(message, \"msg\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.msg);\n            if (message.cmdGetSetDetails != null && Object.hasOwnProperty.call(message, \"cmdGetSetDetails\"))\n                $root.cloud.CmdGetSetDetails.encode(message.cmdGetSetDetails, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.respGetSetDetails != null && Object.hasOwnProperty.call(message, \"respGetSetDetails\"))\n                $root.cloud.RespGetSetDetails.encode(message.respGetSetDetails, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CloudConfigPayload message, length delimited. Does not implicitly {@link cloud.CloudConfigPayload.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof cloud.CloudConfigPayload\n         * @static\n         * @param {cloud.CloudConfigPayload} message CloudConfigPayload message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CloudConfigPayload.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CloudConfigPayload message from the specified reader or buffer.\n         * @function decode\n         * @memberof cloud.CloudConfigPayload\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {cloud.CloudConfigPayload} CloudConfigPayload\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CloudConfigPayload.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloud.CloudConfigPayload();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.msg = reader.int32();\n                    break;\n                case 10:\n                    message.cmdGetSetDetails = $root.cloud.CmdGetSetDetails.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.respGetSetDetails = $root.cloud.RespGetSetDetails.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CloudConfigPayload message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof cloud.CloudConfigPayload\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {cloud.CloudConfigPayload} CloudConfigPayload\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CloudConfigPayload.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CloudConfigPayload message.\n         * @function verify\n         * @memberof cloud.CloudConfigPayload\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CloudConfigPayload.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.msg != null && message.hasOwnProperty(\"msg\"))\n                switch (message.msg) {\n                default:\n                    return \"msg: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.cmdGetSetDetails != null && message.hasOwnProperty(\"cmdGetSetDetails\")) {\n                properties.payload = 1;\n                {\n                    let error = $root.cloud.CmdGetSetDetails.verify(message.cmdGetSetDetails);\n                    if (error)\n                        return \"cmdGetSetDetails.\" + error;\n                }\n            }\n            if (message.respGetSetDetails != null && message.hasOwnProperty(\"respGetSetDetails\")) {\n                if (properties.payload === 1)\n                    return \"payload: multiple values\";\n                properties.payload = 1;\n                {\n                    let error = $root.cloud.RespGetSetDetails.verify(message.respGetSetDetails);\n                    if (error)\n                        return \"respGetSetDetails.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a CloudConfigPayload message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof cloud.CloudConfigPayload\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {cloud.CloudConfigPayload} CloudConfigPayload\n         */\n        CloudConfigPayload.fromObject = function fromObject(object) {\n            if (object instanceof $root.cloud.CloudConfigPayload)\n                return object;\n            let message = new $root.cloud.CloudConfigPayload();\n            switch (object.msg) {\n            case \"TypeCmdGetSetDetails\":\n            case 0:\n                message.msg = 0;\n                break;\n            case \"TypeRespGetSetDetails\":\n            case 1:\n                message.msg = 1;\n                break;\n            }\n            if (object.cmdGetSetDetails != null) {\n                if (typeof object.cmdGetSetDetails !== \"object\")\n                    throw TypeError(\".cloud.CloudConfigPayload.cmdGetSetDetails: object expected\");\n                message.cmdGetSetDetails = $root.cloud.CmdGetSetDetails.fromObject(object.cmdGetSetDetails);\n            }\n            if (object.respGetSetDetails != null) {\n                if (typeof object.respGetSetDetails !== \"object\")\n                    throw TypeError(\".cloud.CloudConfigPayload.respGetSetDetails: object expected\");\n                message.respGetSetDetails = $root.cloud.RespGetSetDetails.fromObject(object.respGetSetDetails);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CloudConfigPayload message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof cloud.CloudConfigPayload\n         * @static\n         * @param {cloud.CloudConfigPayload} message CloudConfigPayload\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CloudConfigPayload.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.msg = options.enums === String ? \"TypeCmdGetSetDetails\" : 0;\n            if (message.msg != null && message.hasOwnProperty(\"msg\"))\n                object.msg = options.enums === String ? $root.cloud.CloudConfigMsgType[message.msg] : message.msg;\n            if (message.cmdGetSetDetails != null && message.hasOwnProperty(\"cmdGetSetDetails\")) {\n                object.cmdGetSetDetails = $root.cloud.CmdGetSetDetails.toObject(message.cmdGetSetDetails, options);\n                if (options.oneofs)\n                    object.payload = \"cmdGetSetDetails\";\n            }\n            if (message.respGetSetDetails != null && message.hasOwnProperty(\"respGetSetDetails\")) {\n                object.respGetSetDetails = $root.cloud.RespGetSetDetails.toObject(message.respGetSetDetails, options);\n                if (options.oneofs)\n                    object.payload = \"respGetSetDetails\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this CloudConfigPayload to JSON.\n         * @function toJSON\n         * @memberof cloud.CloudConfigPayload\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CloudConfigPayload.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return CloudConfigPayload;\n    })();\n\n    return cloud;\n})();\n\nconst espressif = $root.espressif = (() => {\n\n    /**\n     * Namespace espressif.\n     * @exports espressif\n     * @namespace\n     */\n    const espressif = {};\n\n    /**\n     * Status enum.\n     * @name espressif.Status\n     * @enum {number}\n     * @property {number} Success=0 Success value\n     * @property {number} InvalidSecScheme=1 InvalidSecScheme value\n     * @property {number} InvalidProto=2 InvalidProto value\n     * @property {number} TooManySessions=3 TooManySessions value\n     * @property {number} InvalidArgument=4 InvalidArgument value\n     * @property {number} InternalError=5 InternalError value\n     * @property {number} CryptoError=6 CryptoError value\n     * @property {number} InvalidSession=7 InvalidSession value\n     */\n    espressif.Status = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Success\"] = 0;\n        values[valuesById[1] = \"InvalidSecScheme\"] = 1;\n        values[valuesById[2] = \"InvalidProto\"] = 2;\n        values[valuesById[3] = \"TooManySessions\"] = 3;\n        values[valuesById[4] = \"InvalidArgument\"] = 4;\n        values[valuesById[5] = \"InternalError\"] = 5;\n        values[valuesById[6] = \"CryptoError\"] = 6;\n        values[valuesById[7] = \"InvalidSession\"] = 7;\n        return values;\n    })();\n\n    espressif.S0SessionCmd = (function() {\n\n        /**\n         * Properties of a S0SessionCmd.\n         * @memberof espressif\n         * @interface IS0SessionCmd\n         */\n\n        /**\n         * Constructs a new S0SessionCmd.\n         * @memberof espressif\n         * @classdesc Represents a S0SessionCmd.\n         * @implements IS0SessionCmd\n         * @constructor\n         * @param {espressif.IS0SessionCmd=} [properties] Properties to set\n         */\n        function S0SessionCmd(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new S0SessionCmd instance using the specified properties.\n         * @function create\n         * @memberof espressif.S0SessionCmd\n         * @static\n         * @param {espressif.IS0SessionCmd=} [properties] Properties to set\n         * @returns {espressif.S0SessionCmd} S0SessionCmd instance\n         */\n        S0SessionCmd.create = function create(properties) {\n            return new S0SessionCmd(properties);\n        };\n\n        /**\n         * Encodes the specified S0SessionCmd message. Does not implicitly {@link espressif.S0SessionCmd.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.S0SessionCmd\n         * @static\n         * @param {espressif.S0SessionCmd} message S0SessionCmd message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        S0SessionCmd.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified S0SessionCmd message, length delimited. Does not implicitly {@link espressif.S0SessionCmd.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.S0SessionCmd\n         * @static\n         * @param {espressif.S0SessionCmd} message S0SessionCmd message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        S0SessionCmd.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a S0SessionCmd message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.S0SessionCmd\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.S0SessionCmd} S0SessionCmd\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        S0SessionCmd.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.S0SessionCmd();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a S0SessionCmd message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.S0SessionCmd\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.S0SessionCmd} S0SessionCmd\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        S0SessionCmd.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a S0SessionCmd message.\n         * @function verify\n         * @memberof espressif.S0SessionCmd\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        S0SessionCmd.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a S0SessionCmd message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.S0SessionCmd\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.S0SessionCmd} S0SessionCmd\n         */\n        S0SessionCmd.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.S0SessionCmd)\n                return object;\n            return new $root.espressif.S0SessionCmd();\n        };\n\n        /**\n         * Creates a plain object from a S0SessionCmd message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.S0SessionCmd\n         * @static\n         * @param {espressif.S0SessionCmd} message S0SessionCmd\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        S0SessionCmd.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this S0SessionCmd to JSON.\n         * @function toJSON\n         * @memberof espressif.S0SessionCmd\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        S0SessionCmd.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return S0SessionCmd;\n    })();\n\n    espressif.S0SessionResp = (function() {\n\n        /**\n         * Properties of a S0SessionResp.\n         * @memberof espressif\n         * @interface IS0SessionResp\n         * @property {espressif.Status|null} [status] S0SessionResp status\n         */\n\n        /**\n         * Constructs a new S0SessionResp.\n         * @memberof espressif\n         * @classdesc Represents a S0SessionResp.\n         * @implements IS0SessionResp\n         * @constructor\n         * @param {espressif.IS0SessionResp=} [properties] Properties to set\n         */\n        function S0SessionResp(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * S0SessionResp status.\n         * @member {espressif.Status} status\n         * @memberof espressif.S0SessionResp\n         * @instance\n         */\n        S0SessionResp.prototype.status = 0;\n\n        /**\n         * Creates a new S0SessionResp instance using the specified properties.\n         * @function create\n         * @memberof espressif.S0SessionResp\n         * @static\n         * @param {espressif.IS0SessionResp=} [properties] Properties to set\n         * @returns {espressif.S0SessionResp} S0SessionResp instance\n         */\n        S0SessionResp.create = function create(properties) {\n            return new S0SessionResp(properties);\n        };\n\n        /**\n         * Encodes the specified S0SessionResp message. Does not implicitly {@link espressif.S0SessionResp.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.S0SessionResp\n         * @static\n         * @param {espressif.S0SessionResp} message S0SessionResp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        S0SessionResp.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.status != null && Object.hasOwnProperty.call(message, \"status\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.status);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified S0SessionResp message, length delimited. Does not implicitly {@link espressif.S0SessionResp.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.S0SessionResp\n         * @static\n         * @param {espressif.S0SessionResp} message S0SessionResp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        S0SessionResp.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a S0SessionResp message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.S0SessionResp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.S0SessionResp} S0SessionResp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        S0SessionResp.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.S0SessionResp();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.status = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a S0SessionResp message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.S0SessionResp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.S0SessionResp} S0SessionResp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        S0SessionResp.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a S0SessionResp message.\n         * @function verify\n         * @memberof espressif.S0SessionResp\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        S0SessionResp.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.status != null && message.hasOwnProperty(\"status\"))\n                switch (message.status) {\n                default:\n                    return \"status: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a S0SessionResp message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.S0SessionResp\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.S0SessionResp} S0SessionResp\n         */\n        S0SessionResp.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.S0SessionResp)\n                return object;\n            let message = new $root.espressif.S0SessionResp();\n            switch (object.status) {\n            case \"Success\":\n            case 0:\n                message.status = 0;\n                break;\n            case \"InvalidSecScheme\":\n            case 1:\n                message.status = 1;\n                break;\n            case \"InvalidProto\":\n            case 2:\n                message.status = 2;\n                break;\n            case \"TooManySessions\":\n            case 3:\n                message.status = 3;\n                break;\n            case \"InvalidArgument\":\n            case 4:\n                message.status = 4;\n                break;\n            case \"InternalError\":\n            case 5:\n                message.status = 5;\n                break;\n            case \"CryptoError\":\n            case 6:\n                message.status = 6;\n                break;\n            case \"InvalidSession\":\n            case 7:\n                message.status = 7;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a S0SessionResp message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.S0SessionResp\n         * @static\n         * @param {espressif.S0SessionResp} message S0SessionResp\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        S0SessionResp.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.status = options.enums === String ? \"Success\" : 0;\n            if (message.status != null && message.hasOwnProperty(\"status\"))\n                object.status = options.enums === String ? $root.espressif.Status[message.status] : message.status;\n            return object;\n        };\n\n        /**\n         * Converts this S0SessionResp to JSON.\n         * @function toJSON\n         * @memberof espressif.S0SessionResp\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        S0SessionResp.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return S0SessionResp;\n    })();\n\n    /**\n     * Sec0MsgType enum.\n     * @name espressif.Sec0MsgType\n     * @enum {number}\n     * @property {number} S0_Session_Command=0 S0_Session_Command value\n     * @property {number} S0_Session_Response=1 S0_Session_Response value\n     */\n    espressif.Sec0MsgType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"S0_Session_Command\"] = 0;\n        values[valuesById[1] = \"S0_Session_Response\"] = 1;\n        return values;\n    })();\n\n    espressif.Sec0Payload = (function() {\n\n        /**\n         * Properties of a Sec0Payload.\n         * @memberof espressif\n         * @interface ISec0Payload\n         * @property {espressif.Sec0MsgType|null} [msg] Sec0Payload msg\n         * @property {espressif.S0SessionCmd|null} [sc] Sec0Payload sc\n         * @property {espressif.S0SessionResp|null} [sr] Sec0Payload sr\n         */\n\n        /**\n         * Constructs a new Sec0Payload.\n         * @memberof espressif\n         * @classdesc Represents a Sec0Payload.\n         * @implements ISec0Payload\n         * @constructor\n         * @param {espressif.ISec0Payload=} [properties] Properties to set\n         */\n        function Sec0Payload(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Sec0Payload msg.\n         * @member {espressif.Sec0MsgType} msg\n         * @memberof espressif.Sec0Payload\n         * @instance\n         */\n        Sec0Payload.prototype.msg = 0;\n\n        /**\n         * Sec0Payload sc.\n         * @member {espressif.S0SessionCmd|null|undefined} sc\n         * @memberof espressif.Sec0Payload\n         * @instance\n         */\n        Sec0Payload.prototype.sc = null;\n\n        /**\n         * Sec0Payload sr.\n         * @member {espressif.S0SessionResp|null|undefined} sr\n         * @memberof espressif.Sec0Payload\n         * @instance\n         */\n        Sec0Payload.prototype.sr = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Sec0Payload payload.\n         * @member {\"sc\"|\"sr\"|undefined} payload\n         * @memberof espressif.Sec0Payload\n         * @instance\n         */\n        Object.defineProperty(Sec0Payload.prototype, \"payload\", {\n            get: $util.oneOfGetter($oneOfFields = [\"sc\", \"sr\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Sec0Payload instance using the specified properties.\n         * @function create\n         * @memberof espressif.Sec0Payload\n         * @static\n         * @param {espressif.ISec0Payload=} [properties] Properties to set\n         * @returns {espressif.Sec0Payload} Sec0Payload instance\n         */\n        Sec0Payload.create = function create(properties) {\n            return new Sec0Payload(properties);\n        };\n\n        /**\n         * Encodes the specified Sec0Payload message. Does not implicitly {@link espressif.Sec0Payload.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.Sec0Payload\n         * @static\n         * @param {espressif.Sec0Payload} message Sec0Payload message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Sec0Payload.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.msg != null && Object.hasOwnProperty.call(message, \"msg\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.msg);\n            if (message.sc != null && Object.hasOwnProperty.call(message, \"sc\"))\n                $root.espressif.S0SessionCmd.encode(message.sc, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n            if (message.sr != null && Object.hasOwnProperty.call(message, \"sr\"))\n                $root.espressif.S0SessionResp.encode(message.sr, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Sec0Payload message, length delimited. Does not implicitly {@link espressif.Sec0Payload.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.Sec0Payload\n         * @static\n         * @param {espressif.Sec0Payload} message Sec0Payload message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Sec0Payload.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Sec0Payload message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.Sec0Payload\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.Sec0Payload} Sec0Payload\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Sec0Payload.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.Sec0Payload();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.msg = reader.int32();\n                    break;\n                case 20:\n                    message.sc = $root.espressif.S0SessionCmd.decode(reader, reader.uint32());\n                    break;\n                case 21:\n                    message.sr = $root.espressif.S0SessionResp.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Sec0Payload message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.Sec0Payload\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.Sec0Payload} Sec0Payload\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Sec0Payload.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Sec0Payload message.\n         * @function verify\n         * @memberof espressif.Sec0Payload\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Sec0Payload.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.msg != null && message.hasOwnProperty(\"msg\"))\n                switch (message.msg) {\n                default:\n                    return \"msg: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.sc != null && message.hasOwnProperty(\"sc\")) {\n                properties.payload = 1;\n                {\n                    let error = $root.espressif.S0SessionCmd.verify(message.sc);\n                    if (error)\n                        return \"sc.\" + error;\n                }\n            }\n            if (message.sr != null && message.hasOwnProperty(\"sr\")) {\n                if (properties.payload === 1)\n                    return \"payload: multiple values\";\n                properties.payload = 1;\n                {\n                    let error = $root.espressif.S0SessionResp.verify(message.sr);\n                    if (error)\n                        return \"sr.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Sec0Payload message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.Sec0Payload\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.Sec0Payload} Sec0Payload\n         */\n        Sec0Payload.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.Sec0Payload)\n                return object;\n            let message = new $root.espressif.Sec0Payload();\n            switch (object.msg) {\n            case \"S0_Session_Command\":\n            case 0:\n                message.msg = 0;\n                break;\n            case \"S0_Session_Response\":\n            case 1:\n                message.msg = 1;\n                break;\n            }\n            if (object.sc != null) {\n                if (typeof object.sc !== \"object\")\n                    throw TypeError(\".espressif.Sec0Payload.sc: object expected\");\n                message.sc = $root.espressif.S0SessionCmd.fromObject(object.sc);\n            }\n            if (object.sr != null) {\n                if (typeof object.sr !== \"object\")\n                    throw TypeError(\".espressif.Sec0Payload.sr: object expected\");\n                message.sr = $root.espressif.S0SessionResp.fromObject(object.sr);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Sec0Payload message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.Sec0Payload\n         * @static\n         * @param {espressif.Sec0Payload} message Sec0Payload\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Sec0Payload.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.msg = options.enums === String ? \"S0_Session_Command\" : 0;\n            if (message.msg != null && message.hasOwnProperty(\"msg\"))\n                object.msg = options.enums === String ? $root.espressif.Sec0MsgType[message.msg] : message.msg;\n            if (message.sc != null && message.hasOwnProperty(\"sc\")) {\n                object.sc = $root.espressif.S0SessionCmd.toObject(message.sc, options);\n                if (options.oneofs)\n                    object.payload = \"sc\";\n            }\n            if (message.sr != null && message.hasOwnProperty(\"sr\")) {\n                object.sr = $root.espressif.S0SessionResp.toObject(message.sr, options);\n                if (options.oneofs)\n                    object.payload = \"sr\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Sec0Payload to JSON.\n         * @function toJSON\n         * @memberof espressif.Sec0Payload\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Sec0Payload.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return Sec0Payload;\n    })();\n\n    espressif.SessionCmd1 = (function() {\n\n        /**\n         * Properties of a SessionCmd1.\n         * @memberof espressif\n         * @interface ISessionCmd1\n         * @property {Uint8Array|null} [clientVerifyData] SessionCmd1 clientVerifyData\n         */\n\n        /**\n         * Constructs a new SessionCmd1.\n         * @memberof espressif\n         * @classdesc Represents a SessionCmd1.\n         * @implements ISessionCmd1\n         * @constructor\n         * @param {espressif.ISessionCmd1=} [properties] Properties to set\n         */\n        function SessionCmd1(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SessionCmd1 clientVerifyData.\n         * @member {Uint8Array} clientVerifyData\n         * @memberof espressif.SessionCmd1\n         * @instance\n         */\n        SessionCmd1.prototype.clientVerifyData = $util.newBuffer([]);\n\n        /**\n         * Creates a new SessionCmd1 instance using the specified properties.\n         * @function create\n         * @memberof espressif.SessionCmd1\n         * @static\n         * @param {espressif.ISessionCmd1=} [properties] Properties to set\n         * @returns {espressif.SessionCmd1} SessionCmd1 instance\n         */\n        SessionCmd1.create = function create(properties) {\n            return new SessionCmd1(properties);\n        };\n\n        /**\n         * Encodes the specified SessionCmd1 message. Does not implicitly {@link espressif.SessionCmd1.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.SessionCmd1\n         * @static\n         * @param {espressif.SessionCmd1} message SessionCmd1 message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SessionCmd1.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.clientVerifyData != null && Object.hasOwnProperty.call(message, \"clientVerifyData\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.clientVerifyData);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SessionCmd1 message, length delimited. Does not implicitly {@link espressif.SessionCmd1.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.SessionCmd1\n         * @static\n         * @param {espressif.SessionCmd1} message SessionCmd1 message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SessionCmd1.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SessionCmd1 message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.SessionCmd1\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.SessionCmd1} SessionCmd1\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SessionCmd1.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.SessionCmd1();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 2:\n                    message.clientVerifyData = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SessionCmd1 message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.SessionCmd1\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.SessionCmd1} SessionCmd1\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SessionCmd1.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SessionCmd1 message.\n         * @function verify\n         * @memberof espressif.SessionCmd1\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SessionCmd1.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.clientVerifyData != null && message.hasOwnProperty(\"clientVerifyData\"))\n                if (!(message.clientVerifyData && typeof message.clientVerifyData.length === \"number\" || $util.isString(message.clientVerifyData)))\n                    return \"clientVerifyData: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a SessionCmd1 message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.SessionCmd1\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.SessionCmd1} SessionCmd1\n         */\n        SessionCmd1.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.SessionCmd1)\n                return object;\n            let message = new $root.espressif.SessionCmd1();\n            if (object.clientVerifyData != null)\n                if (typeof object.clientVerifyData === \"string\")\n                    $util.base64.decode(object.clientVerifyData, message.clientVerifyData = $util.newBuffer($util.base64.length(object.clientVerifyData)), 0);\n                else if (object.clientVerifyData.length)\n                    message.clientVerifyData = object.clientVerifyData;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SessionCmd1 message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.SessionCmd1\n         * @static\n         * @param {espressif.SessionCmd1} message SessionCmd1\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SessionCmd1.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                if (options.bytes === String)\n                    object.clientVerifyData = \"\";\n                else {\n                    object.clientVerifyData = [];\n                    if (options.bytes !== Array)\n                        object.clientVerifyData = $util.newBuffer(object.clientVerifyData);\n                }\n            if (message.clientVerifyData != null && message.hasOwnProperty(\"clientVerifyData\"))\n                object.clientVerifyData = options.bytes === String ? $util.base64.encode(message.clientVerifyData, 0, message.clientVerifyData.length) : options.bytes === Array ? Array.prototype.slice.call(message.clientVerifyData) : message.clientVerifyData;\n            return object;\n        };\n\n        /**\n         * Converts this SessionCmd1 to JSON.\n         * @function toJSON\n         * @memberof espressif.SessionCmd1\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SessionCmd1.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return SessionCmd1;\n    })();\n\n    espressif.SessionResp1 = (function() {\n\n        /**\n         * Properties of a SessionResp1.\n         * @memberof espressif\n         * @interface ISessionResp1\n         * @property {espressif.Status|null} [status] SessionResp1 status\n         * @property {Uint8Array|null} [deviceVerifyData] SessionResp1 deviceVerifyData\n         */\n\n        /**\n         * Constructs a new SessionResp1.\n         * @memberof espressif\n         * @classdesc Represents a SessionResp1.\n         * @implements ISessionResp1\n         * @constructor\n         * @param {espressif.ISessionResp1=} [properties] Properties to set\n         */\n        function SessionResp1(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SessionResp1 status.\n         * @member {espressif.Status} status\n         * @memberof espressif.SessionResp1\n         * @instance\n         */\n        SessionResp1.prototype.status = 0;\n\n        /**\n         * SessionResp1 deviceVerifyData.\n         * @member {Uint8Array} deviceVerifyData\n         * @memberof espressif.SessionResp1\n         * @instance\n         */\n        SessionResp1.prototype.deviceVerifyData = $util.newBuffer([]);\n\n        /**\n         * Creates a new SessionResp1 instance using the specified properties.\n         * @function create\n         * @memberof espressif.SessionResp1\n         * @static\n         * @param {espressif.ISessionResp1=} [properties] Properties to set\n         * @returns {espressif.SessionResp1} SessionResp1 instance\n         */\n        SessionResp1.create = function create(properties) {\n            return new SessionResp1(properties);\n        };\n\n        /**\n         * Encodes the specified SessionResp1 message. Does not implicitly {@link espressif.SessionResp1.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.SessionResp1\n         * @static\n         * @param {espressif.SessionResp1} message SessionResp1 message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SessionResp1.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.status != null && Object.hasOwnProperty.call(message, \"status\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.status);\n            if (message.deviceVerifyData != null && Object.hasOwnProperty.call(message, \"deviceVerifyData\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.deviceVerifyData);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SessionResp1 message, length delimited. Does not implicitly {@link espressif.SessionResp1.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.SessionResp1\n         * @static\n         * @param {espressif.SessionResp1} message SessionResp1 message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SessionResp1.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SessionResp1 message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.SessionResp1\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.SessionResp1} SessionResp1\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SessionResp1.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.SessionResp1();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.status = reader.int32();\n                    break;\n                case 3:\n                    message.deviceVerifyData = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SessionResp1 message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.SessionResp1\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.SessionResp1} SessionResp1\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SessionResp1.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SessionResp1 message.\n         * @function verify\n         * @memberof espressif.SessionResp1\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SessionResp1.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.status != null && message.hasOwnProperty(\"status\"))\n                switch (message.status) {\n                default:\n                    return \"status: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                    break;\n                }\n            if (message.deviceVerifyData != null && message.hasOwnProperty(\"deviceVerifyData\"))\n                if (!(message.deviceVerifyData && typeof message.deviceVerifyData.length === \"number\" || $util.isString(message.deviceVerifyData)))\n                    return \"deviceVerifyData: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a SessionResp1 message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.SessionResp1\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.SessionResp1} SessionResp1\n         */\n        SessionResp1.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.SessionResp1)\n                return object;\n            let message = new $root.espressif.SessionResp1();\n            switch (object.status) {\n            case \"Success\":\n            case 0:\n                message.status = 0;\n                break;\n            case \"InvalidSecScheme\":\n            case 1:\n                message.status = 1;\n                break;\n            case \"InvalidProto\":\n            case 2:\n                message.status = 2;\n                break;\n            case \"TooManySessions\":\n            case 3:\n                message.status = 3;\n                break;\n            case \"InvalidArgument\":\n            case 4:\n                message.status = 4;\n                break;\n            case \"InternalError\":\n            case 5:\n                message.status = 5;\n                break;\n            case \"CryptoError\":\n            case 6:\n                message.status = 6;\n                break;\n            case \"InvalidSession\":\n            case 7:\n                message.status = 7;\n                break;\n            }\n            if (object.deviceVerifyData != null)\n                if (typeof object.deviceVerifyData === \"string\")\n                    $util.base64.decode(object.deviceVerifyData, message.deviceVerifyData = $util.newBuffer($util.base64.length(object.deviceVerifyData)), 0);\n                else if (object.deviceVerifyData.length)\n                    message.deviceVerifyData = object.deviceVerifyData;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SessionResp1 message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.SessionResp1\n         * @static\n         * @param {espressif.SessionResp1} message SessionResp1\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SessionResp1.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.status = options.enums === String ? \"Success\" : 0;\n                if (options.bytes === String)\n                    object.deviceVerifyData = \"\";\n                else {\n                    object.deviceVerifyData = [];\n                    if (options.bytes !== Array)\n                        object.deviceVerifyData = $util.newBuffer(object.deviceVerifyData);\n                }\n            }\n            if (message.status != null && message.hasOwnProperty(\"status\"))\n                object.status = options.enums === String ? $root.espressif.Status[message.status] : message.status;\n            if (message.deviceVerifyData != null && message.hasOwnProperty(\"deviceVerifyData\"))\n                object.deviceVerifyData = options.bytes === String ? $util.base64.encode(message.deviceVerifyData, 0, message.deviceVerifyData.length) : options.bytes === Array ? Array.prototype.slice.call(message.deviceVerifyData) : message.deviceVerifyData;\n            return object;\n        };\n\n        /**\n         * Converts this SessionResp1 to JSON.\n         * @function toJSON\n         * @memberof espressif.SessionResp1\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SessionResp1.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return SessionResp1;\n    })();\n\n    espressif.SessionCmd0 = (function() {\n\n        /**\n         * Properties of a SessionCmd0.\n         * @memberof espressif\n         * @interface ISessionCmd0\n         * @property {Uint8Array|null} [clientPubkey] SessionCmd0 clientPubkey\n         */\n\n        /**\n         * Constructs a new SessionCmd0.\n         * @memberof espressif\n         * @classdesc Represents a SessionCmd0.\n         * @implements ISessionCmd0\n         * @constructor\n         * @param {espressif.ISessionCmd0=} [properties] Properties to set\n         */\n        function SessionCmd0(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SessionCmd0 clientPubkey.\n         * @member {Uint8Array} clientPubkey\n         * @memberof espressif.SessionCmd0\n         * @instance\n         */\n        SessionCmd0.prototype.clientPubkey = $util.newBuffer([]);\n\n        /**\n         * Creates a new SessionCmd0 instance using the specified properties.\n         * @function create\n         * @memberof espressif.SessionCmd0\n         * @static\n         * @param {espressif.ISessionCmd0=} [properties] Properties to set\n         * @returns {espressif.SessionCmd0} SessionCmd0 instance\n         */\n        SessionCmd0.create = function create(properties) {\n            return new SessionCmd0(properties);\n        };\n\n        /**\n         * Encodes the specified SessionCmd0 message. Does not implicitly {@link espressif.SessionCmd0.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.SessionCmd0\n         * @static\n         * @param {espressif.SessionCmd0} message SessionCmd0 message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SessionCmd0.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.clientPubkey != null && Object.hasOwnProperty.call(message, \"clientPubkey\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.clientPubkey);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SessionCmd0 message, length delimited. Does not implicitly {@link espressif.SessionCmd0.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.SessionCmd0\n         * @static\n         * @param {espressif.SessionCmd0} message SessionCmd0 message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SessionCmd0.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SessionCmd0 message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.SessionCmd0\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.SessionCmd0} SessionCmd0\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SessionCmd0.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.SessionCmd0();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.clientPubkey = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SessionCmd0 message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.SessionCmd0\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.SessionCmd0} SessionCmd0\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SessionCmd0.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SessionCmd0 message.\n         * @function verify\n         * @memberof espressif.SessionCmd0\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SessionCmd0.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.clientPubkey != null && message.hasOwnProperty(\"clientPubkey\"))\n                if (!(message.clientPubkey && typeof message.clientPubkey.length === \"number\" || $util.isString(message.clientPubkey)))\n                    return \"clientPubkey: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a SessionCmd0 message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.SessionCmd0\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.SessionCmd0} SessionCmd0\n         */\n        SessionCmd0.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.SessionCmd0)\n                return object;\n            let message = new $root.espressif.SessionCmd0();\n            if (object.clientPubkey != null)\n                if (typeof object.clientPubkey === \"string\")\n                    $util.base64.decode(object.clientPubkey, message.clientPubkey = $util.newBuffer($util.base64.length(object.clientPubkey)), 0);\n                else if (object.clientPubkey.length)\n                    message.clientPubkey = object.clientPubkey;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SessionCmd0 message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.SessionCmd0\n         * @static\n         * @param {espressif.SessionCmd0} message SessionCmd0\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SessionCmd0.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                if (options.bytes === String)\n                    object.clientPubkey = \"\";\n                else {\n                    object.clientPubkey = [];\n                    if (options.bytes !== Array)\n                        object.clientPubkey = $util.newBuffer(object.clientPubkey);\n                }\n            if (message.clientPubkey != null && message.hasOwnProperty(\"clientPubkey\"))\n                object.clientPubkey = options.bytes === String ? $util.base64.encode(message.clientPubkey, 0, message.clientPubkey.length) : options.bytes === Array ? Array.prototype.slice.call(message.clientPubkey) : message.clientPubkey;\n            return object;\n        };\n\n        /**\n         * Converts this SessionCmd0 to JSON.\n         * @function toJSON\n         * @memberof espressif.SessionCmd0\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SessionCmd0.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return SessionCmd0;\n    })();\n\n    espressif.SessionResp0 = (function() {\n\n        /**\n         * Properties of a SessionResp0.\n         * @memberof espressif\n         * @interface ISessionResp0\n         * @property {espressif.Status|null} [status] SessionResp0 status\n         * @property {Uint8Array|null} [devicePubkey] SessionResp0 devicePubkey\n         * @property {Uint8Array|null} [deviceRandom] SessionResp0 deviceRandom\n         */\n\n        /**\n         * Constructs a new SessionResp0.\n         * @memberof espressif\n         * @classdesc Represents a SessionResp0.\n         * @implements ISessionResp0\n         * @constructor\n         * @param {espressif.ISessionResp0=} [properties] Properties to set\n         */\n        function SessionResp0(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SessionResp0 status.\n         * @member {espressif.Status} status\n         * @memberof espressif.SessionResp0\n         * @instance\n         */\n        SessionResp0.prototype.status = 0;\n\n        /**\n         * SessionResp0 devicePubkey.\n         * @member {Uint8Array} devicePubkey\n         * @memberof espressif.SessionResp0\n         * @instance\n         */\n        SessionResp0.prototype.devicePubkey = $util.newBuffer([]);\n\n        /**\n         * SessionResp0 deviceRandom.\n         * @member {Uint8Array} deviceRandom\n         * @memberof espressif.SessionResp0\n         * @instance\n         */\n        SessionResp0.prototype.deviceRandom = $util.newBuffer([]);\n\n        /**\n         * Creates a new SessionResp0 instance using the specified properties.\n         * @function create\n         * @memberof espressif.SessionResp0\n         * @static\n         * @param {espressif.ISessionResp0=} [properties] Properties to set\n         * @returns {espressif.SessionResp0} SessionResp0 instance\n         */\n        SessionResp0.create = function create(properties) {\n            return new SessionResp0(properties);\n        };\n\n        /**\n         * Encodes the specified SessionResp0 message. Does not implicitly {@link espressif.SessionResp0.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.SessionResp0\n         * @static\n         * @param {espressif.SessionResp0} message SessionResp0 message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SessionResp0.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.status != null && Object.hasOwnProperty.call(message, \"status\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.status);\n            if (message.devicePubkey != null && Object.hasOwnProperty.call(message, \"devicePubkey\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.devicePubkey);\n            if (message.deviceRandom != null && Object.hasOwnProperty.call(message, \"deviceRandom\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.deviceRandom);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SessionResp0 message, length delimited. Does not implicitly {@link espressif.SessionResp0.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.SessionResp0\n         * @static\n         * @param {espressif.SessionResp0} message SessionResp0 message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SessionResp0.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SessionResp0 message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.SessionResp0\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.SessionResp0} SessionResp0\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SessionResp0.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.SessionResp0();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.status = reader.int32();\n                    break;\n                case 2:\n                    message.devicePubkey = reader.bytes();\n                    break;\n                case 3:\n                    message.deviceRandom = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SessionResp0 message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.SessionResp0\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.SessionResp0} SessionResp0\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SessionResp0.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SessionResp0 message.\n         * @function verify\n         * @memberof espressif.SessionResp0\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SessionResp0.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.status != null && message.hasOwnProperty(\"status\"))\n                switch (message.status) {\n                default:\n                    return \"status: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                    break;\n                }\n            if (message.devicePubkey != null && message.hasOwnProperty(\"devicePubkey\"))\n                if (!(message.devicePubkey && typeof message.devicePubkey.length === \"number\" || $util.isString(message.devicePubkey)))\n                    return \"devicePubkey: buffer expected\";\n            if (message.deviceRandom != null && message.hasOwnProperty(\"deviceRandom\"))\n                if (!(message.deviceRandom && typeof message.deviceRandom.length === \"number\" || $util.isString(message.deviceRandom)))\n                    return \"deviceRandom: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a SessionResp0 message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.SessionResp0\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.SessionResp0} SessionResp0\n         */\n        SessionResp0.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.SessionResp0)\n                return object;\n            let message = new $root.espressif.SessionResp0();\n            switch (object.status) {\n            case \"Success\":\n            case 0:\n                message.status = 0;\n                break;\n            case \"InvalidSecScheme\":\n            case 1:\n                message.status = 1;\n                break;\n            case \"InvalidProto\":\n            case 2:\n                message.status = 2;\n                break;\n            case \"TooManySessions\":\n            case 3:\n                message.status = 3;\n                break;\n            case \"InvalidArgument\":\n            case 4:\n                message.status = 4;\n                break;\n            case \"InternalError\":\n            case 5:\n                message.status = 5;\n                break;\n            case \"CryptoError\":\n            case 6:\n                message.status = 6;\n                break;\n            case \"InvalidSession\":\n            case 7:\n                message.status = 7;\n                break;\n            }\n            if (object.devicePubkey != null)\n                if (typeof object.devicePubkey === \"string\")\n                    $util.base64.decode(object.devicePubkey, message.devicePubkey = $util.newBuffer($util.base64.length(object.devicePubkey)), 0);\n                else if (object.devicePubkey.length)\n                    message.devicePubkey = object.devicePubkey;\n            if (object.deviceRandom != null)\n                if (typeof object.deviceRandom === \"string\")\n                    $util.base64.decode(object.deviceRandom, message.deviceRandom = $util.newBuffer($util.base64.length(object.deviceRandom)), 0);\n                else if (object.deviceRandom.length)\n                    message.deviceRandom = object.deviceRandom;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SessionResp0 message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.SessionResp0\n         * @static\n         * @param {espressif.SessionResp0} message SessionResp0\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SessionResp0.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.status = options.enums === String ? \"Success\" : 0;\n                if (options.bytes === String)\n                    object.devicePubkey = \"\";\n                else {\n                    object.devicePubkey = [];\n                    if (options.bytes !== Array)\n                        object.devicePubkey = $util.newBuffer(object.devicePubkey);\n                }\n                if (options.bytes === String)\n                    object.deviceRandom = \"\";\n                else {\n                    object.deviceRandom = [];\n                    if (options.bytes !== Array)\n                        object.deviceRandom = $util.newBuffer(object.deviceRandom);\n                }\n            }\n            if (message.status != null && message.hasOwnProperty(\"status\"))\n                object.status = options.enums === String ? $root.espressif.Status[message.status] : message.status;\n            if (message.devicePubkey != null && message.hasOwnProperty(\"devicePubkey\"))\n                object.devicePubkey = options.bytes === String ? $util.base64.encode(message.devicePubkey, 0, message.devicePubkey.length) : options.bytes === Array ? Array.prototype.slice.call(message.devicePubkey) : message.devicePubkey;\n            if (message.deviceRandom != null && message.hasOwnProperty(\"deviceRandom\"))\n                object.deviceRandom = options.bytes === String ? $util.base64.encode(message.deviceRandom, 0, message.deviceRandom.length) : options.bytes === Array ? Array.prototype.slice.call(message.deviceRandom) : message.deviceRandom;\n            return object;\n        };\n\n        /**\n         * Converts this SessionResp0 to JSON.\n         * @function toJSON\n         * @memberof espressif.SessionResp0\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SessionResp0.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return SessionResp0;\n    })();\n\n    /**\n     * Sec1MsgType enum.\n     * @name espressif.Sec1MsgType\n     * @enum {number}\n     * @property {number} Session_Command0=0 Session_Command0 value\n     * @property {number} Session_Response0=1 Session_Response0 value\n     * @property {number} Session_Command1=2 Session_Command1 value\n     * @property {number} Session_Response1=3 Session_Response1 value\n     */\n    espressif.Sec1MsgType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Session_Command0\"] = 0;\n        values[valuesById[1] = \"Session_Response0\"] = 1;\n        values[valuesById[2] = \"Session_Command1\"] = 2;\n        values[valuesById[3] = \"Session_Response1\"] = 3;\n        return values;\n    })();\n\n    espressif.Sec1Payload = (function() {\n\n        /**\n         * Properties of a Sec1Payload.\n         * @memberof espressif\n         * @interface ISec1Payload\n         * @property {espressif.Sec1MsgType|null} [msg] Sec1Payload msg\n         * @property {espressif.SessionCmd0|null} [sc0] Sec1Payload sc0\n         * @property {espressif.SessionResp0|null} [sr0] Sec1Payload sr0\n         * @property {espressif.SessionCmd1|null} [sc1] Sec1Payload sc1\n         * @property {espressif.SessionResp1|null} [sr1] Sec1Payload sr1\n         */\n\n        /**\n         * Constructs a new Sec1Payload.\n         * @memberof espressif\n         * @classdesc Represents a Sec1Payload.\n         * @implements ISec1Payload\n         * @constructor\n         * @param {espressif.ISec1Payload=} [properties] Properties to set\n         */\n        function Sec1Payload(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Sec1Payload msg.\n         * @member {espressif.Sec1MsgType} msg\n         * @memberof espressif.Sec1Payload\n         * @instance\n         */\n        Sec1Payload.prototype.msg = 0;\n\n        /**\n         * Sec1Payload sc0.\n         * @member {espressif.SessionCmd0|null|undefined} sc0\n         * @memberof espressif.Sec1Payload\n         * @instance\n         */\n        Sec1Payload.prototype.sc0 = null;\n\n        /**\n         * Sec1Payload sr0.\n         * @member {espressif.SessionResp0|null|undefined} sr0\n         * @memberof espressif.Sec1Payload\n         * @instance\n         */\n        Sec1Payload.prototype.sr0 = null;\n\n        /**\n         * Sec1Payload sc1.\n         * @member {espressif.SessionCmd1|null|undefined} sc1\n         * @memberof espressif.Sec1Payload\n         * @instance\n         */\n        Sec1Payload.prototype.sc1 = null;\n\n        /**\n         * Sec1Payload sr1.\n         * @member {espressif.SessionResp1|null|undefined} sr1\n         * @memberof espressif.Sec1Payload\n         * @instance\n         */\n        Sec1Payload.prototype.sr1 = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Sec1Payload payload.\n         * @member {\"sc0\"|\"sr0\"|\"sc1\"|\"sr1\"|undefined} payload\n         * @memberof espressif.Sec1Payload\n         * @instance\n         */\n        Object.defineProperty(Sec1Payload.prototype, \"payload\", {\n            get: $util.oneOfGetter($oneOfFields = [\"sc0\", \"sr0\", \"sc1\", \"sr1\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Sec1Payload instance using the specified properties.\n         * @function create\n         * @memberof espressif.Sec1Payload\n         * @static\n         * @param {espressif.ISec1Payload=} [properties] Properties to set\n         * @returns {espressif.Sec1Payload} Sec1Payload instance\n         */\n        Sec1Payload.create = function create(properties) {\n            return new Sec1Payload(properties);\n        };\n\n        /**\n         * Encodes the specified Sec1Payload message. Does not implicitly {@link espressif.Sec1Payload.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.Sec1Payload\n         * @static\n         * @param {espressif.Sec1Payload} message Sec1Payload message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Sec1Payload.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.msg != null && Object.hasOwnProperty.call(message, \"msg\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.msg);\n            if (message.sc0 != null && Object.hasOwnProperty.call(message, \"sc0\"))\n                $root.espressif.SessionCmd0.encode(message.sc0, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n            if (message.sr0 != null && Object.hasOwnProperty.call(message, \"sr0\"))\n                $root.espressif.SessionResp0.encode(message.sr0, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();\n            if (message.sc1 != null && Object.hasOwnProperty.call(message, \"sc1\"))\n                $root.espressif.SessionCmd1.encode(message.sc1, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\n            if (message.sr1 != null && Object.hasOwnProperty.call(message, \"sr1\"))\n                $root.espressif.SessionResp1.encode(message.sr1, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Sec1Payload message, length delimited. Does not implicitly {@link espressif.Sec1Payload.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.Sec1Payload\n         * @static\n         * @param {espressif.Sec1Payload} message Sec1Payload message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Sec1Payload.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Sec1Payload message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.Sec1Payload\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.Sec1Payload} Sec1Payload\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Sec1Payload.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.Sec1Payload();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.msg = reader.int32();\n                    break;\n                case 20:\n                    message.sc0 = $root.espressif.SessionCmd0.decode(reader, reader.uint32());\n                    break;\n                case 21:\n                    message.sr0 = $root.espressif.SessionResp0.decode(reader, reader.uint32());\n                    break;\n                case 22:\n                    message.sc1 = $root.espressif.SessionCmd1.decode(reader, reader.uint32());\n                    break;\n                case 23:\n                    message.sr1 = $root.espressif.SessionResp1.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Sec1Payload message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.Sec1Payload\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.Sec1Payload} Sec1Payload\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Sec1Payload.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Sec1Payload message.\n         * @function verify\n         * @memberof espressif.Sec1Payload\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Sec1Payload.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.msg != null && message.hasOwnProperty(\"msg\"))\n                switch (message.msg) {\n                default:\n                    return \"msg: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                    break;\n                }\n            if (message.sc0 != null && message.hasOwnProperty(\"sc0\")) {\n                properties.payload = 1;\n                {\n                    let error = $root.espressif.SessionCmd0.verify(message.sc0);\n                    if (error)\n                        return \"sc0.\" + error;\n                }\n            }\n            if (message.sr0 != null && message.hasOwnProperty(\"sr0\")) {\n                if (properties.payload === 1)\n                    return \"payload: multiple values\";\n                properties.payload = 1;\n                {\n                    let error = $root.espressif.SessionResp0.verify(message.sr0);\n                    if (error)\n                        return \"sr0.\" + error;\n                }\n            }\n            if (message.sc1 != null && message.hasOwnProperty(\"sc1\")) {\n                if (properties.payload === 1)\n                    return \"payload: multiple values\";\n                properties.payload = 1;\n                {\n                    let error = $root.espressif.SessionCmd1.verify(message.sc1);\n                    if (error)\n                        return \"sc1.\" + error;\n                }\n            }\n            if (message.sr1 != null && message.hasOwnProperty(\"sr1\")) {\n                if (properties.payload === 1)\n                    return \"payload: multiple values\";\n                properties.payload = 1;\n                {\n                    let error = $root.espressif.SessionResp1.verify(message.sr1);\n                    if (error)\n                        return \"sr1.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Sec1Payload message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.Sec1Payload\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.Sec1Payload} Sec1Payload\n         */\n        Sec1Payload.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.Sec1Payload)\n                return object;\n            let message = new $root.espressif.Sec1Payload();\n            switch (object.msg) {\n            case \"Session_Command0\":\n            case 0:\n                message.msg = 0;\n                break;\n            case \"Session_Response0\":\n            case 1:\n                message.msg = 1;\n                break;\n            case \"Session_Command1\":\n            case 2:\n                message.msg = 2;\n                break;\n            case \"Session_Response1\":\n            case 3:\n                message.msg = 3;\n                break;\n            }\n            if (object.sc0 != null) {\n                if (typeof object.sc0 !== \"object\")\n                    throw TypeError(\".espressif.Sec1Payload.sc0: object expected\");\n                message.sc0 = $root.espressif.SessionCmd0.fromObject(object.sc0);\n            }\n            if (object.sr0 != null) {\n                if (typeof object.sr0 !== \"object\")\n                    throw TypeError(\".espressif.Sec1Payload.sr0: object expected\");\n                message.sr0 = $root.espressif.SessionResp0.fromObject(object.sr0);\n            }\n            if (object.sc1 != null) {\n                if (typeof object.sc1 !== \"object\")\n                    throw TypeError(\".espressif.Sec1Payload.sc1: object expected\");\n                message.sc1 = $root.espressif.SessionCmd1.fromObject(object.sc1);\n            }\n            if (object.sr1 != null) {\n                if (typeof object.sr1 !== \"object\")\n                    throw TypeError(\".espressif.Sec1Payload.sr1: object expected\");\n                message.sr1 = $root.espressif.SessionResp1.fromObject(object.sr1);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Sec1Payload message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.Sec1Payload\n         * @static\n         * @param {espressif.Sec1Payload} message Sec1Payload\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Sec1Payload.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.msg = options.enums === String ? \"Session_Command0\" : 0;\n            if (message.msg != null && message.hasOwnProperty(\"msg\"))\n                object.msg = options.enums === String ? $root.espressif.Sec1MsgType[message.msg] : message.msg;\n            if (message.sc0 != null && message.hasOwnProperty(\"sc0\")) {\n                object.sc0 = $root.espressif.SessionCmd0.toObject(message.sc0, options);\n                if (options.oneofs)\n                    object.payload = \"sc0\";\n            }\n            if (message.sr0 != null && message.hasOwnProperty(\"sr0\")) {\n                object.sr0 = $root.espressif.SessionResp0.toObject(message.sr0, options);\n                if (options.oneofs)\n                    object.payload = \"sr0\";\n            }\n            if (message.sc1 != null && message.hasOwnProperty(\"sc1\")) {\n                object.sc1 = $root.espressif.SessionCmd1.toObject(message.sc1, options);\n                if (options.oneofs)\n                    object.payload = \"sc1\";\n            }\n            if (message.sr1 != null && message.hasOwnProperty(\"sr1\")) {\n                object.sr1 = $root.espressif.SessionResp1.toObject(message.sr1, options);\n                if (options.oneofs)\n                    object.payload = \"sr1\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Sec1Payload to JSON.\n         * @function toJSON\n         * @memberof espressif.Sec1Payload\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Sec1Payload.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return Sec1Payload;\n    })();\n\n    /**\n     * SecSchemeVersion enum.\n     * @name espressif.SecSchemeVersion\n     * @enum {number}\n     * @property {number} SecScheme0=0 SecScheme0 value\n     * @property {number} SecScheme1=1 SecScheme1 value\n     */\n    espressif.SecSchemeVersion = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"SecScheme0\"] = 0;\n        values[valuesById[1] = \"SecScheme1\"] = 1;\n        return values;\n    })();\n\n    espressif.SessionData = (function() {\n\n        /**\n         * Properties of a SessionData.\n         * @memberof espressif\n         * @interface ISessionData\n         * @property {espressif.SecSchemeVersion|null} [secVer] SessionData secVer\n         * @property {espressif.Sec0Payload|null} [sec0] SessionData sec0\n         * @property {espressif.Sec1Payload|null} [sec1] SessionData sec1\n         */\n\n        /**\n         * Constructs a new SessionData.\n         * @memberof espressif\n         * @classdesc Represents a SessionData.\n         * @implements ISessionData\n         * @constructor\n         * @param {espressif.ISessionData=} [properties] Properties to set\n         */\n        function SessionData(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SessionData secVer.\n         * @member {espressif.SecSchemeVersion} secVer\n         * @memberof espressif.SessionData\n         * @instance\n         */\n        SessionData.prototype.secVer = 0;\n\n        /**\n         * SessionData sec0.\n         * @member {espressif.Sec0Payload|null|undefined} sec0\n         * @memberof espressif.SessionData\n         * @instance\n         */\n        SessionData.prototype.sec0 = null;\n\n        /**\n         * SessionData sec1.\n         * @member {espressif.Sec1Payload|null|undefined} sec1\n         * @memberof espressif.SessionData\n         * @instance\n         */\n        SessionData.prototype.sec1 = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * SessionData proto.\n         * @member {\"sec0\"|\"sec1\"|undefined} proto\n         * @memberof espressif.SessionData\n         * @instance\n         */\n        Object.defineProperty(SessionData.prototype, \"proto\", {\n            get: $util.oneOfGetter($oneOfFields = [\"sec0\", \"sec1\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new SessionData instance using the specified properties.\n         * @function create\n         * @memberof espressif.SessionData\n         * @static\n         * @param {espressif.ISessionData=} [properties] Properties to set\n         * @returns {espressif.SessionData} SessionData instance\n         */\n        SessionData.create = function create(properties) {\n            return new SessionData(properties);\n        };\n\n        /**\n         * Encodes the specified SessionData message. Does not implicitly {@link espressif.SessionData.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.SessionData\n         * @static\n         * @param {espressif.SessionData} message SessionData message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SessionData.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.secVer != null && Object.hasOwnProperty.call(message, \"secVer\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.secVer);\n            if (message.sec0 != null && Object.hasOwnProperty.call(message, \"sec0\"))\n                $root.espressif.Sec0Payload.encode(message.sec0, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.sec1 != null && Object.hasOwnProperty.call(message, \"sec1\"))\n                $root.espressif.Sec1Payload.encode(message.sec1, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SessionData message, length delimited. Does not implicitly {@link espressif.SessionData.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.SessionData\n         * @static\n         * @param {espressif.SessionData} message SessionData message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SessionData.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SessionData message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.SessionData\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.SessionData} SessionData\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SessionData.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.SessionData();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 2:\n                    message.secVer = reader.int32();\n                    break;\n                case 10:\n                    message.sec0 = $root.espressif.Sec0Payload.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.sec1 = $root.espressif.Sec1Payload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SessionData message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.SessionData\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.SessionData} SessionData\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SessionData.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SessionData message.\n         * @function verify\n         * @memberof espressif.SessionData\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SessionData.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.secVer != null && message.hasOwnProperty(\"secVer\"))\n                switch (message.secVer) {\n                default:\n                    return \"secVer: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.sec0 != null && message.hasOwnProperty(\"sec0\")) {\n                properties.proto = 1;\n                {\n                    let error = $root.espressif.Sec0Payload.verify(message.sec0);\n                    if (error)\n                        return \"sec0.\" + error;\n                }\n            }\n            if (message.sec1 != null && message.hasOwnProperty(\"sec1\")) {\n                if (properties.proto === 1)\n                    return \"proto: multiple values\";\n                properties.proto = 1;\n                {\n                    let error = $root.espressif.Sec1Payload.verify(message.sec1);\n                    if (error)\n                        return \"sec1.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a SessionData message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.SessionData\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.SessionData} SessionData\n         */\n        SessionData.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.SessionData)\n                return object;\n            let message = new $root.espressif.SessionData();\n            switch (object.secVer) {\n            case \"SecScheme0\":\n            case 0:\n                message.secVer = 0;\n                break;\n            case \"SecScheme1\":\n            case 1:\n                message.secVer = 1;\n                break;\n            }\n            if (object.sec0 != null) {\n                if (typeof object.sec0 !== \"object\")\n                    throw TypeError(\".espressif.SessionData.sec0: object expected\");\n                message.sec0 = $root.espressif.Sec0Payload.fromObject(object.sec0);\n            }\n            if (object.sec1 != null) {\n                if (typeof object.sec1 !== \"object\")\n                    throw TypeError(\".espressif.SessionData.sec1: object expected\");\n                message.sec1 = $root.espressif.Sec1Payload.fromObject(object.sec1);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SessionData message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.SessionData\n         * @static\n         * @param {espressif.SessionData} message SessionData\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SessionData.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.secVer = options.enums === String ? \"SecScheme0\" : 0;\n            if (message.secVer != null && message.hasOwnProperty(\"secVer\"))\n                object.secVer = options.enums === String ? $root.espressif.SecSchemeVersion[message.secVer] : message.secVer;\n            if (message.sec0 != null && message.hasOwnProperty(\"sec0\")) {\n                object.sec0 = $root.espressif.Sec0Payload.toObject(message.sec0, options);\n                if (options.oneofs)\n                    object.proto = \"sec0\";\n            }\n            if (message.sec1 != null && message.hasOwnProperty(\"sec1\")) {\n                object.sec1 = $root.espressif.Sec1Payload.toObject(message.sec1, options);\n                if (options.oneofs)\n                    object.proto = \"sec1\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this SessionData to JSON.\n         * @function toJSON\n         * @memberof espressif.SessionData\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SessionData.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return SessionData;\n    })();\n\n    espressif.CmdGetStatus = (function() {\n\n        /**\n         * Properties of a CmdGetStatus.\n         * @memberof espressif\n         * @interface ICmdGetStatus\n         */\n\n        /**\n         * Constructs a new CmdGetStatus.\n         * @memberof espressif\n         * @classdesc Represents a CmdGetStatus.\n         * @implements ICmdGetStatus\n         * @constructor\n         * @param {espressif.ICmdGetStatus=} [properties] Properties to set\n         */\n        function CmdGetStatus(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new CmdGetStatus instance using the specified properties.\n         * @function create\n         * @memberof espressif.CmdGetStatus\n         * @static\n         * @param {espressif.ICmdGetStatus=} [properties] Properties to set\n         * @returns {espressif.CmdGetStatus} CmdGetStatus instance\n         */\n        CmdGetStatus.create = function create(properties) {\n            return new CmdGetStatus(properties);\n        };\n\n        /**\n         * Encodes the specified CmdGetStatus message. Does not implicitly {@link espressif.CmdGetStatus.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.CmdGetStatus\n         * @static\n         * @param {espressif.CmdGetStatus} message CmdGetStatus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CmdGetStatus.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CmdGetStatus message, length delimited. Does not implicitly {@link espressif.CmdGetStatus.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.CmdGetStatus\n         * @static\n         * @param {espressif.CmdGetStatus} message CmdGetStatus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CmdGetStatus.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CmdGetStatus message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.CmdGetStatus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.CmdGetStatus} CmdGetStatus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CmdGetStatus.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.CmdGetStatus();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CmdGetStatus message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.CmdGetStatus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.CmdGetStatus} CmdGetStatus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CmdGetStatus.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CmdGetStatus message.\n         * @function verify\n         * @memberof espressif.CmdGetStatus\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CmdGetStatus.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a CmdGetStatus message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.CmdGetStatus\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.CmdGetStatus} CmdGetStatus\n         */\n        CmdGetStatus.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.CmdGetStatus)\n                return object;\n            return new $root.espressif.CmdGetStatus();\n        };\n\n        /**\n         * Creates a plain object from a CmdGetStatus message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.CmdGetStatus\n         * @static\n         * @param {espressif.CmdGetStatus} message CmdGetStatus\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CmdGetStatus.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this CmdGetStatus to JSON.\n         * @function toJSON\n         * @memberof espressif.CmdGetStatus\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CmdGetStatus.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return CmdGetStatus;\n    })();\n\n    espressif.RespGetStatus = (function() {\n\n        /**\n         * Properties of a RespGetStatus.\n         * @memberof espressif\n         * @interface IRespGetStatus\n         * @property {espressif.Status|null} [status] RespGetStatus status\n         * @property {espressif.WifiStationState|null} [staState] RespGetStatus staState\n         * @property {espressif.WifiConnectFailedReason|null} [failReason] RespGetStatus failReason\n         * @property {espressif.WifiConnectedState|null} [connected] RespGetStatus connected\n         */\n\n        /**\n         * Constructs a new RespGetStatus.\n         * @memberof espressif\n         * @classdesc Represents a RespGetStatus.\n         * @implements IRespGetStatus\n         * @constructor\n         * @param {espressif.IRespGetStatus=} [properties] Properties to set\n         */\n        function RespGetStatus(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RespGetStatus status.\n         * @member {espressif.Status} status\n         * @memberof espressif.RespGetStatus\n         * @instance\n         */\n        RespGetStatus.prototype.status = 0;\n\n        /**\n         * RespGetStatus staState.\n         * @member {espressif.WifiStationState} staState\n         * @memberof espressif.RespGetStatus\n         * @instance\n         */\n        RespGetStatus.prototype.staState = 0;\n\n        /**\n         * RespGetStatus failReason.\n         * @member {espressif.WifiConnectFailedReason|null|undefined} failReason\n         * @memberof espressif.RespGetStatus\n         * @instance\n         */\n        RespGetStatus.prototype.failReason = null;\n\n        /**\n         * RespGetStatus connected.\n         * @member {espressif.WifiConnectedState|null|undefined} connected\n         * @memberof espressif.RespGetStatus\n         * @instance\n         */\n        RespGetStatus.prototype.connected = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * RespGetStatus state.\n         * @member {\"failReason\"|\"connected\"|undefined} state\n         * @memberof espressif.RespGetStatus\n         * @instance\n         */\n        Object.defineProperty(RespGetStatus.prototype, \"state\", {\n            get: $util.oneOfGetter($oneOfFields = [\"failReason\", \"connected\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new RespGetStatus instance using the specified properties.\n         * @function create\n         * @memberof espressif.RespGetStatus\n         * @static\n         * @param {espressif.IRespGetStatus=} [properties] Properties to set\n         * @returns {espressif.RespGetStatus} RespGetStatus instance\n         */\n        RespGetStatus.create = function create(properties) {\n            return new RespGetStatus(properties);\n        };\n\n        /**\n         * Encodes the specified RespGetStatus message. Does not implicitly {@link espressif.RespGetStatus.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.RespGetStatus\n         * @static\n         * @param {espressif.RespGetStatus} message RespGetStatus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RespGetStatus.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.status != null && Object.hasOwnProperty.call(message, \"status\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.status);\n            if (message.staState != null && Object.hasOwnProperty.call(message, \"staState\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.staState);\n            if (message.failReason != null && Object.hasOwnProperty.call(message, \"failReason\"))\n                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.failReason);\n            if (message.connected != null && Object.hasOwnProperty.call(message, \"connected\"))\n                $root.espressif.WifiConnectedState.encode(message.connected, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RespGetStatus message, length delimited. Does not implicitly {@link espressif.RespGetStatus.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.RespGetStatus\n         * @static\n         * @param {espressif.RespGetStatus} message RespGetStatus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RespGetStatus.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RespGetStatus message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.RespGetStatus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.RespGetStatus} RespGetStatus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RespGetStatus.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.RespGetStatus();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.status = reader.int32();\n                    break;\n                case 2:\n                    message.staState = reader.int32();\n                    break;\n                case 10:\n                    message.failReason = reader.int32();\n                    break;\n                case 11:\n                    message.connected = $root.espressif.WifiConnectedState.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RespGetStatus message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.RespGetStatus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.RespGetStatus} RespGetStatus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RespGetStatus.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RespGetStatus message.\n         * @function verify\n         * @memberof espressif.RespGetStatus\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RespGetStatus.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.status != null && message.hasOwnProperty(\"status\"))\n                switch (message.status) {\n                default:\n                    return \"status: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                    break;\n                }\n            if (message.staState != null && message.hasOwnProperty(\"staState\"))\n                switch (message.staState) {\n                default:\n                    return \"staState: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                    break;\n                }\n            if (message.failReason != null && message.hasOwnProperty(\"failReason\")) {\n                properties.state = 1;\n                switch (message.failReason) {\n                default:\n                    return \"failReason: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            }\n            if (message.connected != null && message.hasOwnProperty(\"connected\")) {\n                if (properties.state === 1)\n                    return \"state: multiple values\";\n                properties.state = 1;\n                {\n                    let error = $root.espressif.WifiConnectedState.verify(message.connected);\n                    if (error)\n                        return \"connected.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a RespGetStatus message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.RespGetStatus\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.RespGetStatus} RespGetStatus\n         */\n        RespGetStatus.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.RespGetStatus)\n                return object;\n            let message = new $root.espressif.RespGetStatus();\n            switch (object.status) {\n            case \"Success\":\n            case 0:\n                message.status = 0;\n                break;\n            case \"InvalidSecScheme\":\n            case 1:\n                message.status = 1;\n                break;\n            case \"InvalidProto\":\n            case 2:\n                message.status = 2;\n                break;\n            case \"TooManySessions\":\n            case 3:\n                message.status = 3;\n                break;\n            case \"InvalidArgument\":\n            case 4:\n                message.status = 4;\n                break;\n            case \"InternalError\":\n            case 5:\n                message.status = 5;\n                break;\n            case \"CryptoError\":\n            case 6:\n                message.status = 6;\n                break;\n            case \"InvalidSession\":\n            case 7:\n                message.status = 7;\n                break;\n            }\n            switch (object.staState) {\n            case \"Connected\":\n            case 0:\n                message.staState = 0;\n                break;\n            case \"Connecting\":\n            case 1:\n                message.staState = 1;\n                break;\n            case \"Disconnected\":\n            case 2:\n                message.staState = 2;\n                break;\n            case \"ConnectionFailed\":\n            case 3:\n                message.staState = 3;\n                break;\n            }\n            switch (object.failReason) {\n            case \"AuthError\":\n            case 0:\n                message.failReason = 0;\n                break;\n            case \"NetworkNotFound\":\n            case 1:\n                message.failReason = 1;\n                break;\n            }\n            if (object.connected != null) {\n                if (typeof object.connected !== \"object\")\n                    throw TypeError(\".espressif.RespGetStatus.connected: object expected\");\n                message.connected = $root.espressif.WifiConnectedState.fromObject(object.connected);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RespGetStatus message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.RespGetStatus\n         * @static\n         * @param {espressif.RespGetStatus} message RespGetStatus\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RespGetStatus.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.status = options.enums === String ? \"Success\" : 0;\n                object.staState = options.enums === String ? \"Connected\" : 0;\n            }\n            if (message.status != null && message.hasOwnProperty(\"status\"))\n                object.status = options.enums === String ? $root.espressif.Status[message.status] : message.status;\n            if (message.staState != null && message.hasOwnProperty(\"staState\"))\n                object.staState = options.enums === String ? $root.espressif.WifiStationState[message.staState] : message.staState;\n            if (message.failReason != null && message.hasOwnProperty(\"failReason\")) {\n                object.failReason = options.enums === String ? $root.espressif.WifiConnectFailedReason[message.failReason] : message.failReason;\n                if (options.oneofs)\n                    object.state = \"failReason\";\n            }\n            if (message.connected != null && message.hasOwnProperty(\"connected\")) {\n                object.connected = $root.espressif.WifiConnectedState.toObject(message.connected, options);\n                if (options.oneofs)\n                    object.state = \"connected\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this RespGetStatus to JSON.\n         * @function toJSON\n         * @memberof espressif.RespGetStatus\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RespGetStatus.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RespGetStatus;\n    })();\n\n    espressif.CmdSetConfig = (function() {\n\n        /**\n         * Properties of a CmdSetConfig.\n         * @memberof espressif\n         * @interface ICmdSetConfig\n         * @property {Uint8Array|null} [ssid] CmdSetConfig ssid\n         * @property {Uint8Array|null} [passphrase] CmdSetConfig passphrase\n         * @property {Uint8Array|null} [bssid] CmdSetConfig bssid\n         * @property {number|null} [channel] CmdSetConfig channel\n         */\n\n        /**\n         * Constructs a new CmdSetConfig.\n         * @memberof espressif\n         * @classdesc Represents a CmdSetConfig.\n         * @implements ICmdSetConfig\n         * @constructor\n         * @param {espressif.ICmdSetConfig=} [properties] Properties to set\n         */\n        function CmdSetConfig(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CmdSetConfig ssid.\n         * @member {Uint8Array} ssid\n         * @memberof espressif.CmdSetConfig\n         * @instance\n         */\n        CmdSetConfig.prototype.ssid = $util.newBuffer([]);\n\n        /**\n         * CmdSetConfig passphrase.\n         * @member {Uint8Array} passphrase\n         * @memberof espressif.CmdSetConfig\n         * @instance\n         */\n        CmdSetConfig.prototype.passphrase = $util.newBuffer([]);\n\n        /**\n         * CmdSetConfig bssid.\n         * @member {Uint8Array} bssid\n         * @memberof espressif.CmdSetConfig\n         * @instance\n         */\n        CmdSetConfig.prototype.bssid = $util.newBuffer([]);\n\n        /**\n         * CmdSetConfig channel.\n         * @member {number} channel\n         * @memberof espressif.CmdSetConfig\n         * @instance\n         */\n        CmdSetConfig.prototype.channel = 0;\n\n        /**\n         * Creates a new CmdSetConfig instance using the specified properties.\n         * @function create\n         * @memberof espressif.CmdSetConfig\n         * @static\n         * @param {espressif.ICmdSetConfig=} [properties] Properties to set\n         * @returns {espressif.CmdSetConfig} CmdSetConfig instance\n         */\n        CmdSetConfig.create = function create(properties) {\n            return new CmdSetConfig(properties);\n        };\n\n        /**\n         * Encodes the specified CmdSetConfig message. Does not implicitly {@link espressif.CmdSetConfig.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.CmdSetConfig\n         * @static\n         * @param {espressif.CmdSetConfig} message CmdSetConfig message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CmdSetConfig.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.ssid != null && Object.hasOwnProperty.call(message, \"ssid\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.ssid);\n            if (message.passphrase != null && Object.hasOwnProperty.call(message, \"passphrase\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.passphrase);\n            if (message.bssid != null && Object.hasOwnProperty.call(message, \"bssid\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.bssid);\n            if (message.channel != null && Object.hasOwnProperty.call(message, \"channel\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.channel);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CmdSetConfig message, length delimited. Does not implicitly {@link espressif.CmdSetConfig.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.CmdSetConfig\n         * @static\n         * @param {espressif.CmdSetConfig} message CmdSetConfig message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CmdSetConfig.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CmdSetConfig message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.CmdSetConfig\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.CmdSetConfig} CmdSetConfig\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CmdSetConfig.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.CmdSetConfig();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.ssid = reader.bytes();\n                    break;\n                case 2:\n                    message.passphrase = reader.bytes();\n                    break;\n                case 3:\n                    message.bssid = reader.bytes();\n                    break;\n                case 4:\n                    message.channel = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CmdSetConfig message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.CmdSetConfig\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.CmdSetConfig} CmdSetConfig\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CmdSetConfig.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CmdSetConfig message.\n         * @function verify\n         * @memberof espressif.CmdSetConfig\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CmdSetConfig.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.ssid != null && message.hasOwnProperty(\"ssid\"))\n                if (!(message.ssid && typeof message.ssid.length === \"number\" || $util.isString(message.ssid)))\n                    return \"ssid: buffer expected\";\n            if (message.passphrase != null && message.hasOwnProperty(\"passphrase\"))\n                if (!(message.passphrase && typeof message.passphrase.length === \"number\" || $util.isString(message.passphrase)))\n                    return \"passphrase: buffer expected\";\n            if (message.bssid != null && message.hasOwnProperty(\"bssid\"))\n                if (!(message.bssid && typeof message.bssid.length === \"number\" || $util.isString(message.bssid)))\n                    return \"bssid: buffer expected\";\n            if (message.channel != null && message.hasOwnProperty(\"channel\"))\n                if (!$util.isInteger(message.channel))\n                    return \"channel: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a CmdSetConfig message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.CmdSetConfig\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.CmdSetConfig} CmdSetConfig\n         */\n        CmdSetConfig.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.CmdSetConfig)\n                return object;\n            let message = new $root.espressif.CmdSetConfig();\n            if (object.ssid != null)\n                if (typeof object.ssid === \"string\")\n                    $util.base64.decode(object.ssid, message.ssid = $util.newBuffer($util.base64.length(object.ssid)), 0);\n                else if (object.ssid.length)\n                    message.ssid = object.ssid;\n            if (object.passphrase != null)\n                if (typeof object.passphrase === \"string\")\n                    $util.base64.decode(object.passphrase, message.passphrase = $util.newBuffer($util.base64.length(object.passphrase)), 0);\n                else if (object.passphrase.length)\n                    message.passphrase = object.passphrase;\n            if (object.bssid != null)\n                if (typeof object.bssid === \"string\")\n                    $util.base64.decode(object.bssid, message.bssid = $util.newBuffer($util.base64.length(object.bssid)), 0);\n                else if (object.bssid.length)\n                    message.bssid = object.bssid;\n            if (object.channel != null)\n                message.channel = object.channel | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CmdSetConfig message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.CmdSetConfig\n         * @static\n         * @param {espressif.CmdSetConfig} message CmdSetConfig\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CmdSetConfig.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.ssid = \"\";\n                else {\n                    object.ssid = [];\n                    if (options.bytes !== Array)\n                        object.ssid = $util.newBuffer(object.ssid);\n                }\n                if (options.bytes === String)\n                    object.passphrase = \"\";\n                else {\n                    object.passphrase = [];\n                    if (options.bytes !== Array)\n                        object.passphrase = $util.newBuffer(object.passphrase);\n                }\n                if (options.bytes === String)\n                    object.bssid = \"\";\n                else {\n                    object.bssid = [];\n                    if (options.bytes !== Array)\n                        object.bssid = $util.newBuffer(object.bssid);\n                }\n                object.channel = 0;\n            }\n            if (message.ssid != null && message.hasOwnProperty(\"ssid\"))\n                object.ssid = options.bytes === String ? $util.base64.encode(message.ssid, 0, message.ssid.length) : options.bytes === Array ? Array.prototype.slice.call(message.ssid) : message.ssid;\n            if (message.passphrase != null && message.hasOwnProperty(\"passphrase\"))\n                object.passphrase = options.bytes === String ? $util.base64.encode(message.passphrase, 0, message.passphrase.length) : options.bytes === Array ? Array.prototype.slice.call(message.passphrase) : message.passphrase;\n            if (message.bssid != null && message.hasOwnProperty(\"bssid\"))\n                object.bssid = options.bytes === String ? $util.base64.encode(message.bssid, 0, message.bssid.length) : options.bytes === Array ? Array.prototype.slice.call(message.bssid) : message.bssid;\n            if (message.channel != null && message.hasOwnProperty(\"channel\"))\n                object.channel = message.channel;\n            return object;\n        };\n\n        /**\n         * Converts this CmdSetConfig to JSON.\n         * @function toJSON\n         * @memberof espressif.CmdSetConfig\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CmdSetConfig.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return CmdSetConfig;\n    })();\n\n    espressif.RespSetConfig = (function() {\n\n        /**\n         * Properties of a RespSetConfig.\n         * @memberof espressif\n         * @interface IRespSetConfig\n         * @property {espressif.Status|null} [status] RespSetConfig status\n         */\n\n        /**\n         * Constructs a new RespSetConfig.\n         * @memberof espressif\n         * @classdesc Represents a RespSetConfig.\n         * @implements IRespSetConfig\n         * @constructor\n         * @param {espressif.IRespSetConfig=} [properties] Properties to set\n         */\n        function RespSetConfig(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RespSetConfig status.\n         * @member {espressif.Status} status\n         * @memberof espressif.RespSetConfig\n         * @instance\n         */\n        RespSetConfig.prototype.status = 0;\n\n        /**\n         * Creates a new RespSetConfig instance using the specified properties.\n         * @function create\n         * @memberof espressif.RespSetConfig\n         * @static\n         * @param {espressif.IRespSetConfig=} [properties] Properties to set\n         * @returns {espressif.RespSetConfig} RespSetConfig instance\n         */\n        RespSetConfig.create = function create(properties) {\n            return new RespSetConfig(properties);\n        };\n\n        /**\n         * Encodes the specified RespSetConfig message. Does not implicitly {@link espressif.RespSetConfig.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.RespSetConfig\n         * @static\n         * @param {espressif.RespSetConfig} message RespSetConfig message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RespSetConfig.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.status != null && Object.hasOwnProperty.call(message, \"status\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.status);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RespSetConfig message, length delimited. Does not implicitly {@link espressif.RespSetConfig.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.RespSetConfig\n         * @static\n         * @param {espressif.RespSetConfig} message RespSetConfig message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RespSetConfig.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RespSetConfig message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.RespSetConfig\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.RespSetConfig} RespSetConfig\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RespSetConfig.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.RespSetConfig();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.status = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RespSetConfig message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.RespSetConfig\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.RespSetConfig} RespSetConfig\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RespSetConfig.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RespSetConfig message.\n         * @function verify\n         * @memberof espressif.RespSetConfig\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RespSetConfig.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.status != null && message.hasOwnProperty(\"status\"))\n                switch (message.status) {\n                default:\n                    return \"status: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a RespSetConfig message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.RespSetConfig\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.RespSetConfig} RespSetConfig\n         */\n        RespSetConfig.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.RespSetConfig)\n                return object;\n            let message = new $root.espressif.RespSetConfig();\n            switch (object.status) {\n            case \"Success\":\n            case 0:\n                message.status = 0;\n                break;\n            case \"InvalidSecScheme\":\n            case 1:\n                message.status = 1;\n                break;\n            case \"InvalidProto\":\n            case 2:\n                message.status = 2;\n                break;\n            case \"TooManySessions\":\n            case 3:\n                message.status = 3;\n                break;\n            case \"InvalidArgument\":\n            case 4:\n                message.status = 4;\n                break;\n            case \"InternalError\":\n            case 5:\n                message.status = 5;\n                break;\n            case \"CryptoError\":\n            case 6:\n                message.status = 6;\n                break;\n            case \"InvalidSession\":\n            case 7:\n                message.status = 7;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RespSetConfig message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.RespSetConfig\n         * @static\n         * @param {espressif.RespSetConfig} message RespSetConfig\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RespSetConfig.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.status = options.enums === String ? \"Success\" : 0;\n            if (message.status != null && message.hasOwnProperty(\"status\"))\n                object.status = options.enums === String ? $root.espressif.Status[message.status] : message.status;\n            return object;\n        };\n\n        /**\n         * Converts this RespSetConfig to JSON.\n         * @function toJSON\n         * @memberof espressif.RespSetConfig\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RespSetConfig.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RespSetConfig;\n    })();\n\n    espressif.CmdApplyConfig = (function() {\n\n        /**\n         * Properties of a CmdApplyConfig.\n         * @memberof espressif\n         * @interface ICmdApplyConfig\n         */\n\n        /**\n         * Constructs a new CmdApplyConfig.\n         * @memberof espressif\n         * @classdesc Represents a CmdApplyConfig.\n         * @implements ICmdApplyConfig\n         * @constructor\n         * @param {espressif.ICmdApplyConfig=} [properties] Properties to set\n         */\n        function CmdApplyConfig(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new CmdApplyConfig instance using the specified properties.\n         * @function create\n         * @memberof espressif.CmdApplyConfig\n         * @static\n         * @param {espressif.ICmdApplyConfig=} [properties] Properties to set\n         * @returns {espressif.CmdApplyConfig} CmdApplyConfig instance\n         */\n        CmdApplyConfig.create = function create(properties) {\n            return new CmdApplyConfig(properties);\n        };\n\n        /**\n         * Encodes the specified CmdApplyConfig message. Does not implicitly {@link espressif.CmdApplyConfig.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.CmdApplyConfig\n         * @static\n         * @param {espressif.CmdApplyConfig} message CmdApplyConfig message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CmdApplyConfig.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CmdApplyConfig message, length delimited. Does not implicitly {@link espressif.CmdApplyConfig.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.CmdApplyConfig\n         * @static\n         * @param {espressif.CmdApplyConfig} message CmdApplyConfig message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CmdApplyConfig.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CmdApplyConfig message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.CmdApplyConfig\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.CmdApplyConfig} CmdApplyConfig\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CmdApplyConfig.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.CmdApplyConfig();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CmdApplyConfig message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.CmdApplyConfig\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.CmdApplyConfig} CmdApplyConfig\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CmdApplyConfig.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CmdApplyConfig message.\n         * @function verify\n         * @memberof espressif.CmdApplyConfig\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CmdApplyConfig.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a CmdApplyConfig message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.CmdApplyConfig\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.CmdApplyConfig} CmdApplyConfig\n         */\n        CmdApplyConfig.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.CmdApplyConfig)\n                return object;\n            return new $root.espressif.CmdApplyConfig();\n        };\n\n        /**\n         * Creates a plain object from a CmdApplyConfig message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.CmdApplyConfig\n         * @static\n         * @param {espressif.CmdApplyConfig} message CmdApplyConfig\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CmdApplyConfig.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this CmdApplyConfig to JSON.\n         * @function toJSON\n         * @memberof espressif.CmdApplyConfig\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CmdApplyConfig.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return CmdApplyConfig;\n    })();\n\n    espressif.RespApplyConfig = (function() {\n\n        /**\n         * Properties of a RespApplyConfig.\n         * @memberof espressif\n         * @interface IRespApplyConfig\n         * @property {espressif.Status|null} [status] RespApplyConfig status\n         */\n\n        /**\n         * Constructs a new RespApplyConfig.\n         * @memberof espressif\n         * @classdesc Represents a RespApplyConfig.\n         * @implements IRespApplyConfig\n         * @constructor\n         * @param {espressif.IRespApplyConfig=} [properties] Properties to set\n         */\n        function RespApplyConfig(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RespApplyConfig status.\n         * @member {espressif.Status} status\n         * @memberof espressif.RespApplyConfig\n         * @instance\n         */\n        RespApplyConfig.prototype.status = 0;\n\n        /**\n         * Creates a new RespApplyConfig instance using the specified properties.\n         * @function create\n         * @memberof espressif.RespApplyConfig\n         * @static\n         * @param {espressif.IRespApplyConfig=} [properties] Properties to set\n         * @returns {espressif.RespApplyConfig} RespApplyConfig instance\n         */\n        RespApplyConfig.create = function create(properties) {\n            return new RespApplyConfig(properties);\n        };\n\n        /**\n         * Encodes the specified RespApplyConfig message. Does not implicitly {@link espressif.RespApplyConfig.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.RespApplyConfig\n         * @static\n         * @param {espressif.RespApplyConfig} message RespApplyConfig message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RespApplyConfig.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.status != null && Object.hasOwnProperty.call(message, \"status\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.status);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RespApplyConfig message, length delimited. Does not implicitly {@link espressif.RespApplyConfig.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.RespApplyConfig\n         * @static\n         * @param {espressif.RespApplyConfig} message RespApplyConfig message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RespApplyConfig.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RespApplyConfig message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.RespApplyConfig\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.RespApplyConfig} RespApplyConfig\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RespApplyConfig.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.RespApplyConfig();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.status = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RespApplyConfig message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.RespApplyConfig\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.RespApplyConfig} RespApplyConfig\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RespApplyConfig.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RespApplyConfig message.\n         * @function verify\n         * @memberof espressif.RespApplyConfig\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RespApplyConfig.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.status != null && message.hasOwnProperty(\"status\"))\n                switch (message.status) {\n                default:\n                    return \"status: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a RespApplyConfig message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.RespApplyConfig\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.RespApplyConfig} RespApplyConfig\n         */\n        RespApplyConfig.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.RespApplyConfig)\n                return object;\n            let message = new $root.espressif.RespApplyConfig();\n            switch (object.status) {\n            case \"Success\":\n            case 0:\n                message.status = 0;\n                break;\n            case \"InvalidSecScheme\":\n            case 1:\n                message.status = 1;\n                break;\n            case \"InvalidProto\":\n            case 2:\n                message.status = 2;\n                break;\n            case \"TooManySessions\":\n            case 3:\n                message.status = 3;\n                break;\n            case \"InvalidArgument\":\n            case 4:\n                message.status = 4;\n                break;\n            case \"InternalError\":\n            case 5:\n                message.status = 5;\n                break;\n            case \"CryptoError\":\n            case 6:\n                message.status = 6;\n                break;\n            case \"InvalidSession\":\n            case 7:\n                message.status = 7;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RespApplyConfig message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.RespApplyConfig\n         * @static\n         * @param {espressif.RespApplyConfig} message RespApplyConfig\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RespApplyConfig.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.status = options.enums === String ? \"Success\" : 0;\n            if (message.status != null && message.hasOwnProperty(\"status\"))\n                object.status = options.enums === String ? $root.espressif.Status[message.status] : message.status;\n            return object;\n        };\n\n        /**\n         * Converts this RespApplyConfig to JSON.\n         * @function toJSON\n         * @memberof espressif.RespApplyConfig\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RespApplyConfig.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RespApplyConfig;\n    })();\n\n    /**\n     * WiFiConfigMsgType enum.\n     * @name espressif.WiFiConfigMsgType\n     * @enum {number}\n     * @property {number} TypeCmdGetStatus=0 TypeCmdGetStatus value\n     * @property {number} TypeRespGetStatus=1 TypeRespGetStatus value\n     * @property {number} TypeCmdSetConfig=2 TypeCmdSetConfig value\n     * @property {number} TypeRespSetConfig=3 TypeRespSetConfig value\n     * @property {number} TypeCmdApplyConfig=4 TypeCmdApplyConfig value\n     * @property {number} TypeRespApplyConfig=5 TypeRespApplyConfig value\n     */\n    espressif.WiFiConfigMsgType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"TypeCmdGetStatus\"] = 0;\n        values[valuesById[1] = \"TypeRespGetStatus\"] = 1;\n        values[valuesById[2] = \"TypeCmdSetConfig\"] = 2;\n        values[valuesById[3] = \"TypeRespSetConfig\"] = 3;\n        values[valuesById[4] = \"TypeCmdApplyConfig\"] = 4;\n        values[valuesById[5] = \"TypeRespApplyConfig\"] = 5;\n        return values;\n    })();\n\n    espressif.WiFiConfigPayload = (function() {\n\n        /**\n         * Properties of a WiFiConfigPayload.\n         * @memberof espressif\n         * @interface IWiFiConfigPayload\n         * @property {espressif.WiFiConfigMsgType|null} [msg] WiFiConfigPayload msg\n         * @property {espressif.CmdGetStatus|null} [cmdGetStatus] WiFiConfigPayload cmdGetStatus\n         * @property {espressif.RespGetStatus|null} [respGetStatus] WiFiConfigPayload respGetStatus\n         * @property {espressif.CmdSetConfig|null} [cmdSetConfig] WiFiConfigPayload cmdSetConfig\n         * @property {espressif.RespSetConfig|null} [respSetConfig] WiFiConfigPayload respSetConfig\n         * @property {espressif.CmdApplyConfig|null} [cmdApplyConfig] WiFiConfigPayload cmdApplyConfig\n         * @property {espressif.RespApplyConfig|null} [respApplyConfig] WiFiConfigPayload respApplyConfig\n         */\n\n        /**\n         * Constructs a new WiFiConfigPayload.\n         * @memberof espressif\n         * @classdesc Represents a WiFiConfigPayload.\n         * @implements IWiFiConfigPayload\n         * @constructor\n         * @param {espressif.IWiFiConfigPayload=} [properties] Properties to set\n         */\n        function WiFiConfigPayload(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * WiFiConfigPayload msg.\n         * @member {espressif.WiFiConfigMsgType} msg\n         * @memberof espressif.WiFiConfigPayload\n         * @instance\n         */\n        WiFiConfigPayload.prototype.msg = 0;\n\n        /**\n         * WiFiConfigPayload cmdGetStatus.\n         * @member {espressif.CmdGetStatus|null|undefined} cmdGetStatus\n         * @memberof espressif.WiFiConfigPayload\n         * @instance\n         */\n        WiFiConfigPayload.prototype.cmdGetStatus = null;\n\n        /**\n         * WiFiConfigPayload respGetStatus.\n         * @member {espressif.RespGetStatus|null|undefined} respGetStatus\n         * @memberof espressif.WiFiConfigPayload\n         * @instance\n         */\n        WiFiConfigPayload.prototype.respGetStatus = null;\n\n        /**\n         * WiFiConfigPayload cmdSetConfig.\n         * @member {espressif.CmdSetConfig|null|undefined} cmdSetConfig\n         * @memberof espressif.WiFiConfigPayload\n         * @instance\n         */\n        WiFiConfigPayload.prototype.cmdSetConfig = null;\n\n        /**\n         * WiFiConfigPayload respSetConfig.\n         * @member {espressif.RespSetConfig|null|undefined} respSetConfig\n         * @memberof espressif.WiFiConfigPayload\n         * @instance\n         */\n        WiFiConfigPayload.prototype.respSetConfig = null;\n\n        /**\n         * WiFiConfigPayload cmdApplyConfig.\n         * @member {espressif.CmdApplyConfig|null|undefined} cmdApplyConfig\n         * @memberof espressif.WiFiConfigPayload\n         * @instance\n         */\n        WiFiConfigPayload.prototype.cmdApplyConfig = null;\n\n        /**\n         * WiFiConfigPayload respApplyConfig.\n         * @member {espressif.RespApplyConfig|null|undefined} respApplyConfig\n         * @memberof espressif.WiFiConfigPayload\n         * @instance\n         */\n        WiFiConfigPayload.prototype.respApplyConfig = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * WiFiConfigPayload payload.\n         * @member {\"cmdGetStatus\"|\"respGetStatus\"|\"cmdSetConfig\"|\"respSetConfig\"|\"cmdApplyConfig\"|\"respApplyConfig\"|undefined} payload\n         * @memberof espressif.WiFiConfigPayload\n         * @instance\n         */\n        Object.defineProperty(WiFiConfigPayload.prototype, \"payload\", {\n            get: $util.oneOfGetter($oneOfFields = [\"cmdGetStatus\", \"respGetStatus\", \"cmdSetConfig\", \"respSetConfig\", \"cmdApplyConfig\", \"respApplyConfig\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new WiFiConfigPayload instance using the specified properties.\n         * @function create\n         * @memberof espressif.WiFiConfigPayload\n         * @static\n         * @param {espressif.IWiFiConfigPayload=} [properties] Properties to set\n         * @returns {espressif.WiFiConfigPayload} WiFiConfigPayload instance\n         */\n        WiFiConfigPayload.create = function create(properties) {\n            return new WiFiConfigPayload(properties);\n        };\n\n        /**\n         * Encodes the specified WiFiConfigPayload message. Does not implicitly {@link espressif.WiFiConfigPayload.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.WiFiConfigPayload\n         * @static\n         * @param {espressif.WiFiConfigPayload} message WiFiConfigPayload message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WiFiConfigPayload.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.msg != null && Object.hasOwnProperty.call(message, \"msg\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.msg);\n            if (message.cmdGetStatus != null && Object.hasOwnProperty.call(message, \"cmdGetStatus\"))\n                $root.espressif.CmdGetStatus.encode(message.cmdGetStatus, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.respGetStatus != null && Object.hasOwnProperty.call(message, \"respGetStatus\"))\n                $root.espressif.RespGetStatus.encode(message.respGetStatus, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.cmdSetConfig != null && Object.hasOwnProperty.call(message, \"cmdSetConfig\"))\n                $root.espressif.CmdSetConfig.encode(message.cmdSetConfig, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.respSetConfig != null && Object.hasOwnProperty.call(message, \"respSetConfig\"))\n                $root.espressif.RespSetConfig.encode(message.respSetConfig, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.cmdApplyConfig != null && Object.hasOwnProperty.call(message, \"cmdApplyConfig\"))\n                $root.espressif.CmdApplyConfig.encode(message.cmdApplyConfig, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.respApplyConfig != null && Object.hasOwnProperty.call(message, \"respApplyConfig\"))\n                $root.espressif.RespApplyConfig.encode(message.respApplyConfig, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified WiFiConfigPayload message, length delimited. Does not implicitly {@link espressif.WiFiConfigPayload.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.WiFiConfigPayload\n         * @static\n         * @param {espressif.WiFiConfigPayload} message WiFiConfigPayload message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WiFiConfigPayload.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a WiFiConfigPayload message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.WiFiConfigPayload\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.WiFiConfigPayload} WiFiConfigPayload\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WiFiConfigPayload.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.WiFiConfigPayload();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.msg = reader.int32();\n                    break;\n                case 10:\n                    message.cmdGetStatus = $root.espressif.CmdGetStatus.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.respGetStatus = $root.espressif.RespGetStatus.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.cmdSetConfig = $root.espressif.CmdSetConfig.decode(reader, reader.uint32());\n                    break;\n                case 13:\n                    message.respSetConfig = $root.espressif.RespSetConfig.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    message.cmdApplyConfig = $root.espressif.CmdApplyConfig.decode(reader, reader.uint32());\n                    break;\n                case 15:\n                    message.respApplyConfig = $root.espressif.RespApplyConfig.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a WiFiConfigPayload message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.WiFiConfigPayload\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.WiFiConfigPayload} WiFiConfigPayload\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WiFiConfigPayload.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a WiFiConfigPayload message.\n         * @function verify\n         * @memberof espressif.WiFiConfigPayload\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        WiFiConfigPayload.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.msg != null && message.hasOwnProperty(\"msg\"))\n                switch (message.msg) {\n                default:\n                    return \"msg: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                    break;\n                }\n            if (message.cmdGetStatus != null && message.hasOwnProperty(\"cmdGetStatus\")) {\n                properties.payload = 1;\n                {\n                    let error = $root.espressif.CmdGetStatus.verify(message.cmdGetStatus);\n                    if (error)\n                        return \"cmdGetStatus.\" + error;\n                }\n            }\n            if (message.respGetStatus != null && message.hasOwnProperty(\"respGetStatus\")) {\n                if (properties.payload === 1)\n                    return \"payload: multiple values\";\n                properties.payload = 1;\n                {\n                    let error = $root.espressif.RespGetStatus.verify(message.respGetStatus);\n                    if (error)\n                        return \"respGetStatus.\" + error;\n                }\n            }\n            if (message.cmdSetConfig != null && message.hasOwnProperty(\"cmdSetConfig\")) {\n                if (properties.payload === 1)\n                    return \"payload: multiple values\";\n                properties.payload = 1;\n                {\n                    let error = $root.espressif.CmdSetConfig.verify(message.cmdSetConfig);\n                    if (error)\n                        return \"cmdSetConfig.\" + error;\n                }\n            }\n            if (message.respSetConfig != null && message.hasOwnProperty(\"respSetConfig\")) {\n                if (properties.payload === 1)\n                    return \"payload: multiple values\";\n                properties.payload = 1;\n                {\n                    let error = $root.espressif.RespSetConfig.verify(message.respSetConfig);\n                    if (error)\n                        return \"respSetConfig.\" + error;\n                }\n            }\n            if (message.cmdApplyConfig != null && message.hasOwnProperty(\"cmdApplyConfig\")) {\n                if (properties.payload === 1)\n                    return \"payload: multiple values\";\n                properties.payload = 1;\n                {\n                    let error = $root.espressif.CmdApplyConfig.verify(message.cmdApplyConfig);\n                    if (error)\n                        return \"cmdApplyConfig.\" + error;\n                }\n            }\n            if (message.respApplyConfig != null && message.hasOwnProperty(\"respApplyConfig\")) {\n                if (properties.payload === 1)\n                    return \"payload: multiple values\";\n                properties.payload = 1;\n                {\n                    let error = $root.espressif.RespApplyConfig.verify(message.respApplyConfig);\n                    if (error)\n                        return \"respApplyConfig.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a WiFiConfigPayload message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.WiFiConfigPayload\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.WiFiConfigPayload} WiFiConfigPayload\n         */\n        WiFiConfigPayload.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.WiFiConfigPayload)\n                return object;\n            let message = new $root.espressif.WiFiConfigPayload();\n            switch (object.msg) {\n            case \"TypeCmdGetStatus\":\n            case 0:\n                message.msg = 0;\n                break;\n            case \"TypeRespGetStatus\":\n            case 1:\n                message.msg = 1;\n                break;\n            case \"TypeCmdSetConfig\":\n            case 2:\n                message.msg = 2;\n                break;\n            case \"TypeRespSetConfig\":\n            case 3:\n                message.msg = 3;\n                break;\n            case \"TypeCmdApplyConfig\":\n            case 4:\n                message.msg = 4;\n                break;\n            case \"TypeRespApplyConfig\":\n            case 5:\n                message.msg = 5;\n                break;\n            }\n            if (object.cmdGetStatus != null) {\n                if (typeof object.cmdGetStatus !== \"object\")\n                    throw TypeError(\".espressif.WiFiConfigPayload.cmdGetStatus: object expected\");\n                message.cmdGetStatus = $root.espressif.CmdGetStatus.fromObject(object.cmdGetStatus);\n            }\n            if (object.respGetStatus != null) {\n                if (typeof object.respGetStatus !== \"object\")\n                    throw TypeError(\".espressif.WiFiConfigPayload.respGetStatus: object expected\");\n                message.respGetStatus = $root.espressif.RespGetStatus.fromObject(object.respGetStatus);\n            }\n            if (object.cmdSetConfig != null) {\n                if (typeof object.cmdSetConfig !== \"object\")\n                    throw TypeError(\".espressif.WiFiConfigPayload.cmdSetConfig: object expected\");\n                message.cmdSetConfig = $root.espressif.CmdSetConfig.fromObject(object.cmdSetConfig);\n            }\n            if (object.respSetConfig != null) {\n                if (typeof object.respSetConfig !== \"object\")\n                    throw TypeError(\".espressif.WiFiConfigPayload.respSetConfig: object expected\");\n                message.respSetConfig = $root.espressif.RespSetConfig.fromObject(object.respSetConfig);\n            }\n            if (object.cmdApplyConfig != null) {\n                if (typeof object.cmdApplyConfig !== \"object\")\n                    throw TypeError(\".espressif.WiFiConfigPayload.cmdApplyConfig: object expected\");\n                message.cmdApplyConfig = $root.espressif.CmdApplyConfig.fromObject(object.cmdApplyConfig);\n            }\n            if (object.respApplyConfig != null) {\n                if (typeof object.respApplyConfig !== \"object\")\n                    throw TypeError(\".espressif.WiFiConfigPayload.respApplyConfig: object expected\");\n                message.respApplyConfig = $root.espressif.RespApplyConfig.fromObject(object.respApplyConfig);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a WiFiConfigPayload message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.WiFiConfigPayload\n         * @static\n         * @param {espressif.WiFiConfigPayload} message WiFiConfigPayload\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        WiFiConfigPayload.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.msg = options.enums === String ? \"TypeCmdGetStatus\" : 0;\n            if (message.msg != null && message.hasOwnProperty(\"msg\"))\n                object.msg = options.enums === String ? $root.espressif.WiFiConfigMsgType[message.msg] : message.msg;\n            if (message.cmdGetStatus != null && message.hasOwnProperty(\"cmdGetStatus\")) {\n                object.cmdGetStatus = $root.espressif.CmdGetStatus.toObject(message.cmdGetStatus, options);\n                if (options.oneofs)\n                    object.payload = \"cmdGetStatus\";\n            }\n            if (message.respGetStatus != null && message.hasOwnProperty(\"respGetStatus\")) {\n                object.respGetStatus = $root.espressif.RespGetStatus.toObject(message.respGetStatus, options);\n                if (options.oneofs)\n                    object.payload = \"respGetStatus\";\n            }\n            if (message.cmdSetConfig != null && message.hasOwnProperty(\"cmdSetConfig\")) {\n                object.cmdSetConfig = $root.espressif.CmdSetConfig.toObject(message.cmdSetConfig, options);\n                if (options.oneofs)\n                    object.payload = \"cmdSetConfig\";\n            }\n            if (message.respSetConfig != null && message.hasOwnProperty(\"respSetConfig\")) {\n                object.respSetConfig = $root.espressif.RespSetConfig.toObject(message.respSetConfig, options);\n                if (options.oneofs)\n                    object.payload = \"respSetConfig\";\n            }\n            if (message.cmdApplyConfig != null && message.hasOwnProperty(\"cmdApplyConfig\")) {\n                object.cmdApplyConfig = $root.espressif.CmdApplyConfig.toObject(message.cmdApplyConfig, options);\n                if (options.oneofs)\n                    object.payload = \"cmdApplyConfig\";\n            }\n            if (message.respApplyConfig != null && message.hasOwnProperty(\"respApplyConfig\")) {\n                object.respApplyConfig = $root.espressif.RespApplyConfig.toObject(message.respApplyConfig, options);\n                if (options.oneofs)\n                    object.payload = \"respApplyConfig\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this WiFiConfigPayload to JSON.\n         * @function toJSON\n         * @memberof espressif.WiFiConfigPayload\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        WiFiConfigPayload.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return WiFiConfigPayload;\n    })();\n\n    /**\n     * WifiStationState enum.\n     * @name espressif.WifiStationState\n     * @enum {number}\n     * @property {number} Connected=0 Connected value\n     * @property {number} Connecting=1 Connecting value\n     * @property {number} Disconnected=2 Disconnected value\n     * @property {number} ConnectionFailed=3 ConnectionFailed value\n     */\n    espressif.WifiStationState = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Connected\"] = 0;\n        values[valuesById[1] = \"Connecting\"] = 1;\n        values[valuesById[2] = \"Disconnected\"] = 2;\n        values[valuesById[3] = \"ConnectionFailed\"] = 3;\n        return values;\n    })();\n\n    /**\n     * WifiConnectFailedReason enum.\n     * @name espressif.WifiConnectFailedReason\n     * @enum {number}\n     * @property {number} AuthError=0 AuthError value\n     * @property {number} NetworkNotFound=1 NetworkNotFound value\n     */\n    espressif.WifiConnectFailedReason = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"AuthError\"] = 0;\n        values[valuesById[1] = \"NetworkNotFound\"] = 1;\n        return values;\n    })();\n\n    /**\n     * WifiAuthMode enum.\n     * @name espressif.WifiAuthMode\n     * @enum {number}\n     * @property {number} Open=0 Open value\n     * @property {number} WEP=1 WEP value\n     * @property {number} WPA_PSK=2 WPA_PSK value\n     * @property {number} WPA2_PSK=3 WPA2_PSK value\n     * @property {number} WPA_WPA2_PSK=4 WPA_WPA2_PSK value\n     * @property {number} WPA2_ENTERPRISE=5 WPA2_ENTERPRISE value\n     */\n    espressif.WifiAuthMode = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Open\"] = 0;\n        values[valuesById[1] = \"WEP\"] = 1;\n        values[valuesById[2] = \"WPA_PSK\"] = 2;\n        values[valuesById[3] = \"WPA2_PSK\"] = 3;\n        values[valuesById[4] = \"WPA_WPA2_PSK\"] = 4;\n        values[valuesById[5] = \"WPA2_ENTERPRISE\"] = 5;\n        return values;\n    })();\n\n    espressif.WifiConnectedState = (function() {\n\n        /**\n         * Properties of a WifiConnectedState.\n         * @memberof espressif\n         * @interface IWifiConnectedState\n         * @property {string|null} [ip4Addr] WifiConnectedState ip4Addr\n         * @property {espressif.WifiAuthMode|null} [authMode] WifiConnectedState authMode\n         * @property {Uint8Array|null} [ssid] WifiConnectedState ssid\n         * @property {Uint8Array|null} [bssid] WifiConnectedState bssid\n         * @property {number|null} [channel] WifiConnectedState channel\n         */\n\n        /**\n         * Constructs a new WifiConnectedState.\n         * @memberof espressif\n         * @classdesc Represents a WifiConnectedState.\n         * @implements IWifiConnectedState\n         * @constructor\n         * @param {espressif.IWifiConnectedState=} [properties] Properties to set\n         */\n        function WifiConnectedState(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * WifiConnectedState ip4Addr.\n         * @member {string} ip4Addr\n         * @memberof espressif.WifiConnectedState\n         * @instance\n         */\n        WifiConnectedState.prototype.ip4Addr = \"\";\n\n        /**\n         * WifiConnectedState authMode.\n         * @member {espressif.WifiAuthMode} authMode\n         * @memberof espressif.WifiConnectedState\n         * @instance\n         */\n        WifiConnectedState.prototype.authMode = 0;\n\n        /**\n         * WifiConnectedState ssid.\n         * @member {Uint8Array} ssid\n         * @memberof espressif.WifiConnectedState\n         * @instance\n         */\n        WifiConnectedState.prototype.ssid = $util.newBuffer([]);\n\n        /**\n         * WifiConnectedState bssid.\n         * @member {Uint8Array} bssid\n         * @memberof espressif.WifiConnectedState\n         * @instance\n         */\n        WifiConnectedState.prototype.bssid = $util.newBuffer([]);\n\n        /**\n         * WifiConnectedState channel.\n         * @member {number} channel\n         * @memberof espressif.WifiConnectedState\n         * @instance\n         */\n        WifiConnectedState.prototype.channel = 0;\n\n        /**\n         * Creates a new WifiConnectedState instance using the specified properties.\n         * @function create\n         * @memberof espressif.WifiConnectedState\n         * @static\n         * @param {espressif.IWifiConnectedState=} [properties] Properties to set\n         * @returns {espressif.WifiConnectedState} WifiConnectedState instance\n         */\n        WifiConnectedState.create = function create(properties) {\n            return new WifiConnectedState(properties);\n        };\n\n        /**\n         * Encodes the specified WifiConnectedState message. Does not implicitly {@link espressif.WifiConnectedState.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.WifiConnectedState\n         * @static\n         * @param {espressif.WifiConnectedState} message WifiConnectedState message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WifiConnectedState.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.ip4Addr != null && Object.hasOwnProperty.call(message, \"ip4Addr\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.ip4Addr);\n            if (message.authMode != null && Object.hasOwnProperty.call(message, \"authMode\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.authMode);\n            if (message.ssid != null && Object.hasOwnProperty.call(message, \"ssid\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.ssid);\n            if (message.bssid != null && Object.hasOwnProperty.call(message, \"bssid\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.bssid);\n            if (message.channel != null && Object.hasOwnProperty.call(message, \"channel\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.channel);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified WifiConnectedState message, length delimited. Does not implicitly {@link espressif.WifiConnectedState.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.WifiConnectedState\n         * @static\n         * @param {espressif.WifiConnectedState} message WifiConnectedState message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WifiConnectedState.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a WifiConnectedState message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.WifiConnectedState\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.WifiConnectedState} WifiConnectedState\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WifiConnectedState.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.WifiConnectedState();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.ip4Addr = reader.string();\n                    break;\n                case 2:\n                    message.authMode = reader.int32();\n                    break;\n                case 3:\n                    message.ssid = reader.bytes();\n                    break;\n                case 4:\n                    message.bssid = reader.bytes();\n                    break;\n                case 5:\n                    message.channel = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a WifiConnectedState message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.WifiConnectedState\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.WifiConnectedState} WifiConnectedState\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WifiConnectedState.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a WifiConnectedState message.\n         * @function verify\n         * @memberof espressif.WifiConnectedState\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        WifiConnectedState.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.ip4Addr != null && message.hasOwnProperty(\"ip4Addr\"))\n                if (!$util.isString(message.ip4Addr))\n                    return \"ip4Addr: string expected\";\n            if (message.authMode != null && message.hasOwnProperty(\"authMode\"))\n                switch (message.authMode) {\n                default:\n                    return \"authMode: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                    break;\n                }\n            if (message.ssid != null && message.hasOwnProperty(\"ssid\"))\n                if (!(message.ssid && typeof message.ssid.length === \"number\" || $util.isString(message.ssid)))\n                    return \"ssid: buffer expected\";\n            if (message.bssid != null && message.hasOwnProperty(\"bssid\"))\n                if (!(message.bssid && typeof message.bssid.length === \"number\" || $util.isString(message.bssid)))\n                    return \"bssid: buffer expected\";\n            if (message.channel != null && message.hasOwnProperty(\"channel\"))\n                if (!$util.isInteger(message.channel))\n                    return \"channel: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a WifiConnectedState message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.WifiConnectedState\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.WifiConnectedState} WifiConnectedState\n         */\n        WifiConnectedState.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.WifiConnectedState)\n                return object;\n            let message = new $root.espressif.WifiConnectedState();\n            if (object.ip4Addr != null)\n                message.ip4Addr = String(object.ip4Addr);\n            switch (object.authMode) {\n            case \"Open\":\n            case 0:\n                message.authMode = 0;\n                break;\n            case \"WEP\":\n            case 1:\n                message.authMode = 1;\n                break;\n            case \"WPA_PSK\":\n            case 2:\n                message.authMode = 2;\n                break;\n            case \"WPA2_PSK\":\n            case 3:\n                message.authMode = 3;\n                break;\n            case \"WPA_WPA2_PSK\":\n            case 4:\n                message.authMode = 4;\n                break;\n            case \"WPA2_ENTERPRISE\":\n            case 5:\n                message.authMode = 5;\n                break;\n            }\n            if (object.ssid != null)\n                if (typeof object.ssid === \"string\")\n                    $util.base64.decode(object.ssid, message.ssid = $util.newBuffer($util.base64.length(object.ssid)), 0);\n                else if (object.ssid.length)\n                    message.ssid = object.ssid;\n            if (object.bssid != null)\n                if (typeof object.bssid === \"string\")\n                    $util.base64.decode(object.bssid, message.bssid = $util.newBuffer($util.base64.length(object.bssid)), 0);\n                else if (object.bssid.length)\n                    message.bssid = object.bssid;\n            if (object.channel != null)\n                message.channel = object.channel | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a WifiConnectedState message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.WifiConnectedState\n         * @static\n         * @param {espressif.WifiConnectedState} message WifiConnectedState\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        WifiConnectedState.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.ip4Addr = \"\";\n                object.authMode = options.enums === String ? \"Open\" : 0;\n                if (options.bytes === String)\n                    object.ssid = \"\";\n                else {\n                    object.ssid = [];\n                    if (options.bytes !== Array)\n                        object.ssid = $util.newBuffer(object.ssid);\n                }\n                if (options.bytes === String)\n                    object.bssid = \"\";\n                else {\n                    object.bssid = [];\n                    if (options.bytes !== Array)\n                        object.bssid = $util.newBuffer(object.bssid);\n                }\n                object.channel = 0;\n            }\n            if (message.ip4Addr != null && message.hasOwnProperty(\"ip4Addr\"))\n                object.ip4Addr = message.ip4Addr;\n            if (message.authMode != null && message.hasOwnProperty(\"authMode\"))\n                object.authMode = options.enums === String ? $root.espressif.WifiAuthMode[message.authMode] : message.authMode;\n            if (message.ssid != null && message.hasOwnProperty(\"ssid\"))\n                object.ssid = options.bytes === String ? $util.base64.encode(message.ssid, 0, message.ssid.length) : options.bytes === Array ? Array.prototype.slice.call(message.ssid) : message.ssid;\n            if (message.bssid != null && message.hasOwnProperty(\"bssid\"))\n                object.bssid = options.bytes === String ? $util.base64.encode(message.bssid, 0, message.bssid.length) : options.bytes === Array ? Array.prototype.slice.call(message.bssid) : message.bssid;\n            if (message.channel != null && message.hasOwnProperty(\"channel\"))\n                object.channel = message.channel;\n            return object;\n        };\n\n        /**\n         * Converts this WifiConnectedState to JSON.\n         * @function toJSON\n         * @memberof espressif.WifiConnectedState\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        WifiConnectedState.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return WifiConnectedState;\n    })();\n\n    espressif.CmdScanStart = (function() {\n\n        /**\n         * Properties of a CmdScanStart.\n         * @memberof espressif\n         * @interface ICmdScanStart\n         * @property {boolean|null} [blocking] CmdScanStart blocking\n         * @property {boolean|null} [passive] CmdScanStart passive\n         * @property {number|null} [groupChannels] CmdScanStart groupChannels\n         * @property {number|null} [periodMs] CmdScanStart periodMs\n         */\n\n        /**\n         * Constructs a new CmdScanStart.\n         * @memberof espressif\n         * @classdesc Represents a CmdScanStart.\n         * @implements ICmdScanStart\n         * @constructor\n         * @param {espressif.ICmdScanStart=} [properties] Properties to set\n         */\n        function CmdScanStart(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CmdScanStart blocking.\n         * @member {boolean} blocking\n         * @memberof espressif.CmdScanStart\n         * @instance\n         */\n        CmdScanStart.prototype.blocking = false;\n\n        /**\n         * CmdScanStart passive.\n         * @member {boolean} passive\n         * @memberof espressif.CmdScanStart\n         * @instance\n         */\n        CmdScanStart.prototype.passive = false;\n\n        /**\n         * CmdScanStart groupChannels.\n         * @member {number} groupChannels\n         * @memberof espressif.CmdScanStart\n         * @instance\n         */\n        CmdScanStart.prototype.groupChannels = 0;\n\n        /**\n         * CmdScanStart periodMs.\n         * @member {number} periodMs\n         * @memberof espressif.CmdScanStart\n         * @instance\n         */\n        CmdScanStart.prototype.periodMs = 0;\n\n        /**\n         * Creates a new CmdScanStart instance using the specified properties.\n         * @function create\n         * @memberof espressif.CmdScanStart\n         * @static\n         * @param {espressif.ICmdScanStart=} [properties] Properties to set\n         * @returns {espressif.CmdScanStart} CmdScanStart instance\n         */\n        CmdScanStart.create = function create(properties) {\n            return new CmdScanStart(properties);\n        };\n\n        /**\n         * Encodes the specified CmdScanStart message. Does not implicitly {@link espressif.CmdScanStart.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.CmdScanStart\n         * @static\n         * @param {espressif.CmdScanStart} message CmdScanStart message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CmdScanStart.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.blocking != null && Object.hasOwnProperty.call(message, \"blocking\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.blocking);\n            if (message.passive != null && Object.hasOwnProperty.call(message, \"passive\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.passive);\n            if (message.groupChannels != null && Object.hasOwnProperty.call(message, \"groupChannels\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.groupChannels);\n            if (message.periodMs != null && Object.hasOwnProperty.call(message, \"periodMs\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.periodMs);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CmdScanStart message, length delimited. Does not implicitly {@link espressif.CmdScanStart.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.CmdScanStart\n         * @static\n         * @param {espressif.CmdScanStart} message CmdScanStart message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CmdScanStart.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CmdScanStart message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.CmdScanStart\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.CmdScanStart} CmdScanStart\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CmdScanStart.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.CmdScanStart();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.blocking = reader.bool();\n                    break;\n                case 2:\n                    message.passive = reader.bool();\n                    break;\n                case 3:\n                    message.groupChannels = reader.uint32();\n                    break;\n                case 4:\n                    message.periodMs = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CmdScanStart message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.CmdScanStart\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.CmdScanStart} CmdScanStart\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CmdScanStart.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CmdScanStart message.\n         * @function verify\n         * @memberof espressif.CmdScanStart\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CmdScanStart.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.blocking != null && message.hasOwnProperty(\"blocking\"))\n                if (typeof message.blocking !== \"boolean\")\n                    return \"blocking: boolean expected\";\n            if (message.passive != null && message.hasOwnProperty(\"passive\"))\n                if (typeof message.passive !== \"boolean\")\n                    return \"passive: boolean expected\";\n            if (message.groupChannels != null && message.hasOwnProperty(\"groupChannels\"))\n                if (!$util.isInteger(message.groupChannels))\n                    return \"groupChannels: integer expected\";\n            if (message.periodMs != null && message.hasOwnProperty(\"periodMs\"))\n                if (!$util.isInteger(message.periodMs))\n                    return \"periodMs: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a CmdScanStart message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.CmdScanStart\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.CmdScanStart} CmdScanStart\n         */\n        CmdScanStart.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.CmdScanStart)\n                return object;\n            let message = new $root.espressif.CmdScanStart();\n            if (object.blocking != null)\n                message.blocking = Boolean(object.blocking);\n            if (object.passive != null)\n                message.passive = Boolean(object.passive);\n            if (object.groupChannels != null)\n                message.groupChannels = object.groupChannels >>> 0;\n            if (object.periodMs != null)\n                message.periodMs = object.periodMs >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CmdScanStart message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.CmdScanStart\n         * @static\n         * @param {espressif.CmdScanStart} message CmdScanStart\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CmdScanStart.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.blocking = false;\n                object.passive = false;\n                object.groupChannels = 0;\n                object.periodMs = 0;\n            }\n            if (message.blocking != null && message.hasOwnProperty(\"blocking\"))\n                object.blocking = message.blocking;\n            if (message.passive != null && message.hasOwnProperty(\"passive\"))\n                object.passive = message.passive;\n            if (message.groupChannels != null && message.hasOwnProperty(\"groupChannels\"))\n                object.groupChannels = message.groupChannels;\n            if (message.periodMs != null && message.hasOwnProperty(\"periodMs\"))\n                object.periodMs = message.periodMs;\n            return object;\n        };\n\n        /**\n         * Converts this CmdScanStart to JSON.\n         * @function toJSON\n         * @memberof espressif.CmdScanStart\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CmdScanStart.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return CmdScanStart;\n    })();\n\n    espressif.RespScanStart = (function() {\n\n        /**\n         * Properties of a RespScanStart.\n         * @memberof espressif\n         * @interface IRespScanStart\n         */\n\n        /**\n         * Constructs a new RespScanStart.\n         * @memberof espressif\n         * @classdesc Represents a RespScanStart.\n         * @implements IRespScanStart\n         * @constructor\n         * @param {espressif.IRespScanStart=} [properties] Properties to set\n         */\n        function RespScanStart(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new RespScanStart instance using the specified properties.\n         * @function create\n         * @memberof espressif.RespScanStart\n         * @static\n         * @param {espressif.IRespScanStart=} [properties] Properties to set\n         * @returns {espressif.RespScanStart} RespScanStart instance\n         */\n        RespScanStart.create = function create(properties) {\n            return new RespScanStart(properties);\n        };\n\n        /**\n         * Encodes the specified RespScanStart message. Does not implicitly {@link espressif.RespScanStart.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.RespScanStart\n         * @static\n         * @param {espressif.RespScanStart} message RespScanStart message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RespScanStart.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RespScanStart message, length delimited. Does not implicitly {@link espressif.RespScanStart.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.RespScanStart\n         * @static\n         * @param {espressif.RespScanStart} message RespScanStart message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RespScanStart.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RespScanStart message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.RespScanStart\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.RespScanStart} RespScanStart\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RespScanStart.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.RespScanStart();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RespScanStart message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.RespScanStart\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.RespScanStart} RespScanStart\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RespScanStart.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RespScanStart message.\n         * @function verify\n         * @memberof espressif.RespScanStart\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RespScanStart.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RespScanStart message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.RespScanStart\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.RespScanStart} RespScanStart\n         */\n        RespScanStart.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.RespScanStart)\n                return object;\n            return new $root.espressif.RespScanStart();\n        };\n\n        /**\n         * Creates a plain object from a RespScanStart message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.RespScanStart\n         * @static\n         * @param {espressif.RespScanStart} message RespScanStart\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RespScanStart.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this RespScanStart to JSON.\n         * @function toJSON\n         * @memberof espressif.RespScanStart\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RespScanStart.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RespScanStart;\n    })();\n\n    espressif.CmdScanStatus = (function() {\n\n        /**\n         * Properties of a CmdScanStatus.\n         * @memberof espressif\n         * @interface ICmdScanStatus\n         */\n\n        /**\n         * Constructs a new CmdScanStatus.\n         * @memberof espressif\n         * @classdesc Represents a CmdScanStatus.\n         * @implements ICmdScanStatus\n         * @constructor\n         * @param {espressif.ICmdScanStatus=} [properties] Properties to set\n         */\n        function CmdScanStatus(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new CmdScanStatus instance using the specified properties.\n         * @function create\n         * @memberof espressif.CmdScanStatus\n         * @static\n         * @param {espressif.ICmdScanStatus=} [properties] Properties to set\n         * @returns {espressif.CmdScanStatus} CmdScanStatus instance\n         */\n        CmdScanStatus.create = function create(properties) {\n            return new CmdScanStatus(properties);\n        };\n\n        /**\n         * Encodes the specified CmdScanStatus message. Does not implicitly {@link espressif.CmdScanStatus.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.CmdScanStatus\n         * @static\n         * @param {espressif.CmdScanStatus} message CmdScanStatus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CmdScanStatus.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CmdScanStatus message, length delimited. Does not implicitly {@link espressif.CmdScanStatus.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.CmdScanStatus\n         * @static\n         * @param {espressif.CmdScanStatus} message CmdScanStatus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CmdScanStatus.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CmdScanStatus message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.CmdScanStatus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.CmdScanStatus} CmdScanStatus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CmdScanStatus.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.CmdScanStatus();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CmdScanStatus message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.CmdScanStatus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.CmdScanStatus} CmdScanStatus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CmdScanStatus.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CmdScanStatus message.\n         * @function verify\n         * @memberof espressif.CmdScanStatus\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CmdScanStatus.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a CmdScanStatus message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.CmdScanStatus\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.CmdScanStatus} CmdScanStatus\n         */\n        CmdScanStatus.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.CmdScanStatus)\n                return object;\n            return new $root.espressif.CmdScanStatus();\n        };\n\n        /**\n         * Creates a plain object from a CmdScanStatus message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.CmdScanStatus\n         * @static\n         * @param {espressif.CmdScanStatus} message CmdScanStatus\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CmdScanStatus.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this CmdScanStatus to JSON.\n         * @function toJSON\n         * @memberof espressif.CmdScanStatus\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CmdScanStatus.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return CmdScanStatus;\n    })();\n\n    espressif.RespScanStatus = (function() {\n\n        /**\n         * Properties of a RespScanStatus.\n         * @memberof espressif\n         * @interface IRespScanStatus\n         * @property {boolean|null} [scanFinished] RespScanStatus scanFinished\n         * @property {number|null} [resultCount] RespScanStatus resultCount\n         */\n\n        /**\n         * Constructs a new RespScanStatus.\n         * @memberof espressif\n         * @classdesc Represents a RespScanStatus.\n         * @implements IRespScanStatus\n         * @constructor\n         * @param {espressif.IRespScanStatus=} [properties] Properties to set\n         */\n        function RespScanStatus(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RespScanStatus scanFinished.\n         * @member {boolean} scanFinished\n         * @memberof espressif.RespScanStatus\n         * @instance\n         */\n        RespScanStatus.prototype.scanFinished = false;\n\n        /**\n         * RespScanStatus resultCount.\n         * @member {number} resultCount\n         * @memberof espressif.RespScanStatus\n         * @instance\n         */\n        RespScanStatus.prototype.resultCount = 0;\n\n        /**\n         * Creates a new RespScanStatus instance using the specified properties.\n         * @function create\n         * @memberof espressif.RespScanStatus\n         * @static\n         * @param {espressif.IRespScanStatus=} [properties] Properties to set\n         * @returns {espressif.RespScanStatus} RespScanStatus instance\n         */\n        RespScanStatus.create = function create(properties) {\n            return new RespScanStatus(properties);\n        };\n\n        /**\n         * Encodes the specified RespScanStatus message. Does not implicitly {@link espressif.RespScanStatus.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.RespScanStatus\n         * @static\n         * @param {espressif.RespScanStatus} message RespScanStatus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RespScanStatus.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.scanFinished != null && Object.hasOwnProperty.call(message, \"scanFinished\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.scanFinished);\n            if (message.resultCount != null && Object.hasOwnProperty.call(message, \"resultCount\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.resultCount);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RespScanStatus message, length delimited. Does not implicitly {@link espressif.RespScanStatus.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.RespScanStatus\n         * @static\n         * @param {espressif.RespScanStatus} message RespScanStatus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RespScanStatus.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RespScanStatus message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.RespScanStatus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.RespScanStatus} RespScanStatus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RespScanStatus.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.RespScanStatus();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.scanFinished = reader.bool();\n                    break;\n                case 2:\n                    message.resultCount = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RespScanStatus message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.RespScanStatus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.RespScanStatus} RespScanStatus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RespScanStatus.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RespScanStatus message.\n         * @function verify\n         * @memberof espressif.RespScanStatus\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RespScanStatus.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.scanFinished != null && message.hasOwnProperty(\"scanFinished\"))\n                if (typeof message.scanFinished !== \"boolean\")\n                    return \"scanFinished: boolean expected\";\n            if (message.resultCount != null && message.hasOwnProperty(\"resultCount\"))\n                if (!$util.isInteger(message.resultCount))\n                    return \"resultCount: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RespScanStatus message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.RespScanStatus\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.RespScanStatus} RespScanStatus\n         */\n        RespScanStatus.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.RespScanStatus)\n                return object;\n            let message = new $root.espressif.RespScanStatus();\n            if (object.scanFinished != null)\n                message.scanFinished = Boolean(object.scanFinished);\n            if (object.resultCount != null)\n                message.resultCount = object.resultCount >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RespScanStatus message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.RespScanStatus\n         * @static\n         * @param {espressif.RespScanStatus} message RespScanStatus\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RespScanStatus.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.scanFinished = false;\n                object.resultCount = 0;\n            }\n            if (message.scanFinished != null && message.hasOwnProperty(\"scanFinished\"))\n                object.scanFinished = message.scanFinished;\n            if (message.resultCount != null && message.hasOwnProperty(\"resultCount\"))\n                object.resultCount = message.resultCount;\n            return object;\n        };\n\n        /**\n         * Converts this RespScanStatus to JSON.\n         * @function toJSON\n         * @memberof espressif.RespScanStatus\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RespScanStatus.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RespScanStatus;\n    })();\n\n    espressif.CmdScanResult = (function() {\n\n        /**\n         * Properties of a CmdScanResult.\n         * @memberof espressif\n         * @interface ICmdScanResult\n         * @property {number|null} [startIndex] CmdScanResult startIndex\n         * @property {number|null} [count] CmdScanResult count\n         */\n\n        /**\n         * Constructs a new CmdScanResult.\n         * @memberof espressif\n         * @classdesc Represents a CmdScanResult.\n         * @implements ICmdScanResult\n         * @constructor\n         * @param {espressif.ICmdScanResult=} [properties] Properties to set\n         */\n        function CmdScanResult(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CmdScanResult startIndex.\n         * @member {number} startIndex\n         * @memberof espressif.CmdScanResult\n         * @instance\n         */\n        CmdScanResult.prototype.startIndex = 0;\n\n        /**\n         * CmdScanResult count.\n         * @member {number} count\n         * @memberof espressif.CmdScanResult\n         * @instance\n         */\n        CmdScanResult.prototype.count = 0;\n\n        /**\n         * Creates a new CmdScanResult instance using the specified properties.\n         * @function create\n         * @memberof espressif.CmdScanResult\n         * @static\n         * @param {espressif.ICmdScanResult=} [properties] Properties to set\n         * @returns {espressif.CmdScanResult} CmdScanResult instance\n         */\n        CmdScanResult.create = function create(properties) {\n            return new CmdScanResult(properties);\n        };\n\n        /**\n         * Encodes the specified CmdScanResult message. Does not implicitly {@link espressif.CmdScanResult.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.CmdScanResult\n         * @static\n         * @param {espressif.CmdScanResult} message CmdScanResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CmdScanResult.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.startIndex != null && Object.hasOwnProperty.call(message, \"startIndex\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.startIndex);\n            if (message.count != null && Object.hasOwnProperty.call(message, \"count\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.count);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CmdScanResult message, length delimited. Does not implicitly {@link espressif.CmdScanResult.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.CmdScanResult\n         * @static\n         * @param {espressif.CmdScanResult} message CmdScanResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CmdScanResult.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CmdScanResult message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.CmdScanResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.CmdScanResult} CmdScanResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CmdScanResult.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.CmdScanResult();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.startIndex = reader.uint32();\n                    break;\n                case 2:\n                    message.count = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CmdScanResult message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.CmdScanResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.CmdScanResult} CmdScanResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CmdScanResult.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CmdScanResult message.\n         * @function verify\n         * @memberof espressif.CmdScanResult\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CmdScanResult.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.startIndex != null && message.hasOwnProperty(\"startIndex\"))\n                if (!$util.isInteger(message.startIndex))\n                    return \"startIndex: integer expected\";\n            if (message.count != null && message.hasOwnProperty(\"count\"))\n                if (!$util.isInteger(message.count))\n                    return \"count: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a CmdScanResult message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.CmdScanResult\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.CmdScanResult} CmdScanResult\n         */\n        CmdScanResult.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.CmdScanResult)\n                return object;\n            let message = new $root.espressif.CmdScanResult();\n            if (object.startIndex != null)\n                message.startIndex = object.startIndex >>> 0;\n            if (object.count != null)\n                message.count = object.count >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CmdScanResult message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.CmdScanResult\n         * @static\n         * @param {espressif.CmdScanResult} message CmdScanResult\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CmdScanResult.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.startIndex = 0;\n                object.count = 0;\n            }\n            if (message.startIndex != null && message.hasOwnProperty(\"startIndex\"))\n                object.startIndex = message.startIndex;\n            if (message.count != null && message.hasOwnProperty(\"count\"))\n                object.count = message.count;\n            return object;\n        };\n\n        /**\n         * Converts this CmdScanResult to JSON.\n         * @function toJSON\n         * @memberof espressif.CmdScanResult\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CmdScanResult.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return CmdScanResult;\n    })();\n\n    espressif.WiFiScanResult = (function() {\n\n        /**\n         * Properties of a WiFiScanResult.\n         * @memberof espressif\n         * @interface IWiFiScanResult\n         * @property {Uint8Array|null} [ssid] WiFiScanResult ssid\n         * @property {number|null} [channel] WiFiScanResult channel\n         * @property {number|null} [rssi] WiFiScanResult rssi\n         * @property {Uint8Array|null} [bssid] WiFiScanResult bssid\n         * @property {espressif.WifiAuthMode|null} [auth] WiFiScanResult auth\n         */\n\n        /**\n         * Constructs a new WiFiScanResult.\n         * @memberof espressif\n         * @classdesc Represents a WiFiScanResult.\n         * @implements IWiFiScanResult\n         * @constructor\n         * @param {espressif.IWiFiScanResult=} [properties] Properties to set\n         */\n        function WiFiScanResult(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * WiFiScanResult ssid.\n         * @member {Uint8Array} ssid\n         * @memberof espressif.WiFiScanResult\n         * @instance\n         */\n        WiFiScanResult.prototype.ssid = $util.newBuffer([]);\n\n        /**\n         * WiFiScanResult channel.\n         * @member {number} channel\n         * @memberof espressif.WiFiScanResult\n         * @instance\n         */\n        WiFiScanResult.prototype.channel = 0;\n\n        /**\n         * WiFiScanResult rssi.\n         * @member {number} rssi\n         * @memberof espressif.WiFiScanResult\n         * @instance\n         */\n        WiFiScanResult.prototype.rssi = 0;\n\n        /**\n         * WiFiScanResult bssid.\n         * @member {Uint8Array} bssid\n         * @memberof espressif.WiFiScanResult\n         * @instance\n         */\n        WiFiScanResult.prototype.bssid = $util.newBuffer([]);\n\n        /**\n         * WiFiScanResult auth.\n         * @member {espressif.WifiAuthMode} auth\n         * @memberof espressif.WiFiScanResult\n         * @instance\n         */\n        WiFiScanResult.prototype.auth = 0;\n\n        /**\n         * Creates a new WiFiScanResult instance using the specified properties.\n         * @function create\n         * @memberof espressif.WiFiScanResult\n         * @static\n         * @param {espressif.IWiFiScanResult=} [properties] Properties to set\n         * @returns {espressif.WiFiScanResult} WiFiScanResult instance\n         */\n        WiFiScanResult.create = function create(properties) {\n            return new WiFiScanResult(properties);\n        };\n\n        /**\n         * Encodes the specified WiFiScanResult message. Does not implicitly {@link espressif.WiFiScanResult.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.WiFiScanResult\n         * @static\n         * @param {espressif.WiFiScanResult} message WiFiScanResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WiFiScanResult.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.ssid != null && Object.hasOwnProperty.call(message, \"ssid\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.ssid);\n            if (message.channel != null && Object.hasOwnProperty.call(message, \"channel\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.channel);\n            if (message.rssi != null && Object.hasOwnProperty.call(message, \"rssi\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.rssi);\n            if (message.bssid != null && Object.hasOwnProperty.call(message, \"bssid\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.bssid);\n            if (message.auth != null && Object.hasOwnProperty.call(message, \"auth\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.auth);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified WiFiScanResult message, length delimited. Does not implicitly {@link espressif.WiFiScanResult.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.WiFiScanResult\n         * @static\n         * @param {espressif.WiFiScanResult} message WiFiScanResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WiFiScanResult.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a WiFiScanResult message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.WiFiScanResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.WiFiScanResult} WiFiScanResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WiFiScanResult.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.WiFiScanResult();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.ssid = reader.bytes();\n                    break;\n                case 2:\n                    message.channel = reader.uint32();\n                    break;\n                case 3:\n                    message.rssi = reader.int32();\n                    break;\n                case 4:\n                    message.bssid = reader.bytes();\n                    break;\n                case 5:\n                    message.auth = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a WiFiScanResult message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.WiFiScanResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.WiFiScanResult} WiFiScanResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WiFiScanResult.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a WiFiScanResult message.\n         * @function verify\n         * @memberof espressif.WiFiScanResult\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        WiFiScanResult.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.ssid != null && message.hasOwnProperty(\"ssid\"))\n                if (!(message.ssid && typeof message.ssid.length === \"number\" || $util.isString(message.ssid)))\n                    return \"ssid: buffer expected\";\n            if (message.channel != null && message.hasOwnProperty(\"channel\"))\n                if (!$util.isInteger(message.channel))\n                    return \"channel: integer expected\";\n            if (message.rssi != null && message.hasOwnProperty(\"rssi\"))\n                if (!$util.isInteger(message.rssi))\n                    return \"rssi: integer expected\";\n            if (message.bssid != null && message.hasOwnProperty(\"bssid\"))\n                if (!(message.bssid && typeof message.bssid.length === \"number\" || $util.isString(message.bssid)))\n                    return \"bssid: buffer expected\";\n            if (message.auth != null && message.hasOwnProperty(\"auth\"))\n                switch (message.auth) {\n                default:\n                    return \"auth: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a WiFiScanResult message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.WiFiScanResult\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.WiFiScanResult} WiFiScanResult\n         */\n        WiFiScanResult.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.WiFiScanResult)\n                return object;\n            let message = new $root.espressif.WiFiScanResult();\n            if (object.ssid != null)\n                if (typeof object.ssid === \"string\")\n                    $util.base64.decode(object.ssid, message.ssid = $util.newBuffer($util.base64.length(object.ssid)), 0);\n                else if (object.ssid.length)\n                    message.ssid = object.ssid;\n            if (object.channel != null)\n                message.channel = object.channel >>> 0;\n            if (object.rssi != null)\n                message.rssi = object.rssi | 0;\n            if (object.bssid != null)\n                if (typeof object.bssid === \"string\")\n                    $util.base64.decode(object.bssid, message.bssid = $util.newBuffer($util.base64.length(object.bssid)), 0);\n                else if (object.bssid.length)\n                    message.bssid = object.bssid;\n            switch (object.auth) {\n            case \"Open\":\n            case 0:\n                message.auth = 0;\n                break;\n            case \"WEP\":\n            case 1:\n                message.auth = 1;\n                break;\n            case \"WPA_PSK\":\n            case 2:\n                message.auth = 2;\n                break;\n            case \"WPA2_PSK\":\n            case 3:\n                message.auth = 3;\n                break;\n            case \"WPA_WPA2_PSK\":\n            case 4:\n                message.auth = 4;\n                break;\n            case \"WPA2_ENTERPRISE\":\n            case 5:\n                message.auth = 5;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a WiFiScanResult message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.WiFiScanResult\n         * @static\n         * @param {espressif.WiFiScanResult} message WiFiScanResult\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        WiFiScanResult.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.ssid = \"\";\n                else {\n                    object.ssid = [];\n                    if (options.bytes !== Array)\n                        object.ssid = $util.newBuffer(object.ssid);\n                }\n                object.channel = 0;\n                object.rssi = 0;\n                if (options.bytes === String)\n                    object.bssid = \"\";\n                else {\n                    object.bssid = [];\n                    if (options.bytes !== Array)\n                        object.bssid = $util.newBuffer(object.bssid);\n                }\n                object.auth = options.enums === String ? \"Open\" : 0;\n            }\n            if (message.ssid != null && message.hasOwnProperty(\"ssid\"))\n                object.ssid = options.bytes === String ? $util.base64.encode(message.ssid, 0, message.ssid.length) : options.bytes === Array ? Array.prototype.slice.call(message.ssid) : message.ssid;\n            if (message.channel != null && message.hasOwnProperty(\"channel\"))\n                object.channel = message.channel;\n            if (message.rssi != null && message.hasOwnProperty(\"rssi\"))\n                object.rssi = message.rssi;\n            if (message.bssid != null && message.hasOwnProperty(\"bssid\"))\n                object.bssid = options.bytes === String ? $util.base64.encode(message.bssid, 0, message.bssid.length) : options.bytes === Array ? Array.prototype.slice.call(message.bssid) : message.bssid;\n            if (message.auth != null && message.hasOwnProperty(\"auth\"))\n                object.auth = options.enums === String ? $root.espressif.WifiAuthMode[message.auth] : message.auth;\n            return object;\n        };\n\n        /**\n         * Converts this WiFiScanResult to JSON.\n         * @function toJSON\n         * @memberof espressif.WiFiScanResult\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        WiFiScanResult.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return WiFiScanResult;\n    })();\n\n    espressif.RespScanResult = (function() {\n\n        /**\n         * Properties of a RespScanResult.\n         * @memberof espressif\n         * @interface IRespScanResult\n         * @property {Array.<espressif.WiFiScanResult>|null} [entries] RespScanResult entries\n         */\n\n        /**\n         * Constructs a new RespScanResult.\n         * @memberof espressif\n         * @classdesc Represents a RespScanResult.\n         * @implements IRespScanResult\n         * @constructor\n         * @param {espressif.IRespScanResult=} [properties] Properties to set\n         */\n        function RespScanResult(properties) {\n            this.entries = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RespScanResult entries.\n         * @member {Array.<espressif.WiFiScanResult>} entries\n         * @memberof espressif.RespScanResult\n         * @instance\n         */\n        RespScanResult.prototype.entries = $util.emptyArray;\n\n        /**\n         * Creates a new RespScanResult instance using the specified properties.\n         * @function create\n         * @memberof espressif.RespScanResult\n         * @static\n         * @param {espressif.IRespScanResult=} [properties] Properties to set\n         * @returns {espressif.RespScanResult} RespScanResult instance\n         */\n        RespScanResult.create = function create(properties) {\n            return new RespScanResult(properties);\n        };\n\n        /**\n         * Encodes the specified RespScanResult message. Does not implicitly {@link espressif.RespScanResult.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.RespScanResult\n         * @static\n         * @param {espressif.RespScanResult} message RespScanResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RespScanResult.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.entries != null && message.entries.length)\n                for (let i = 0; i < message.entries.length; ++i)\n                    $root.espressif.WiFiScanResult.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RespScanResult message, length delimited. Does not implicitly {@link espressif.RespScanResult.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.RespScanResult\n         * @static\n         * @param {espressif.RespScanResult} message RespScanResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RespScanResult.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RespScanResult message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.RespScanResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.RespScanResult} RespScanResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RespScanResult.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.RespScanResult();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.entries && message.entries.length))\n                        message.entries = [];\n                    message.entries.push($root.espressif.WiFiScanResult.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RespScanResult message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.RespScanResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.RespScanResult} RespScanResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RespScanResult.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RespScanResult message.\n         * @function verify\n         * @memberof espressif.RespScanResult\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RespScanResult.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.entries != null && message.hasOwnProperty(\"entries\")) {\n                if (!Array.isArray(message.entries))\n                    return \"entries: array expected\";\n                for (let i = 0; i < message.entries.length; ++i) {\n                    let error = $root.espressif.WiFiScanResult.verify(message.entries[i]);\n                    if (error)\n                        return \"entries.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a RespScanResult message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.RespScanResult\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.RespScanResult} RespScanResult\n         */\n        RespScanResult.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.RespScanResult)\n                return object;\n            let message = new $root.espressif.RespScanResult();\n            if (object.entries) {\n                if (!Array.isArray(object.entries))\n                    throw TypeError(\".espressif.RespScanResult.entries: array expected\");\n                message.entries = [];\n                for (let i = 0; i < object.entries.length; ++i) {\n                    if (typeof object.entries[i] !== \"object\")\n                        throw TypeError(\".espressif.RespScanResult.entries: object expected\");\n                    message.entries[i] = $root.espressif.WiFiScanResult.fromObject(object.entries[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RespScanResult message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.RespScanResult\n         * @static\n         * @param {espressif.RespScanResult} message RespScanResult\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RespScanResult.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.entries = [];\n            if (message.entries && message.entries.length) {\n                object.entries = [];\n                for (let j = 0; j < message.entries.length; ++j)\n                    object.entries[j] = $root.espressif.WiFiScanResult.toObject(message.entries[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this RespScanResult to JSON.\n         * @function toJSON\n         * @memberof espressif.RespScanResult\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RespScanResult.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RespScanResult;\n    })();\n\n    /**\n     * WiFiScanMsgType enum.\n     * @name espressif.WiFiScanMsgType\n     * @enum {number}\n     * @property {number} TypeCmdScanStart=0 TypeCmdScanStart value\n     * @property {number} TypeRespScanStart=1 TypeRespScanStart value\n     * @property {number} TypeCmdScanStatus=2 TypeCmdScanStatus value\n     * @property {number} TypeRespScanStatus=3 TypeRespScanStatus value\n     * @property {number} TypeCmdScanResult=4 TypeCmdScanResult value\n     * @property {number} TypeRespScanResult=5 TypeRespScanResult value\n     */\n    espressif.WiFiScanMsgType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"TypeCmdScanStart\"] = 0;\n        values[valuesById[1] = \"TypeRespScanStart\"] = 1;\n        values[valuesById[2] = \"TypeCmdScanStatus\"] = 2;\n        values[valuesById[3] = \"TypeRespScanStatus\"] = 3;\n        values[valuesById[4] = \"TypeCmdScanResult\"] = 4;\n        values[valuesById[5] = \"TypeRespScanResult\"] = 5;\n        return values;\n    })();\n\n    espressif.WiFiScanPayload = (function() {\n\n        /**\n         * Properties of a WiFiScanPayload.\n         * @memberof espressif\n         * @interface IWiFiScanPayload\n         * @property {espressif.WiFiScanMsgType|null} [msg] WiFiScanPayload msg\n         * @property {espressif.Status|null} [status] WiFiScanPayload status\n         * @property {espressif.CmdScanStart|null} [cmdScanStart] WiFiScanPayload cmdScanStart\n         * @property {espressif.RespScanStart|null} [respScanStart] WiFiScanPayload respScanStart\n         * @property {espressif.CmdScanStatus|null} [cmdScanStatus] WiFiScanPayload cmdScanStatus\n         * @property {espressif.RespScanStatus|null} [respScanStatus] WiFiScanPayload respScanStatus\n         * @property {espressif.CmdScanResult|null} [cmdScanResult] WiFiScanPayload cmdScanResult\n         * @property {espressif.RespScanResult|null} [respScanResult] WiFiScanPayload respScanResult\n         */\n\n        /**\n         * Constructs a new WiFiScanPayload.\n         * @memberof espressif\n         * @classdesc Represents a WiFiScanPayload.\n         * @implements IWiFiScanPayload\n         * @constructor\n         * @param {espressif.IWiFiScanPayload=} [properties] Properties to set\n         */\n        function WiFiScanPayload(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * WiFiScanPayload msg.\n         * @member {espressif.WiFiScanMsgType} msg\n         * @memberof espressif.WiFiScanPayload\n         * @instance\n         */\n        WiFiScanPayload.prototype.msg = 0;\n\n        /**\n         * WiFiScanPayload status.\n         * @member {espressif.Status} status\n         * @memberof espressif.WiFiScanPayload\n         * @instance\n         */\n        WiFiScanPayload.prototype.status = 0;\n\n        /**\n         * WiFiScanPayload cmdScanStart.\n         * @member {espressif.CmdScanStart|null|undefined} cmdScanStart\n         * @memberof espressif.WiFiScanPayload\n         * @instance\n         */\n        WiFiScanPayload.prototype.cmdScanStart = null;\n\n        /**\n         * WiFiScanPayload respScanStart.\n         * @member {espressif.RespScanStart|null|undefined} respScanStart\n         * @memberof espressif.WiFiScanPayload\n         * @instance\n         */\n        WiFiScanPayload.prototype.respScanStart = null;\n\n        /**\n         * WiFiScanPayload cmdScanStatus.\n         * @member {espressif.CmdScanStatus|null|undefined} cmdScanStatus\n         * @memberof espressif.WiFiScanPayload\n         * @instance\n         */\n        WiFiScanPayload.prototype.cmdScanStatus = null;\n\n        /**\n         * WiFiScanPayload respScanStatus.\n         * @member {espressif.RespScanStatus|null|undefined} respScanStatus\n         * @memberof espressif.WiFiScanPayload\n         * @instance\n         */\n        WiFiScanPayload.prototype.respScanStatus = null;\n\n        /**\n         * WiFiScanPayload cmdScanResult.\n         * @member {espressif.CmdScanResult|null|undefined} cmdScanResult\n         * @memberof espressif.WiFiScanPayload\n         * @instance\n         */\n        WiFiScanPayload.prototype.cmdScanResult = null;\n\n        /**\n         * WiFiScanPayload respScanResult.\n         * @member {espressif.RespScanResult|null|undefined} respScanResult\n         * @memberof espressif.WiFiScanPayload\n         * @instance\n         */\n        WiFiScanPayload.prototype.respScanResult = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * WiFiScanPayload payload.\n         * @member {\"cmdScanStart\"|\"respScanStart\"|\"cmdScanStatus\"|\"respScanStatus\"|\"cmdScanResult\"|\"respScanResult\"|undefined} payload\n         * @memberof espressif.WiFiScanPayload\n         * @instance\n         */\n        Object.defineProperty(WiFiScanPayload.prototype, \"payload\", {\n            get: $util.oneOfGetter($oneOfFields = [\"cmdScanStart\", \"respScanStart\", \"cmdScanStatus\", \"respScanStatus\", \"cmdScanResult\", \"respScanResult\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new WiFiScanPayload instance using the specified properties.\n         * @function create\n         * @memberof espressif.WiFiScanPayload\n         * @static\n         * @param {espressif.IWiFiScanPayload=} [properties] Properties to set\n         * @returns {espressif.WiFiScanPayload} WiFiScanPayload instance\n         */\n        WiFiScanPayload.create = function create(properties) {\n            return new WiFiScanPayload(properties);\n        };\n\n        /**\n         * Encodes the specified WiFiScanPayload message. Does not implicitly {@link espressif.WiFiScanPayload.verify|verify} messages.\n         * @function encode\n         * @memberof espressif.WiFiScanPayload\n         * @static\n         * @param {espressif.WiFiScanPayload} message WiFiScanPayload message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WiFiScanPayload.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.msg != null && Object.hasOwnProperty.call(message, \"msg\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.msg);\n            if (message.status != null && Object.hasOwnProperty.call(message, \"status\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.status);\n            if (message.cmdScanStart != null && Object.hasOwnProperty.call(message, \"cmdScanStart\"))\n                $root.espressif.CmdScanStart.encode(message.cmdScanStart, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.respScanStart != null && Object.hasOwnProperty.call(message, \"respScanStart\"))\n                $root.espressif.RespScanStart.encode(message.respScanStart, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.cmdScanStatus != null && Object.hasOwnProperty.call(message, \"cmdScanStatus\"))\n                $root.espressif.CmdScanStatus.encode(message.cmdScanStatus, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.respScanStatus != null && Object.hasOwnProperty.call(message, \"respScanStatus\"))\n                $root.espressif.RespScanStatus.encode(message.respScanStatus, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.cmdScanResult != null && Object.hasOwnProperty.call(message, \"cmdScanResult\"))\n                $root.espressif.CmdScanResult.encode(message.cmdScanResult, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.respScanResult != null && Object.hasOwnProperty.call(message, \"respScanResult\"))\n                $root.espressif.RespScanResult.encode(message.respScanResult, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified WiFiScanPayload message, length delimited. Does not implicitly {@link espressif.WiFiScanPayload.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof espressif.WiFiScanPayload\n         * @static\n         * @param {espressif.WiFiScanPayload} message WiFiScanPayload message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WiFiScanPayload.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a WiFiScanPayload message from the specified reader or buffer.\n         * @function decode\n         * @memberof espressif.WiFiScanPayload\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {espressif.WiFiScanPayload} WiFiScanPayload\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WiFiScanPayload.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.espressif.WiFiScanPayload();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.msg = reader.int32();\n                    break;\n                case 2:\n                    message.status = reader.int32();\n                    break;\n                case 10:\n                    message.cmdScanStart = $root.espressif.CmdScanStart.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.respScanStart = $root.espressif.RespScanStart.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.cmdScanStatus = $root.espressif.CmdScanStatus.decode(reader, reader.uint32());\n                    break;\n                case 13:\n                    message.respScanStatus = $root.espressif.RespScanStatus.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    message.cmdScanResult = $root.espressif.CmdScanResult.decode(reader, reader.uint32());\n                    break;\n                case 15:\n                    message.respScanResult = $root.espressif.RespScanResult.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a WiFiScanPayload message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof espressif.WiFiScanPayload\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {espressif.WiFiScanPayload} WiFiScanPayload\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WiFiScanPayload.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a WiFiScanPayload message.\n         * @function verify\n         * @memberof espressif.WiFiScanPayload\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        WiFiScanPayload.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.msg != null && message.hasOwnProperty(\"msg\"))\n                switch (message.msg) {\n                default:\n                    return \"msg: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                    break;\n                }\n            if (message.status != null && message.hasOwnProperty(\"status\"))\n                switch (message.status) {\n                default:\n                    return \"status: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                    break;\n                }\n            if (message.cmdScanStart != null && message.hasOwnProperty(\"cmdScanStart\")) {\n                properties.payload = 1;\n                {\n                    let error = $root.espressif.CmdScanStart.verify(message.cmdScanStart);\n                    if (error)\n                        return \"cmdScanStart.\" + error;\n                }\n            }\n            if (message.respScanStart != null && message.hasOwnProperty(\"respScanStart\")) {\n                if (properties.payload === 1)\n                    return \"payload: multiple values\";\n                properties.payload = 1;\n                {\n                    let error = $root.espressif.RespScanStart.verify(message.respScanStart);\n                    if (error)\n                        return \"respScanStart.\" + error;\n                }\n            }\n            if (message.cmdScanStatus != null && message.hasOwnProperty(\"cmdScanStatus\")) {\n                if (properties.payload === 1)\n                    return \"payload: multiple values\";\n                properties.payload = 1;\n                {\n                    let error = $root.espressif.CmdScanStatus.verify(message.cmdScanStatus);\n                    if (error)\n                        return \"cmdScanStatus.\" + error;\n                }\n            }\n            if (message.respScanStatus != null && message.hasOwnProperty(\"respScanStatus\")) {\n                if (properties.payload === 1)\n                    return \"payload: multiple values\";\n                properties.payload = 1;\n                {\n                    let error = $root.espressif.RespScanStatus.verify(message.respScanStatus);\n                    if (error)\n                        return \"respScanStatus.\" + error;\n                }\n            }\n            if (message.cmdScanResult != null && message.hasOwnProperty(\"cmdScanResult\")) {\n                if (properties.payload === 1)\n                    return \"payload: multiple values\";\n                properties.payload = 1;\n                {\n                    let error = $root.espressif.CmdScanResult.verify(message.cmdScanResult);\n                    if (error)\n                        return \"cmdScanResult.\" + error;\n                }\n            }\n            if (message.respScanResult != null && message.hasOwnProperty(\"respScanResult\")) {\n                if (properties.payload === 1)\n                    return \"payload: multiple values\";\n                properties.payload = 1;\n                {\n                    let error = $root.espressif.RespScanResult.verify(message.respScanResult);\n                    if (error)\n                        return \"respScanResult.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a WiFiScanPayload message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof espressif.WiFiScanPayload\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {espressif.WiFiScanPayload} WiFiScanPayload\n         */\n        WiFiScanPayload.fromObject = function fromObject(object) {\n            if (object instanceof $root.espressif.WiFiScanPayload)\n                return object;\n            let message = new $root.espressif.WiFiScanPayload();\n            switch (object.msg) {\n            case \"TypeCmdScanStart\":\n            case 0:\n                message.msg = 0;\n                break;\n            case \"TypeRespScanStart\":\n            case 1:\n                message.msg = 1;\n                break;\n            case \"TypeCmdScanStatus\":\n            case 2:\n                message.msg = 2;\n                break;\n            case \"TypeRespScanStatus\":\n            case 3:\n                message.msg = 3;\n                break;\n            case \"TypeCmdScanResult\":\n            case 4:\n                message.msg = 4;\n                break;\n            case \"TypeRespScanResult\":\n            case 5:\n                message.msg = 5;\n                break;\n            }\n            switch (object.status) {\n            case \"Success\":\n            case 0:\n                message.status = 0;\n                break;\n            case \"InvalidSecScheme\":\n            case 1:\n                message.status = 1;\n                break;\n            case \"InvalidProto\":\n            case 2:\n                message.status = 2;\n                break;\n            case \"TooManySessions\":\n            case 3:\n                message.status = 3;\n                break;\n            case \"InvalidArgument\":\n            case 4:\n                message.status = 4;\n                break;\n            case \"InternalError\":\n            case 5:\n                message.status = 5;\n                break;\n            case \"CryptoError\":\n            case 6:\n                message.status = 6;\n                break;\n            case \"InvalidSession\":\n            case 7:\n                message.status = 7;\n                break;\n            }\n            if (object.cmdScanStart != null) {\n                if (typeof object.cmdScanStart !== \"object\")\n                    throw TypeError(\".espressif.WiFiScanPayload.cmdScanStart: object expected\");\n                message.cmdScanStart = $root.espressif.CmdScanStart.fromObject(object.cmdScanStart);\n            }\n            if (object.respScanStart != null) {\n                if (typeof object.respScanStart !== \"object\")\n                    throw TypeError(\".espressif.WiFiScanPayload.respScanStart: object expected\");\n                message.respScanStart = $root.espressif.RespScanStart.fromObject(object.respScanStart);\n            }\n            if (object.cmdScanStatus != null) {\n                if (typeof object.cmdScanStatus !== \"object\")\n                    throw TypeError(\".espressif.WiFiScanPayload.cmdScanStatus: object expected\");\n                message.cmdScanStatus = $root.espressif.CmdScanStatus.fromObject(object.cmdScanStatus);\n            }\n            if (object.respScanStatus != null) {\n                if (typeof object.respScanStatus !== \"object\")\n                    throw TypeError(\".espressif.WiFiScanPayload.respScanStatus: object expected\");\n                message.respScanStatus = $root.espressif.RespScanStatus.fromObject(object.respScanStatus);\n            }\n            if (object.cmdScanResult != null) {\n                if (typeof object.cmdScanResult !== \"object\")\n                    throw TypeError(\".espressif.WiFiScanPayload.cmdScanResult: object expected\");\n                message.cmdScanResult = $root.espressif.CmdScanResult.fromObject(object.cmdScanResult);\n            }\n            if (object.respScanResult != null) {\n                if (typeof object.respScanResult !== \"object\")\n                    throw TypeError(\".espressif.WiFiScanPayload.respScanResult: object expected\");\n                message.respScanResult = $root.espressif.RespScanResult.fromObject(object.respScanResult);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a WiFiScanPayload message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof espressif.WiFiScanPayload\n         * @static\n         * @param {espressif.WiFiScanPayload} message WiFiScanPayload\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        WiFiScanPayload.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.msg = options.enums === String ? \"TypeCmdScanStart\" : 0;\n                object.status = options.enums === String ? \"Success\" : 0;\n            }\n            if (message.msg != null && message.hasOwnProperty(\"msg\"))\n                object.msg = options.enums === String ? $root.espressif.WiFiScanMsgType[message.msg] : message.msg;\n            if (message.status != null && message.hasOwnProperty(\"status\"))\n                object.status = options.enums === String ? $root.espressif.Status[message.status] : message.status;\n            if (message.cmdScanStart != null && message.hasOwnProperty(\"cmdScanStart\")) {\n                object.cmdScanStart = $root.espressif.CmdScanStart.toObject(message.cmdScanStart, options);\n                if (options.oneofs)\n                    object.payload = \"cmdScanStart\";\n            }\n            if (message.respScanStart != null && message.hasOwnProperty(\"respScanStart\")) {\n                object.respScanStart = $root.espressif.RespScanStart.toObject(message.respScanStart, options);\n                if (options.oneofs)\n                    object.payload = \"respScanStart\";\n            }\n            if (message.cmdScanStatus != null && message.hasOwnProperty(\"cmdScanStatus\")) {\n                object.cmdScanStatus = $root.espressif.CmdScanStatus.toObject(message.cmdScanStatus, options);\n                if (options.oneofs)\n                    object.payload = \"cmdScanStatus\";\n            }\n            if (message.respScanStatus != null && message.hasOwnProperty(\"respScanStatus\")) {\n                object.respScanStatus = $root.espressif.RespScanStatus.toObject(message.respScanStatus, options);\n                if (options.oneofs)\n                    object.payload = \"respScanStatus\";\n            }\n            if (message.cmdScanResult != null && message.hasOwnProperty(\"cmdScanResult\")) {\n                object.cmdScanResult = $root.espressif.CmdScanResult.toObject(message.cmdScanResult, options);\n                if (options.oneofs)\n                    object.payload = \"cmdScanResult\";\n            }\n            if (message.respScanResult != null && message.hasOwnProperty(\"respScanResult\")) {\n                object.respScanResult = $root.espressif.RespScanResult.toObject(message.respScanResult, options);\n                if (options.oneofs)\n                    object.payload = \"respScanResult\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this WiFiScanPayload to JSON.\n         * @function toJSON\n         * @memberof espressif.WiFiScanPayload\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        WiFiScanPayload.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return WiFiScanPayload;\n    })();\n\n    return espressif;\n})();\n\nconst hdyRpc = $root.hdyRpc = (() => {\n\n    /**\n     * Namespace hdyRpc.\n     * @exports hdyRpc\n     * @namespace\n     */\n    const hdyRpc = {};\n\n    /**\n     * ResultCodes enum.\n     * @name hdyRpc.ResultCodes\n     * @enum {number}\n     * @property {number} RESULT_UNKNOWN=0 RESULT_UNKNOWN value\n     * @property {number} RESULT_OK=1 RESULT_OK value\n     * @property {number} RESULT_OK_ALREADY_SET=2 RESULT_OK_ALREADY_SET value\n     * @property {number} RESULT_ERR_GENERIC=-1 RESULT_ERR_GENERIC value\n     * @property {number} RESULT_ERR_NO_MEMORY=-2 RESULT_ERR_NO_MEMORY value\n     * @property {number} RESULT_ERR_INVALID_ARG=-3 RESULT_ERR_INVALID_ARG value\n     * @property {number} RESULT_ERR_INVALID_STATE=-4 RESULT_ERR_INVALID_STATE value\n     * @property {number} RESULT_ERR_INVALID_SIZE=-5 RESULT_ERR_INVALID_SIZE value\n     * @property {number} RESULT_ERR_NOT_FOUND=-6 RESULT_ERR_NOT_FOUND value\n     * @property {number} RESULT_ERR_NOT_SUPPORTED=-7 RESULT_ERR_NOT_SUPPORTED value\n     * @property {number} RESULT_ERR_TIMEOUT=-8 RESULT_ERR_TIMEOUT value\n     * @property {number} RESULT_ERR_INVALID_RESPONSE=-9 RESULT_ERR_INVALID_RESPONSE value\n     */\n    hdyRpc.ResultCodes = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"RESULT_UNKNOWN\"] = 0;\n        values[valuesById[1] = \"RESULT_OK\"] = 1;\n        values[valuesById[2] = \"RESULT_OK_ALREADY_SET\"] = 2;\n        values[valuesById[-1] = \"RESULT_ERR_GENERIC\"] = -1;\n        values[valuesById[-2] = \"RESULT_ERR_NO_MEMORY\"] = -2;\n        values[valuesById[-3] = \"RESULT_ERR_INVALID_ARG\"] = -3;\n        values[valuesById[-4] = \"RESULT_ERR_INVALID_STATE\"] = -4;\n        values[valuesById[-5] = \"RESULT_ERR_INVALID_SIZE\"] = -5;\n        values[valuesById[-6] = \"RESULT_ERR_NOT_FOUND\"] = -6;\n        values[valuesById[-7] = \"RESULT_ERR_NOT_SUPPORTED\"] = -7;\n        values[valuesById[-8] = \"RESULT_ERR_TIMEOUT\"] = -8;\n        values[valuesById[-9] = \"RESULT_ERR_INVALID_RESPONSE\"] = -9;\n        return values;\n    })();\n\n    /**\n     * Modes enum.\n     * @name hdyRpc.Modes\n     * @enum {number}\n     * @property {number} MODE_HAMP=0 MODE_HAMP value\n     * @property {number} MODE_HDSP=1 MODE_HDSP value\n     * @property {number} MODE_HSSP=2 MODE_HSSP value\n     * @property {number} MODE_MAINTENANCE=3 MODE_MAINTENANCE value\n     */\n    hdyRpc.Modes = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"MODE_HAMP\"] = 0;\n        values[valuesById[1] = \"MODE_HDSP\"] = 1;\n        values[valuesById[2] = \"MODE_HSSP\"] = 2;\n        values[valuesById[3] = \"MODE_MAINTENANCE\"] = 3;\n        return values;\n    })();\n\n    /**\n     * HampStates enum.\n     * @name hdyRpc.HampStates\n     * @enum {number}\n     * @property {number} HAMP_STATE_STOPPED=0 HAMP_STATE_STOPPED value\n     * @property {number} HAMP_STATE_RUNNING=1 HAMP_STATE_RUNNING value\n     */\n    hdyRpc.HampStates = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"HAMP_STATE_STOPPED\"] = 0;\n        values[valuesById[1] = \"HAMP_STATE_RUNNING\"] = 1;\n        return values;\n    })();\n\n    hdyRpc.RequestCmdGetServerTime = (function() {\n\n        /**\n         * Properties of a RequestCmdGetServerTime.\n         * @memberof hdyRpc\n         * @interface IRequestCmdGetServerTime\n         */\n\n        /**\n         * Constructs a new RequestCmdGetServerTime.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdGetServerTime.\n         * @implements IRequestCmdGetServerTime\n         * @constructor\n         * @param {hdyRpc.IRequestCmdGetServerTime=} [properties] Properties to set\n         */\n        function RequestCmdGetServerTime(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new RequestCmdGetServerTime instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdGetServerTime\n         * @static\n         * @param {hdyRpc.IRequestCmdGetServerTime=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdGetServerTime} RequestCmdGetServerTime instance\n         */\n        RequestCmdGetServerTime.create = function create(properties) {\n            return new RequestCmdGetServerTime(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdGetServerTime message. Does not implicitly {@link hdyRpc.RequestCmdGetServerTime.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdGetServerTime\n         * @static\n         * @param {hdyRpc.RequestCmdGetServerTime} message RequestCmdGetServerTime message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdGetServerTime.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdGetServerTime message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdGetServerTime.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdGetServerTime\n         * @static\n         * @param {hdyRpc.RequestCmdGetServerTime} message RequestCmdGetServerTime message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdGetServerTime.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdGetServerTime message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdGetServerTime\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdGetServerTime} RequestCmdGetServerTime\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdGetServerTime.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdGetServerTime();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdGetServerTime message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdGetServerTime\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdGetServerTime} RequestCmdGetServerTime\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdGetServerTime.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdGetServerTime message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdGetServerTime\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdGetServerTime.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdGetServerTime message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdGetServerTime\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdGetServerTime} RequestCmdGetServerTime\n         */\n        RequestCmdGetServerTime.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdGetServerTime)\n                return object;\n            return new $root.hdyRpc.RequestCmdGetServerTime();\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdGetServerTime message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdGetServerTime\n         * @static\n         * @param {hdyRpc.RequestCmdGetServerTime} message RequestCmdGetServerTime\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdGetServerTime.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this RequestCmdGetServerTime to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdGetServerTime\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdGetServerTime.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdGetServerTime;\n    })();\n\n    hdyRpc.ResponseCmdGetServerTime = (function() {\n\n        /**\n         * Properties of a ResponseCmdGetServerTime.\n         * @memberof hdyRpc\n         * @interface IResponseCmdGetServerTime\n         * @property {number|Long|null} [time] ResponseCmdGetServerTime time\n         */\n\n        /**\n         * Constructs a new ResponseCmdGetServerTime.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdGetServerTime.\n         * @implements IResponseCmdGetServerTime\n         * @constructor\n         * @param {hdyRpc.IResponseCmdGetServerTime=} [properties] Properties to set\n         */\n        function ResponseCmdGetServerTime(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdGetServerTime time.\n         * @member {number|Long} time\n         * @memberof hdyRpc.ResponseCmdGetServerTime\n         * @instance\n         */\n        ResponseCmdGetServerTime.prototype.time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new ResponseCmdGetServerTime instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdGetServerTime\n         * @static\n         * @param {hdyRpc.IResponseCmdGetServerTime=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdGetServerTime} ResponseCmdGetServerTime instance\n         */\n        ResponseCmdGetServerTime.create = function create(properties) {\n            return new ResponseCmdGetServerTime(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdGetServerTime message. Does not implicitly {@link hdyRpc.ResponseCmdGetServerTime.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdGetServerTime\n         * @static\n         * @param {hdyRpc.ResponseCmdGetServerTime} message ResponseCmdGetServerTime message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdGetServerTime.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.time != null && Object.hasOwnProperty.call(message, \"time\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.time);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdGetServerTime message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdGetServerTime.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdGetServerTime\n         * @static\n         * @param {hdyRpc.ResponseCmdGetServerTime} message ResponseCmdGetServerTime message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdGetServerTime.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdGetServerTime message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdGetServerTime\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdGetServerTime} ResponseCmdGetServerTime\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdGetServerTime.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdGetServerTime();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.time = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdGetServerTime message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdGetServerTime\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdGetServerTime} ResponseCmdGetServerTime\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdGetServerTime.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdGetServerTime message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdGetServerTime\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdGetServerTime.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.time != null && message.hasOwnProperty(\"time\"))\n                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))\n                    return \"time: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdGetServerTime message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdGetServerTime\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdGetServerTime} ResponseCmdGetServerTime\n         */\n        ResponseCmdGetServerTime.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdGetServerTime)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdGetServerTime();\n            if (object.time != null)\n                if ($util.Long)\n                    (message.time = $util.Long.fromValue(object.time)).unsigned = true;\n                else if (typeof object.time === \"string\")\n                    message.time = parseInt(object.time, 10);\n                else if (typeof object.time === \"number\")\n                    message.time = object.time;\n                else if (typeof object.time === \"object\")\n                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdGetServerTime message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdGetServerTime\n         * @static\n         * @param {hdyRpc.ResponseCmdGetServerTime} message ResponseCmdGetServerTime\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdGetServerTime.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.time = options.longs === String ? \"0\" : 0;\n            if (message.time != null && message.hasOwnProperty(\"time\"))\n                if (typeof message.time === \"number\")\n                    object.time = options.longs === String ? String(message.time) : message.time;\n                else\n                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber(true) : message.time;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdGetServerTime to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdGetServerTime\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdGetServerTime.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdGetServerTime;\n    })();\n\n    hdyRpc.RequestCmdWsHandshake = (function() {\n\n        /**\n         * Properties of a RequestCmdWsHandshake.\n         * @memberof hdyRpc\n         * @interface IRequestCmdWsHandshake\n         * @property {string|null} [test] RequestCmdWsHandshake test\n         */\n\n        /**\n         * Constructs a new RequestCmdWsHandshake.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdWsHandshake.\n         * @implements IRequestCmdWsHandshake\n         * @constructor\n         * @param {hdyRpc.IRequestCmdWsHandshake=} [properties] Properties to set\n         */\n        function RequestCmdWsHandshake(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RequestCmdWsHandshake test.\n         * @member {string} test\n         * @memberof hdyRpc.RequestCmdWsHandshake\n         * @instance\n         */\n        RequestCmdWsHandshake.prototype.test = \"\";\n\n        /**\n         * Creates a new RequestCmdWsHandshake instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdWsHandshake\n         * @static\n         * @param {hdyRpc.IRequestCmdWsHandshake=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdWsHandshake} RequestCmdWsHandshake instance\n         */\n        RequestCmdWsHandshake.create = function create(properties) {\n            return new RequestCmdWsHandshake(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdWsHandshake message. Does not implicitly {@link hdyRpc.RequestCmdWsHandshake.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdWsHandshake\n         * @static\n         * @param {hdyRpc.RequestCmdWsHandshake} message RequestCmdWsHandshake message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdWsHandshake.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.test != null && Object.hasOwnProperty.call(message, \"test\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.test);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdWsHandshake message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdWsHandshake.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdWsHandshake\n         * @static\n         * @param {hdyRpc.RequestCmdWsHandshake} message RequestCmdWsHandshake message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdWsHandshake.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdWsHandshake message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdWsHandshake\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdWsHandshake} RequestCmdWsHandshake\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdWsHandshake.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdWsHandshake();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.test = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdWsHandshake message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdWsHandshake\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdWsHandshake} RequestCmdWsHandshake\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdWsHandshake.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdWsHandshake message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdWsHandshake\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdWsHandshake.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.test != null && message.hasOwnProperty(\"test\"))\n                if (!$util.isString(message.test))\n                    return \"test: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdWsHandshake message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdWsHandshake\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdWsHandshake} RequestCmdWsHandshake\n         */\n        RequestCmdWsHandshake.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdWsHandshake)\n                return object;\n            let message = new $root.hdyRpc.RequestCmdWsHandshake();\n            if (object.test != null)\n                message.test = String(object.test);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdWsHandshake message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdWsHandshake\n         * @static\n         * @param {hdyRpc.RequestCmdWsHandshake} message RequestCmdWsHandshake\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdWsHandshake.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.test = \"\";\n            if (message.test != null && message.hasOwnProperty(\"test\"))\n                object.test = message.test;\n            return object;\n        };\n\n        /**\n         * Converts this RequestCmdWsHandshake to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdWsHandshake\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdWsHandshake.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdWsHandshake;\n    })();\n\n    hdyRpc.ResponseCmdWsHandshake = (function() {\n\n        /**\n         * Properties of a ResponseCmdWsHandshake.\n         * @memberof hdyRpc\n         * @interface IResponseCmdWsHandshake\n         * @property {string|null} [testResult] ResponseCmdWsHandshake testResult\n         */\n\n        /**\n         * Constructs a new ResponseCmdWsHandshake.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdWsHandshake.\n         * @implements IResponseCmdWsHandshake\n         * @constructor\n         * @param {hdyRpc.IResponseCmdWsHandshake=} [properties] Properties to set\n         */\n        function ResponseCmdWsHandshake(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdWsHandshake testResult.\n         * @member {string} testResult\n         * @memberof hdyRpc.ResponseCmdWsHandshake\n         * @instance\n         */\n        ResponseCmdWsHandshake.prototype.testResult = \"\";\n\n        /**\n         * Creates a new ResponseCmdWsHandshake instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdWsHandshake\n         * @static\n         * @param {hdyRpc.IResponseCmdWsHandshake=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdWsHandshake} ResponseCmdWsHandshake instance\n         */\n        ResponseCmdWsHandshake.create = function create(properties) {\n            return new ResponseCmdWsHandshake(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdWsHandshake message. Does not implicitly {@link hdyRpc.ResponseCmdWsHandshake.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdWsHandshake\n         * @static\n         * @param {hdyRpc.ResponseCmdWsHandshake} message ResponseCmdWsHandshake message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdWsHandshake.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.testResult != null && Object.hasOwnProperty.call(message, \"testResult\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.testResult);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdWsHandshake message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdWsHandshake.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdWsHandshake\n         * @static\n         * @param {hdyRpc.ResponseCmdWsHandshake} message ResponseCmdWsHandshake message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdWsHandshake.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdWsHandshake message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdWsHandshake\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdWsHandshake} ResponseCmdWsHandshake\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdWsHandshake.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdWsHandshake();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.testResult = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdWsHandshake message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdWsHandshake\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdWsHandshake} ResponseCmdWsHandshake\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdWsHandshake.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdWsHandshake message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdWsHandshake\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdWsHandshake.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.testResult != null && message.hasOwnProperty(\"testResult\"))\n                if (!$util.isString(message.testResult))\n                    return \"testResult: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdWsHandshake message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdWsHandshake\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdWsHandshake} ResponseCmdWsHandshake\n         */\n        ResponseCmdWsHandshake.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdWsHandshake)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdWsHandshake();\n            if (object.testResult != null)\n                message.testResult = String(object.testResult);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdWsHandshake message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdWsHandshake\n         * @static\n         * @param {hdyRpc.ResponseCmdWsHandshake} message ResponseCmdWsHandshake\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdWsHandshake.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.testResult = \"\";\n            if (message.testResult != null && message.hasOwnProperty(\"testResult\"))\n                object.testResult = message.testResult;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdWsHandshake to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdWsHandshake\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdWsHandshake.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdWsHandshake;\n    })();\n\n    hdyRpc.RequestCmdGenerateConnectionKey = (function() {\n\n        /**\n         * Properties of a RequestCmdGenerateConnectionKey.\n         * @memberof hdyRpc\n         * @interface IRequestCmdGenerateConnectionKey\n         * @property {number|null} [length] RequestCmdGenerateConnectionKey length\n         */\n\n        /**\n         * Constructs a new RequestCmdGenerateConnectionKey.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdGenerateConnectionKey.\n         * @implements IRequestCmdGenerateConnectionKey\n         * @constructor\n         * @param {hdyRpc.IRequestCmdGenerateConnectionKey=} [properties] Properties to set\n         */\n        function RequestCmdGenerateConnectionKey(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RequestCmdGenerateConnectionKey length.\n         * @member {number} length\n         * @memberof hdyRpc.RequestCmdGenerateConnectionKey\n         * @instance\n         */\n        RequestCmdGenerateConnectionKey.prototype.length = 0;\n\n        /**\n         * Creates a new RequestCmdGenerateConnectionKey instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdGenerateConnectionKey\n         * @static\n         * @param {hdyRpc.IRequestCmdGenerateConnectionKey=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdGenerateConnectionKey} RequestCmdGenerateConnectionKey instance\n         */\n        RequestCmdGenerateConnectionKey.create = function create(properties) {\n            return new RequestCmdGenerateConnectionKey(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdGenerateConnectionKey message. Does not implicitly {@link hdyRpc.RequestCmdGenerateConnectionKey.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdGenerateConnectionKey\n         * @static\n         * @param {hdyRpc.RequestCmdGenerateConnectionKey} message RequestCmdGenerateConnectionKey message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdGenerateConnectionKey.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.length != null && Object.hasOwnProperty.call(message, \"length\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.length);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdGenerateConnectionKey message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdGenerateConnectionKey.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdGenerateConnectionKey\n         * @static\n         * @param {hdyRpc.RequestCmdGenerateConnectionKey} message RequestCmdGenerateConnectionKey message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdGenerateConnectionKey.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdGenerateConnectionKey message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdGenerateConnectionKey\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdGenerateConnectionKey} RequestCmdGenerateConnectionKey\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdGenerateConnectionKey.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdGenerateConnectionKey();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.length = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdGenerateConnectionKey message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdGenerateConnectionKey\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdGenerateConnectionKey} RequestCmdGenerateConnectionKey\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdGenerateConnectionKey.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdGenerateConnectionKey message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdGenerateConnectionKey\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdGenerateConnectionKey.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.length != null && message.hasOwnProperty(\"length\"))\n                if (!$util.isInteger(message.length))\n                    return \"length: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdGenerateConnectionKey message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdGenerateConnectionKey\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdGenerateConnectionKey} RequestCmdGenerateConnectionKey\n         */\n        RequestCmdGenerateConnectionKey.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdGenerateConnectionKey)\n                return object;\n            let message = new $root.hdyRpc.RequestCmdGenerateConnectionKey();\n            if (object.length != null)\n                message.length = object.length >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdGenerateConnectionKey message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdGenerateConnectionKey\n         * @static\n         * @param {hdyRpc.RequestCmdGenerateConnectionKey} message RequestCmdGenerateConnectionKey\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdGenerateConnectionKey.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.length = 0;\n            if (message.length != null && message.hasOwnProperty(\"length\"))\n                object.length = message.length;\n            return object;\n        };\n\n        /**\n         * Converts this RequestCmdGenerateConnectionKey to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdGenerateConnectionKey\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdGenerateConnectionKey.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdGenerateConnectionKey;\n    })();\n\n    hdyRpc.ResponseCmdGenerateConnectionKey = (function() {\n\n        /**\n         * Properties of a ResponseCmdGenerateConnectionKey.\n         * @memberof hdyRpc\n         * @interface IResponseCmdGenerateConnectionKey\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdGenerateConnectionKey result\n         * @property {string|null} [key] ResponseCmdGenerateConnectionKey key\n         */\n\n        /**\n         * Constructs a new ResponseCmdGenerateConnectionKey.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdGenerateConnectionKey.\n         * @implements IResponseCmdGenerateConnectionKey\n         * @constructor\n         * @param {hdyRpc.IResponseCmdGenerateConnectionKey=} [properties] Properties to set\n         */\n        function ResponseCmdGenerateConnectionKey(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdGenerateConnectionKey result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdGenerateConnectionKey\n         * @instance\n         */\n        ResponseCmdGenerateConnectionKey.prototype.result = 0;\n\n        /**\n         * ResponseCmdGenerateConnectionKey key.\n         * @member {string} key\n         * @memberof hdyRpc.ResponseCmdGenerateConnectionKey\n         * @instance\n         */\n        ResponseCmdGenerateConnectionKey.prototype.key = \"\";\n\n        /**\n         * Creates a new ResponseCmdGenerateConnectionKey instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdGenerateConnectionKey\n         * @static\n         * @param {hdyRpc.IResponseCmdGenerateConnectionKey=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdGenerateConnectionKey} ResponseCmdGenerateConnectionKey instance\n         */\n        ResponseCmdGenerateConnectionKey.create = function create(properties) {\n            return new ResponseCmdGenerateConnectionKey(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdGenerateConnectionKey message. Does not implicitly {@link hdyRpc.ResponseCmdGenerateConnectionKey.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdGenerateConnectionKey\n         * @static\n         * @param {hdyRpc.ResponseCmdGenerateConnectionKey} message ResponseCmdGenerateConnectionKey message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdGenerateConnectionKey.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.key);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdGenerateConnectionKey message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdGenerateConnectionKey.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdGenerateConnectionKey\n         * @static\n         * @param {hdyRpc.ResponseCmdGenerateConnectionKey} message ResponseCmdGenerateConnectionKey message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdGenerateConnectionKey.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdGenerateConnectionKey message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdGenerateConnectionKey\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdGenerateConnectionKey} ResponseCmdGenerateConnectionKey\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdGenerateConnectionKey.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdGenerateConnectionKey();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                case 2:\n                    message.key = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdGenerateConnectionKey message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdGenerateConnectionKey\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdGenerateConnectionKey} ResponseCmdGenerateConnectionKey\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdGenerateConnectionKey.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdGenerateConnectionKey message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdGenerateConnectionKey\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdGenerateConnectionKey.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdGenerateConnectionKey message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdGenerateConnectionKey\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdGenerateConnectionKey} ResponseCmdGenerateConnectionKey\n         */\n        ResponseCmdGenerateConnectionKey.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdGenerateConnectionKey)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdGenerateConnectionKey();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            if (object.key != null)\n                message.key = String(object.key);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdGenerateConnectionKey message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdGenerateConnectionKey\n         * @static\n         * @param {hdyRpc.ResponseCmdGenerateConnectionKey} message ResponseCmdGenerateConnectionKey\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdGenerateConnectionKey.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n                object.key = \"\";\n            }\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdGenerateConnectionKey to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdGenerateConnectionKey\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdGenerateConnectionKey.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdGenerateConnectionKey;\n    })();\n\n    hdyRpc.RequestCmdSetConnectionKey = (function() {\n\n        /**\n         * Properties of a RequestCmdSetConnectionKey.\n         * @memberof hdyRpc\n         * @interface IRequestCmdSetConnectionKey\n         * @property {string|null} [key] RequestCmdSetConnectionKey key\n         */\n\n        /**\n         * Constructs a new RequestCmdSetConnectionKey.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdSetConnectionKey.\n         * @implements IRequestCmdSetConnectionKey\n         * @constructor\n         * @param {hdyRpc.IRequestCmdSetConnectionKey=} [properties] Properties to set\n         */\n        function RequestCmdSetConnectionKey(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RequestCmdSetConnectionKey key.\n         * @member {string} key\n         * @memberof hdyRpc.RequestCmdSetConnectionKey\n         * @instance\n         */\n        RequestCmdSetConnectionKey.prototype.key = \"\";\n\n        /**\n         * Creates a new RequestCmdSetConnectionKey instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdSetConnectionKey\n         * @static\n         * @param {hdyRpc.IRequestCmdSetConnectionKey=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdSetConnectionKey} RequestCmdSetConnectionKey instance\n         */\n        RequestCmdSetConnectionKey.create = function create(properties) {\n            return new RequestCmdSetConnectionKey(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdSetConnectionKey message. Does not implicitly {@link hdyRpc.RequestCmdSetConnectionKey.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdSetConnectionKey\n         * @static\n         * @param {hdyRpc.RequestCmdSetConnectionKey} message RequestCmdSetConnectionKey message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdSetConnectionKey.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdSetConnectionKey message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdSetConnectionKey.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdSetConnectionKey\n         * @static\n         * @param {hdyRpc.RequestCmdSetConnectionKey} message RequestCmdSetConnectionKey message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdSetConnectionKey.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdSetConnectionKey message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdSetConnectionKey\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdSetConnectionKey} RequestCmdSetConnectionKey\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdSetConnectionKey.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdSetConnectionKey();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdSetConnectionKey message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdSetConnectionKey\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdSetConnectionKey} RequestCmdSetConnectionKey\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdSetConnectionKey.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdSetConnectionKey message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdSetConnectionKey\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdSetConnectionKey.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdSetConnectionKey message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdSetConnectionKey\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdSetConnectionKey} RequestCmdSetConnectionKey\n         */\n        RequestCmdSetConnectionKey.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdSetConnectionKey)\n                return object;\n            let message = new $root.hdyRpc.RequestCmdSetConnectionKey();\n            if (object.key != null)\n                message.key = String(object.key);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdSetConnectionKey message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdSetConnectionKey\n         * @static\n         * @param {hdyRpc.RequestCmdSetConnectionKey} message RequestCmdSetConnectionKey\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdSetConnectionKey.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.key = \"\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            return object;\n        };\n\n        /**\n         * Converts this RequestCmdSetConnectionKey to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdSetConnectionKey\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdSetConnectionKey.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdSetConnectionKey;\n    })();\n\n    hdyRpc.ResponseCmdSetConnectionKey = (function() {\n\n        /**\n         * Properties of a ResponseCmdSetConnectionKey.\n         * @memberof hdyRpc\n         * @interface IResponseCmdSetConnectionKey\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdSetConnectionKey result\n         */\n\n        /**\n         * Constructs a new ResponseCmdSetConnectionKey.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdSetConnectionKey.\n         * @implements IResponseCmdSetConnectionKey\n         * @constructor\n         * @param {hdyRpc.IResponseCmdSetConnectionKey=} [properties] Properties to set\n         */\n        function ResponseCmdSetConnectionKey(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdSetConnectionKey result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdSetConnectionKey\n         * @instance\n         */\n        ResponseCmdSetConnectionKey.prototype.result = 0;\n\n        /**\n         * Creates a new ResponseCmdSetConnectionKey instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdSetConnectionKey\n         * @static\n         * @param {hdyRpc.IResponseCmdSetConnectionKey=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdSetConnectionKey} ResponseCmdSetConnectionKey instance\n         */\n        ResponseCmdSetConnectionKey.create = function create(properties) {\n            return new ResponseCmdSetConnectionKey(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdSetConnectionKey message. Does not implicitly {@link hdyRpc.ResponseCmdSetConnectionKey.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdSetConnectionKey\n         * @static\n         * @param {hdyRpc.ResponseCmdSetConnectionKey} message ResponseCmdSetConnectionKey message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdSetConnectionKey.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdSetConnectionKey message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdSetConnectionKey.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdSetConnectionKey\n         * @static\n         * @param {hdyRpc.ResponseCmdSetConnectionKey} message ResponseCmdSetConnectionKey message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdSetConnectionKey.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdSetConnectionKey message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdSetConnectionKey\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdSetConnectionKey} ResponseCmdSetConnectionKey\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdSetConnectionKey.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdSetConnectionKey();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdSetConnectionKey message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdSetConnectionKey\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdSetConnectionKey} ResponseCmdSetConnectionKey\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdSetConnectionKey.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdSetConnectionKey message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdSetConnectionKey\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdSetConnectionKey.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdSetConnectionKey message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdSetConnectionKey\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdSetConnectionKey} ResponseCmdSetConnectionKey\n         */\n        ResponseCmdSetConnectionKey.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdSetConnectionKey)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdSetConnectionKey();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdSetConnectionKey message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdSetConnectionKey\n         * @static\n         * @param {hdyRpc.ResponseCmdSetConnectionKey} message ResponseCmdSetConnectionKey\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdSetConnectionKey.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdSetConnectionKey to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdSetConnectionKey\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdSetConnectionKey.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdSetConnectionKey;\n    })();\n\n    hdyRpc.RequestCmdGetMode = (function() {\n\n        /**\n         * Properties of a RequestCmdGetMode.\n         * @memberof hdyRpc\n         * @interface IRequestCmdGetMode\n         */\n\n        /**\n         * Constructs a new RequestCmdGetMode.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdGetMode.\n         * @implements IRequestCmdGetMode\n         * @constructor\n         * @param {hdyRpc.IRequestCmdGetMode=} [properties] Properties to set\n         */\n        function RequestCmdGetMode(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new RequestCmdGetMode instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdGetMode\n         * @static\n         * @param {hdyRpc.IRequestCmdGetMode=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdGetMode} RequestCmdGetMode instance\n         */\n        RequestCmdGetMode.create = function create(properties) {\n            return new RequestCmdGetMode(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdGetMode message. Does not implicitly {@link hdyRpc.RequestCmdGetMode.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdGetMode\n         * @static\n         * @param {hdyRpc.RequestCmdGetMode} message RequestCmdGetMode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdGetMode.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdGetMode message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdGetMode.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdGetMode\n         * @static\n         * @param {hdyRpc.RequestCmdGetMode} message RequestCmdGetMode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdGetMode.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdGetMode message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdGetMode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdGetMode} RequestCmdGetMode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdGetMode.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdGetMode();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdGetMode message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdGetMode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdGetMode} RequestCmdGetMode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdGetMode.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdGetMode message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdGetMode\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdGetMode.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdGetMode message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdGetMode\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdGetMode} RequestCmdGetMode\n         */\n        RequestCmdGetMode.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdGetMode)\n                return object;\n            return new $root.hdyRpc.RequestCmdGetMode();\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdGetMode message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdGetMode\n         * @static\n         * @param {hdyRpc.RequestCmdGetMode} message RequestCmdGetMode\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdGetMode.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this RequestCmdGetMode to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdGetMode\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdGetMode.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdGetMode;\n    })();\n\n    hdyRpc.ResponseCmdGetMode = (function() {\n\n        /**\n         * Properties of a ResponseCmdGetMode.\n         * @memberof hdyRpc\n         * @interface IResponseCmdGetMode\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdGetMode result\n         * @property {hdyRpc.Modes|null} [mode] ResponseCmdGetMode mode\n         */\n\n        /**\n         * Constructs a new ResponseCmdGetMode.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdGetMode.\n         * @implements IResponseCmdGetMode\n         * @constructor\n         * @param {hdyRpc.IResponseCmdGetMode=} [properties] Properties to set\n         */\n        function ResponseCmdGetMode(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdGetMode result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdGetMode\n         * @instance\n         */\n        ResponseCmdGetMode.prototype.result = 0;\n\n        /**\n         * ResponseCmdGetMode mode.\n         * @member {hdyRpc.Modes} mode\n         * @memberof hdyRpc.ResponseCmdGetMode\n         * @instance\n         */\n        ResponseCmdGetMode.prototype.mode = 0;\n\n        /**\n         * Creates a new ResponseCmdGetMode instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdGetMode\n         * @static\n         * @param {hdyRpc.IResponseCmdGetMode=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdGetMode} ResponseCmdGetMode instance\n         */\n        ResponseCmdGetMode.create = function create(properties) {\n            return new ResponseCmdGetMode(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdGetMode message. Does not implicitly {@link hdyRpc.ResponseCmdGetMode.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdGetMode\n         * @static\n         * @param {hdyRpc.ResponseCmdGetMode} message ResponseCmdGetMode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdGetMode.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            if (message.mode != null && Object.hasOwnProperty.call(message, \"mode\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mode);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdGetMode message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdGetMode.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdGetMode\n         * @static\n         * @param {hdyRpc.ResponseCmdGetMode} message ResponseCmdGetMode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdGetMode.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdGetMode message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdGetMode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdGetMode} ResponseCmdGetMode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdGetMode.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdGetMode();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                case 2:\n                    message.mode = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdGetMode message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdGetMode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdGetMode} ResponseCmdGetMode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdGetMode.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdGetMode message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdGetMode\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdGetMode.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            if (message.mode != null && message.hasOwnProperty(\"mode\"))\n                switch (message.mode) {\n                default:\n                    return \"mode: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdGetMode message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdGetMode\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdGetMode} ResponseCmdGetMode\n         */\n        ResponseCmdGetMode.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdGetMode)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdGetMode();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            switch (object.mode) {\n            case \"MODE_HAMP\":\n            case 0:\n                message.mode = 0;\n                break;\n            case \"MODE_HDSP\":\n            case 1:\n                message.mode = 1;\n                break;\n            case \"MODE_HSSP\":\n            case 2:\n                message.mode = 2;\n                break;\n            case \"MODE_MAINTENANCE\":\n            case 3:\n                message.mode = 3;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdGetMode message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdGetMode\n         * @static\n         * @param {hdyRpc.ResponseCmdGetMode} message ResponseCmdGetMode\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdGetMode.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n                object.mode = options.enums === String ? \"MODE_HAMP\" : 0;\n            }\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            if (message.mode != null && message.hasOwnProperty(\"mode\"))\n                object.mode = options.enums === String ? $root.hdyRpc.Modes[message.mode] : message.mode;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdGetMode to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdGetMode\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdGetMode.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdGetMode;\n    })();\n\n    hdyRpc.RequestCmdSetMode = (function() {\n\n        /**\n         * Properties of a RequestCmdSetMode.\n         * @memberof hdyRpc\n         * @interface IRequestCmdSetMode\n         * @property {hdyRpc.Modes|null} [mode] RequestCmdSetMode mode\n         */\n\n        /**\n         * Constructs a new RequestCmdSetMode.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdSetMode.\n         * @implements IRequestCmdSetMode\n         * @constructor\n         * @param {hdyRpc.IRequestCmdSetMode=} [properties] Properties to set\n         */\n        function RequestCmdSetMode(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RequestCmdSetMode mode.\n         * @member {hdyRpc.Modes} mode\n         * @memberof hdyRpc.RequestCmdSetMode\n         * @instance\n         */\n        RequestCmdSetMode.prototype.mode = 0;\n\n        /**\n         * Creates a new RequestCmdSetMode instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdSetMode\n         * @static\n         * @param {hdyRpc.IRequestCmdSetMode=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdSetMode} RequestCmdSetMode instance\n         */\n        RequestCmdSetMode.create = function create(properties) {\n            return new RequestCmdSetMode(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdSetMode message. Does not implicitly {@link hdyRpc.RequestCmdSetMode.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdSetMode\n         * @static\n         * @param {hdyRpc.RequestCmdSetMode} message RequestCmdSetMode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdSetMode.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.mode != null && Object.hasOwnProperty.call(message, \"mode\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.mode);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdSetMode message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdSetMode.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdSetMode\n         * @static\n         * @param {hdyRpc.RequestCmdSetMode} message RequestCmdSetMode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdSetMode.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdSetMode message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdSetMode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdSetMode} RequestCmdSetMode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdSetMode.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdSetMode();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.mode = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdSetMode message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdSetMode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdSetMode} RequestCmdSetMode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdSetMode.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdSetMode message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdSetMode\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdSetMode.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.mode != null && message.hasOwnProperty(\"mode\"))\n                switch (message.mode) {\n                default:\n                    return \"mode: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdSetMode message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdSetMode\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdSetMode} RequestCmdSetMode\n         */\n        RequestCmdSetMode.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdSetMode)\n                return object;\n            let message = new $root.hdyRpc.RequestCmdSetMode();\n            switch (object.mode) {\n            case \"MODE_HAMP\":\n            case 0:\n                message.mode = 0;\n                break;\n            case \"MODE_HDSP\":\n            case 1:\n                message.mode = 1;\n                break;\n            case \"MODE_HSSP\":\n            case 2:\n                message.mode = 2;\n                break;\n            case \"MODE_MAINTENANCE\":\n            case 3:\n                message.mode = 3;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdSetMode message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdSetMode\n         * @static\n         * @param {hdyRpc.RequestCmdSetMode} message RequestCmdSetMode\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdSetMode.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.mode = options.enums === String ? \"MODE_HAMP\" : 0;\n            if (message.mode != null && message.hasOwnProperty(\"mode\"))\n                object.mode = options.enums === String ? $root.hdyRpc.Modes[message.mode] : message.mode;\n            return object;\n        };\n\n        /**\n         * Converts this RequestCmdSetMode to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdSetMode\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdSetMode.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdSetMode;\n    })();\n\n    hdyRpc.ResponseCmdSetMode = (function() {\n\n        /**\n         * Properties of a ResponseCmdSetMode.\n         * @memberof hdyRpc\n         * @interface IResponseCmdSetMode\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdSetMode result\n         */\n\n        /**\n         * Constructs a new ResponseCmdSetMode.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdSetMode.\n         * @implements IResponseCmdSetMode\n         * @constructor\n         * @param {hdyRpc.IResponseCmdSetMode=} [properties] Properties to set\n         */\n        function ResponseCmdSetMode(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdSetMode result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdSetMode\n         * @instance\n         */\n        ResponseCmdSetMode.prototype.result = 0;\n\n        /**\n         * Creates a new ResponseCmdSetMode instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdSetMode\n         * @static\n         * @param {hdyRpc.IResponseCmdSetMode=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdSetMode} ResponseCmdSetMode instance\n         */\n        ResponseCmdSetMode.create = function create(properties) {\n            return new ResponseCmdSetMode(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdSetMode message. Does not implicitly {@link hdyRpc.ResponseCmdSetMode.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdSetMode\n         * @static\n         * @param {hdyRpc.ResponseCmdSetMode} message ResponseCmdSetMode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdSetMode.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdSetMode message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdSetMode.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdSetMode\n         * @static\n         * @param {hdyRpc.ResponseCmdSetMode} message ResponseCmdSetMode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdSetMode.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdSetMode message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdSetMode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdSetMode} ResponseCmdSetMode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdSetMode.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdSetMode();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdSetMode message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdSetMode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdSetMode} ResponseCmdSetMode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdSetMode.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdSetMode message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdSetMode\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdSetMode.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdSetMode message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdSetMode\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdSetMode} ResponseCmdSetMode\n         */\n        ResponseCmdSetMode.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdSetMode)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdSetMode();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdSetMode message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdSetMode\n         * @static\n         * @param {hdyRpc.ResponseCmdSetMode} message ResponseCmdSetMode\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdSetMode.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdSetMode to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdSetMode\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdSetMode.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdSetMode;\n    })();\n\n    hdyRpc.RequestCmdGetConnected = (function() {\n\n        /**\n         * Properties of a RequestCmdGetConnected.\n         * @memberof hdyRpc\n         * @interface IRequestCmdGetConnected\n         */\n\n        /**\n         * Constructs a new RequestCmdGetConnected.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdGetConnected.\n         * @implements IRequestCmdGetConnected\n         * @constructor\n         * @param {hdyRpc.IRequestCmdGetConnected=} [properties] Properties to set\n         */\n        function RequestCmdGetConnected(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new RequestCmdGetConnected instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdGetConnected\n         * @static\n         * @param {hdyRpc.IRequestCmdGetConnected=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdGetConnected} RequestCmdGetConnected instance\n         */\n        RequestCmdGetConnected.create = function create(properties) {\n            return new RequestCmdGetConnected(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdGetConnected message. Does not implicitly {@link hdyRpc.RequestCmdGetConnected.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdGetConnected\n         * @static\n         * @param {hdyRpc.RequestCmdGetConnected} message RequestCmdGetConnected message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdGetConnected.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdGetConnected message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdGetConnected.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdGetConnected\n         * @static\n         * @param {hdyRpc.RequestCmdGetConnected} message RequestCmdGetConnected message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdGetConnected.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdGetConnected message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdGetConnected\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdGetConnected} RequestCmdGetConnected\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdGetConnected.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdGetConnected();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdGetConnected message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdGetConnected\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdGetConnected} RequestCmdGetConnected\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdGetConnected.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdGetConnected message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdGetConnected\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdGetConnected.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdGetConnected message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdGetConnected\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdGetConnected} RequestCmdGetConnected\n         */\n        RequestCmdGetConnected.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdGetConnected)\n                return object;\n            return new $root.hdyRpc.RequestCmdGetConnected();\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdGetConnected message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdGetConnected\n         * @static\n         * @param {hdyRpc.RequestCmdGetConnected} message RequestCmdGetConnected\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdGetConnected.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this RequestCmdGetConnected to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdGetConnected\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdGetConnected.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdGetConnected;\n    })();\n\n    hdyRpc.ResponseCmdGetConnected = (function() {\n\n        /**\n         * Properties of a ResponseCmdGetConnected.\n         * @memberof hdyRpc\n         * @interface IResponseCmdGetConnected\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdGetConnected result\n         * @property {boolean|null} [connected] ResponseCmdGetConnected connected\n         */\n\n        /**\n         * Constructs a new ResponseCmdGetConnected.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdGetConnected.\n         * @implements IResponseCmdGetConnected\n         * @constructor\n         * @param {hdyRpc.IResponseCmdGetConnected=} [properties] Properties to set\n         */\n        function ResponseCmdGetConnected(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdGetConnected result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdGetConnected\n         * @instance\n         */\n        ResponseCmdGetConnected.prototype.result = 0;\n\n        /**\n         * ResponseCmdGetConnected connected.\n         * @member {boolean} connected\n         * @memberof hdyRpc.ResponseCmdGetConnected\n         * @instance\n         */\n        ResponseCmdGetConnected.prototype.connected = false;\n\n        /**\n         * Creates a new ResponseCmdGetConnected instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdGetConnected\n         * @static\n         * @param {hdyRpc.IResponseCmdGetConnected=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdGetConnected} ResponseCmdGetConnected instance\n         */\n        ResponseCmdGetConnected.create = function create(properties) {\n            return new ResponseCmdGetConnected(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdGetConnected message. Does not implicitly {@link hdyRpc.ResponseCmdGetConnected.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdGetConnected\n         * @static\n         * @param {hdyRpc.ResponseCmdGetConnected} message ResponseCmdGetConnected message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdGetConnected.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            if (message.connected != null && Object.hasOwnProperty.call(message, \"connected\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.connected);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdGetConnected message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdGetConnected.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdGetConnected\n         * @static\n         * @param {hdyRpc.ResponseCmdGetConnected} message ResponseCmdGetConnected message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdGetConnected.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdGetConnected message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdGetConnected\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdGetConnected} ResponseCmdGetConnected\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdGetConnected.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdGetConnected();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                case 2:\n                    message.connected = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdGetConnected message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdGetConnected\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdGetConnected} ResponseCmdGetConnected\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdGetConnected.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdGetConnected message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdGetConnected\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdGetConnected.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            if (message.connected != null && message.hasOwnProperty(\"connected\"))\n                if (typeof message.connected !== \"boolean\")\n                    return \"connected: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdGetConnected message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdGetConnected\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdGetConnected} ResponseCmdGetConnected\n         */\n        ResponseCmdGetConnected.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdGetConnected)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdGetConnected();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            if (object.connected != null)\n                message.connected = Boolean(object.connected);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdGetConnected message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdGetConnected\n         * @static\n         * @param {hdyRpc.ResponseCmdGetConnected} message ResponseCmdGetConnected\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdGetConnected.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n                object.connected = false;\n            }\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            if (message.connected != null && message.hasOwnProperty(\"connected\"))\n                object.connected = message.connected;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdGetConnected to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdGetConnected\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdGetConnected.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdGetConnected;\n    })();\n\n    hdyRpc.RequestCmdGetInfo = (function() {\n\n        /**\n         * Properties of a RequestCmdGetInfo.\n         * @memberof hdyRpc\n         * @interface IRequestCmdGetInfo\n         */\n\n        /**\n         * Constructs a new RequestCmdGetInfo.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdGetInfo.\n         * @implements IRequestCmdGetInfo\n         * @constructor\n         * @param {hdyRpc.IRequestCmdGetInfo=} [properties] Properties to set\n         */\n        function RequestCmdGetInfo(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new RequestCmdGetInfo instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdGetInfo\n         * @static\n         * @param {hdyRpc.IRequestCmdGetInfo=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdGetInfo} RequestCmdGetInfo instance\n         */\n        RequestCmdGetInfo.create = function create(properties) {\n            return new RequestCmdGetInfo(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdGetInfo message. Does not implicitly {@link hdyRpc.RequestCmdGetInfo.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdGetInfo\n         * @static\n         * @param {hdyRpc.RequestCmdGetInfo} message RequestCmdGetInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdGetInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdGetInfo message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdGetInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdGetInfo\n         * @static\n         * @param {hdyRpc.RequestCmdGetInfo} message RequestCmdGetInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdGetInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdGetInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdGetInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdGetInfo} RequestCmdGetInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdGetInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdGetInfo();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdGetInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdGetInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdGetInfo} RequestCmdGetInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdGetInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdGetInfo message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdGetInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdGetInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdGetInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdGetInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdGetInfo} RequestCmdGetInfo\n         */\n        RequestCmdGetInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdGetInfo)\n                return object;\n            return new $root.hdyRpc.RequestCmdGetInfo();\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdGetInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdGetInfo\n         * @static\n         * @param {hdyRpc.RequestCmdGetInfo} message RequestCmdGetInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdGetInfo.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this RequestCmdGetInfo to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdGetInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdGetInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdGetInfo;\n    })();\n\n    hdyRpc.ResponseCmdGetInfo = (function() {\n\n        /**\n         * Properties of a ResponseCmdGetInfo.\n         * @memberof hdyRpc\n         * @interface IResponseCmdGetInfo\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdGetInfo result\n         * @property {string|null} [info] ResponseCmdGetInfo info\n         */\n\n        /**\n         * Constructs a new ResponseCmdGetInfo.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdGetInfo.\n         * @implements IResponseCmdGetInfo\n         * @constructor\n         * @param {hdyRpc.IResponseCmdGetInfo=} [properties] Properties to set\n         */\n        function ResponseCmdGetInfo(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdGetInfo result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdGetInfo\n         * @instance\n         */\n        ResponseCmdGetInfo.prototype.result = 0;\n\n        /**\n         * ResponseCmdGetInfo info.\n         * @member {string} info\n         * @memberof hdyRpc.ResponseCmdGetInfo\n         * @instance\n         */\n        ResponseCmdGetInfo.prototype.info = \"\";\n\n        /**\n         * Creates a new ResponseCmdGetInfo instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdGetInfo\n         * @static\n         * @param {hdyRpc.IResponseCmdGetInfo=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdGetInfo} ResponseCmdGetInfo instance\n         */\n        ResponseCmdGetInfo.create = function create(properties) {\n            return new ResponseCmdGetInfo(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdGetInfo message. Does not implicitly {@link hdyRpc.ResponseCmdGetInfo.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdGetInfo\n         * @static\n         * @param {hdyRpc.ResponseCmdGetInfo} message ResponseCmdGetInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdGetInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            if (message.info != null && Object.hasOwnProperty.call(message, \"info\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.info);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdGetInfo message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdGetInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdGetInfo\n         * @static\n         * @param {hdyRpc.ResponseCmdGetInfo} message ResponseCmdGetInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdGetInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdGetInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdGetInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdGetInfo} ResponseCmdGetInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdGetInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdGetInfo();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                case 2:\n                    message.info = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdGetInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdGetInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdGetInfo} ResponseCmdGetInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdGetInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdGetInfo message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdGetInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdGetInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            if (message.info != null && message.hasOwnProperty(\"info\"))\n                if (!$util.isString(message.info))\n                    return \"info: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdGetInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdGetInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdGetInfo} ResponseCmdGetInfo\n         */\n        ResponseCmdGetInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdGetInfo)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdGetInfo();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            if (object.info != null)\n                message.info = String(object.info);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdGetInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdGetInfo\n         * @static\n         * @param {hdyRpc.ResponseCmdGetInfo} message ResponseCmdGetInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdGetInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n                object.info = \"\";\n            }\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            if (message.info != null && message.hasOwnProperty(\"info\"))\n                object.info = message.info;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdGetInfo to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdGetInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdGetInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdGetInfo;\n    })();\n\n    hdyRpc.RequestCmdGetSettings = (function() {\n\n        /**\n         * Properties of a RequestCmdGetSettings.\n         * @memberof hdyRpc\n         * @interface IRequestCmdGetSettings\n         */\n\n        /**\n         * Constructs a new RequestCmdGetSettings.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdGetSettings.\n         * @implements IRequestCmdGetSettings\n         * @constructor\n         * @param {hdyRpc.IRequestCmdGetSettings=} [properties] Properties to set\n         */\n        function RequestCmdGetSettings(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new RequestCmdGetSettings instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdGetSettings\n         * @static\n         * @param {hdyRpc.IRequestCmdGetSettings=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdGetSettings} RequestCmdGetSettings instance\n         */\n        RequestCmdGetSettings.create = function create(properties) {\n            return new RequestCmdGetSettings(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdGetSettings message. Does not implicitly {@link hdyRpc.RequestCmdGetSettings.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdGetSettings\n         * @static\n         * @param {hdyRpc.RequestCmdGetSettings} message RequestCmdGetSettings message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdGetSettings.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdGetSettings message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdGetSettings.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdGetSettings\n         * @static\n         * @param {hdyRpc.RequestCmdGetSettings} message RequestCmdGetSettings message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdGetSettings.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdGetSettings message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdGetSettings\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdGetSettings} RequestCmdGetSettings\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdGetSettings.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdGetSettings();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdGetSettings message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdGetSettings\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdGetSettings} RequestCmdGetSettings\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdGetSettings.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdGetSettings message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdGetSettings\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdGetSettings.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdGetSettings message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdGetSettings\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdGetSettings} RequestCmdGetSettings\n         */\n        RequestCmdGetSettings.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdGetSettings)\n                return object;\n            return new $root.hdyRpc.RequestCmdGetSettings();\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdGetSettings message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdGetSettings\n         * @static\n         * @param {hdyRpc.RequestCmdGetSettings} message RequestCmdGetSettings\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdGetSettings.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this RequestCmdGetSettings to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdGetSettings\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdGetSettings.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdGetSettings;\n    })();\n\n    hdyRpc.ResponseCmdGetSettings = (function() {\n\n        /**\n         * Properties of a ResponseCmdGetSettings.\n         * @memberof hdyRpc\n         * @interface IResponseCmdGetSettings\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdGetSettings result\n         * @property {string|null} [settings] ResponseCmdGetSettings settings\n         */\n\n        /**\n         * Constructs a new ResponseCmdGetSettings.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdGetSettings.\n         * @implements IResponseCmdGetSettings\n         * @constructor\n         * @param {hdyRpc.IResponseCmdGetSettings=} [properties] Properties to set\n         */\n        function ResponseCmdGetSettings(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdGetSettings result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdGetSettings\n         * @instance\n         */\n        ResponseCmdGetSettings.prototype.result = 0;\n\n        /**\n         * ResponseCmdGetSettings settings.\n         * @member {string} settings\n         * @memberof hdyRpc.ResponseCmdGetSettings\n         * @instance\n         */\n        ResponseCmdGetSettings.prototype.settings = \"\";\n\n        /**\n         * Creates a new ResponseCmdGetSettings instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdGetSettings\n         * @static\n         * @param {hdyRpc.IResponseCmdGetSettings=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdGetSettings} ResponseCmdGetSettings instance\n         */\n        ResponseCmdGetSettings.create = function create(properties) {\n            return new ResponseCmdGetSettings(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdGetSettings message. Does not implicitly {@link hdyRpc.ResponseCmdGetSettings.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdGetSettings\n         * @static\n         * @param {hdyRpc.ResponseCmdGetSettings} message ResponseCmdGetSettings message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdGetSettings.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            if (message.settings != null && Object.hasOwnProperty.call(message, \"settings\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.settings);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdGetSettings message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdGetSettings.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdGetSettings\n         * @static\n         * @param {hdyRpc.ResponseCmdGetSettings} message ResponseCmdGetSettings message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdGetSettings.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdGetSettings message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdGetSettings\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdGetSettings} ResponseCmdGetSettings\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdGetSettings.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdGetSettings();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                case 2:\n                    message.settings = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdGetSettings message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdGetSettings\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdGetSettings} ResponseCmdGetSettings\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdGetSettings.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdGetSettings message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdGetSettings\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdGetSettings.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            if (message.settings != null && message.hasOwnProperty(\"settings\"))\n                if (!$util.isString(message.settings))\n                    return \"settings: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdGetSettings message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdGetSettings\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdGetSettings} ResponseCmdGetSettings\n         */\n        ResponseCmdGetSettings.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdGetSettings)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdGetSettings();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            if (object.settings != null)\n                message.settings = String(object.settings);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdGetSettings message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdGetSettings\n         * @static\n         * @param {hdyRpc.ResponseCmdGetSettings} message ResponseCmdGetSettings\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdGetSettings.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n                object.settings = \"\";\n            }\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            if (message.settings != null && message.hasOwnProperty(\"settings\"))\n                object.settings = message.settings;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdGetSettings to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdGetSettings\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdGetSettings.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdGetSettings;\n    })();\n\n    hdyRpc.RequestCmdGetStatus = (function() {\n\n        /**\n         * Properties of a RequestCmdGetStatus.\n         * @memberof hdyRpc\n         * @interface IRequestCmdGetStatus\n         */\n\n        /**\n         * Constructs a new RequestCmdGetStatus.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdGetStatus.\n         * @implements IRequestCmdGetStatus\n         * @constructor\n         * @param {hdyRpc.IRequestCmdGetStatus=} [properties] Properties to set\n         */\n        function RequestCmdGetStatus(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new RequestCmdGetStatus instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdGetStatus\n         * @static\n         * @param {hdyRpc.IRequestCmdGetStatus=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdGetStatus} RequestCmdGetStatus instance\n         */\n        RequestCmdGetStatus.create = function create(properties) {\n            return new RequestCmdGetStatus(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdGetStatus message. Does not implicitly {@link hdyRpc.RequestCmdGetStatus.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdGetStatus\n         * @static\n         * @param {hdyRpc.RequestCmdGetStatus} message RequestCmdGetStatus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdGetStatus.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdGetStatus message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdGetStatus.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdGetStatus\n         * @static\n         * @param {hdyRpc.RequestCmdGetStatus} message RequestCmdGetStatus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdGetStatus.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdGetStatus message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdGetStatus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdGetStatus} RequestCmdGetStatus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdGetStatus.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdGetStatus();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdGetStatus message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdGetStatus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdGetStatus} RequestCmdGetStatus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdGetStatus.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdGetStatus message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdGetStatus\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdGetStatus.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdGetStatus message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdGetStatus\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdGetStatus} RequestCmdGetStatus\n         */\n        RequestCmdGetStatus.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdGetStatus)\n                return object;\n            return new $root.hdyRpc.RequestCmdGetStatus();\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdGetStatus message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdGetStatus\n         * @static\n         * @param {hdyRpc.RequestCmdGetStatus} message RequestCmdGetStatus\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdGetStatus.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this RequestCmdGetStatus to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdGetStatus\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdGetStatus.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdGetStatus;\n    })();\n\n    hdyRpc.ResponseCmdGetStatus = (function() {\n\n        /**\n         * Properties of a ResponseCmdGetStatus.\n         * @memberof hdyRpc\n         * @interface IResponseCmdGetStatus\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdGetStatus result\n         * @property {string|null} [status] ResponseCmdGetStatus status\n         */\n\n        /**\n         * Constructs a new ResponseCmdGetStatus.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdGetStatus.\n         * @implements IResponseCmdGetStatus\n         * @constructor\n         * @param {hdyRpc.IResponseCmdGetStatus=} [properties] Properties to set\n         */\n        function ResponseCmdGetStatus(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdGetStatus result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdGetStatus\n         * @instance\n         */\n        ResponseCmdGetStatus.prototype.result = 0;\n\n        /**\n         * ResponseCmdGetStatus status.\n         * @member {string} status\n         * @memberof hdyRpc.ResponseCmdGetStatus\n         * @instance\n         */\n        ResponseCmdGetStatus.prototype.status = \"\";\n\n        /**\n         * Creates a new ResponseCmdGetStatus instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdGetStatus\n         * @static\n         * @param {hdyRpc.IResponseCmdGetStatus=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdGetStatus} ResponseCmdGetStatus instance\n         */\n        ResponseCmdGetStatus.create = function create(properties) {\n            return new ResponseCmdGetStatus(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdGetStatus message. Does not implicitly {@link hdyRpc.ResponseCmdGetStatus.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdGetStatus\n         * @static\n         * @param {hdyRpc.ResponseCmdGetStatus} message ResponseCmdGetStatus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdGetStatus.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            if (message.status != null && Object.hasOwnProperty.call(message, \"status\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.status);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdGetStatus message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdGetStatus.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdGetStatus\n         * @static\n         * @param {hdyRpc.ResponseCmdGetStatus} message ResponseCmdGetStatus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdGetStatus.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdGetStatus message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdGetStatus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdGetStatus} ResponseCmdGetStatus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdGetStatus.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdGetStatus();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                case 2:\n                    message.status = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdGetStatus message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdGetStatus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdGetStatus} ResponseCmdGetStatus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdGetStatus.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdGetStatus message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdGetStatus\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdGetStatus.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            if (message.status != null && message.hasOwnProperty(\"status\"))\n                if (!$util.isString(message.status))\n                    return \"status: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdGetStatus message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdGetStatus\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdGetStatus} ResponseCmdGetStatus\n         */\n        ResponseCmdGetStatus.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdGetStatus)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdGetStatus();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            if (object.status != null)\n                message.status = String(object.status);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdGetStatus message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdGetStatus\n         * @static\n         * @param {hdyRpc.ResponseCmdGetStatus} message ResponseCmdGetStatus\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdGetStatus.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n                object.status = \"\";\n            }\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            if (message.status != null && message.hasOwnProperty(\"status\"))\n                object.status = message.status;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdGetStatus to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdGetStatus\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdGetStatus.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdGetStatus;\n    })();\n\n    hdyRpc.RequestCmdHampSetStart = (function() {\n\n        /**\n         * Properties of a RequestCmdHampSetStart.\n         * @memberof hdyRpc\n         * @interface IRequestCmdHampSetStart\n         */\n\n        /**\n         * Constructs a new RequestCmdHampSetStart.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdHampSetStart.\n         * @implements IRequestCmdHampSetStart\n         * @constructor\n         * @param {hdyRpc.IRequestCmdHampSetStart=} [properties] Properties to set\n         */\n        function RequestCmdHampSetStart(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new RequestCmdHampSetStart instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdHampSetStart\n         * @static\n         * @param {hdyRpc.IRequestCmdHampSetStart=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdHampSetStart} RequestCmdHampSetStart instance\n         */\n        RequestCmdHampSetStart.create = function create(properties) {\n            return new RequestCmdHampSetStart(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdHampSetStart message. Does not implicitly {@link hdyRpc.RequestCmdHampSetStart.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdHampSetStart\n         * @static\n         * @param {hdyRpc.RequestCmdHampSetStart} message RequestCmdHampSetStart message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHampSetStart.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdHampSetStart message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdHampSetStart.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdHampSetStart\n         * @static\n         * @param {hdyRpc.RequestCmdHampSetStart} message RequestCmdHampSetStart message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHampSetStart.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdHampSetStart message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdHampSetStart\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdHampSetStart} RequestCmdHampSetStart\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHampSetStart.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdHampSetStart();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdHampSetStart message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdHampSetStart\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdHampSetStart} RequestCmdHampSetStart\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHampSetStart.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdHampSetStart message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdHampSetStart\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdHampSetStart.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdHampSetStart message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdHampSetStart\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdHampSetStart} RequestCmdHampSetStart\n         */\n        RequestCmdHampSetStart.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdHampSetStart)\n                return object;\n            return new $root.hdyRpc.RequestCmdHampSetStart();\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdHampSetStart message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdHampSetStart\n         * @static\n         * @param {hdyRpc.RequestCmdHampSetStart} message RequestCmdHampSetStart\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdHampSetStart.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this RequestCmdHampSetStart to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdHampSetStart\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdHampSetStart.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdHampSetStart;\n    })();\n\n    hdyRpc.ResponseCmdHampSetStart = (function() {\n\n        /**\n         * Properties of a ResponseCmdHampSetStart.\n         * @memberof hdyRpc\n         * @interface IResponseCmdHampSetStart\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdHampSetStart result\n         */\n\n        /**\n         * Constructs a new ResponseCmdHampSetStart.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdHampSetStart.\n         * @implements IResponseCmdHampSetStart\n         * @constructor\n         * @param {hdyRpc.IResponseCmdHampSetStart=} [properties] Properties to set\n         */\n        function ResponseCmdHampSetStart(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdHampSetStart result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdHampSetStart\n         * @instance\n         */\n        ResponseCmdHampSetStart.prototype.result = 0;\n\n        /**\n         * Creates a new ResponseCmdHampSetStart instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdHampSetStart\n         * @static\n         * @param {hdyRpc.IResponseCmdHampSetStart=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdHampSetStart} ResponseCmdHampSetStart instance\n         */\n        ResponseCmdHampSetStart.create = function create(properties) {\n            return new ResponseCmdHampSetStart(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHampSetStart message. Does not implicitly {@link hdyRpc.ResponseCmdHampSetStart.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdHampSetStart\n         * @static\n         * @param {hdyRpc.ResponseCmdHampSetStart} message ResponseCmdHampSetStart message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHampSetStart.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHampSetStart message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdHampSetStart.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdHampSetStart\n         * @static\n         * @param {hdyRpc.ResponseCmdHampSetStart} message ResponseCmdHampSetStart message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHampSetStart.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdHampSetStart message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdHampSetStart\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdHampSetStart} ResponseCmdHampSetStart\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHampSetStart.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdHampSetStart();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdHampSetStart message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdHampSetStart\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdHampSetStart} ResponseCmdHampSetStart\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHampSetStart.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdHampSetStart message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdHampSetStart\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdHampSetStart.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdHampSetStart message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdHampSetStart\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdHampSetStart} ResponseCmdHampSetStart\n         */\n        ResponseCmdHampSetStart.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdHampSetStart)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdHampSetStart();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdHampSetStart message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdHampSetStart\n         * @static\n         * @param {hdyRpc.ResponseCmdHampSetStart} message ResponseCmdHampSetStart\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdHampSetStart.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdHampSetStart to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdHampSetStart\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdHampSetStart.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdHampSetStart;\n    })();\n\n    hdyRpc.RequestCmdHampSetStop = (function() {\n\n        /**\n         * Properties of a RequestCmdHampSetStop.\n         * @memberof hdyRpc\n         * @interface IRequestCmdHampSetStop\n         */\n\n        /**\n         * Constructs a new RequestCmdHampSetStop.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdHampSetStop.\n         * @implements IRequestCmdHampSetStop\n         * @constructor\n         * @param {hdyRpc.IRequestCmdHampSetStop=} [properties] Properties to set\n         */\n        function RequestCmdHampSetStop(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new RequestCmdHampSetStop instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdHampSetStop\n         * @static\n         * @param {hdyRpc.IRequestCmdHampSetStop=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdHampSetStop} RequestCmdHampSetStop instance\n         */\n        RequestCmdHampSetStop.create = function create(properties) {\n            return new RequestCmdHampSetStop(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdHampSetStop message. Does not implicitly {@link hdyRpc.RequestCmdHampSetStop.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdHampSetStop\n         * @static\n         * @param {hdyRpc.RequestCmdHampSetStop} message RequestCmdHampSetStop message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHampSetStop.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdHampSetStop message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdHampSetStop.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdHampSetStop\n         * @static\n         * @param {hdyRpc.RequestCmdHampSetStop} message RequestCmdHampSetStop message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHampSetStop.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdHampSetStop message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdHampSetStop\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdHampSetStop} RequestCmdHampSetStop\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHampSetStop.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdHampSetStop();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdHampSetStop message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdHampSetStop\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdHampSetStop} RequestCmdHampSetStop\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHampSetStop.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdHampSetStop message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdHampSetStop\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdHampSetStop.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdHampSetStop message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdHampSetStop\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdHampSetStop} RequestCmdHampSetStop\n         */\n        RequestCmdHampSetStop.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdHampSetStop)\n                return object;\n            return new $root.hdyRpc.RequestCmdHampSetStop();\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdHampSetStop message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdHampSetStop\n         * @static\n         * @param {hdyRpc.RequestCmdHampSetStop} message RequestCmdHampSetStop\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdHampSetStop.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this RequestCmdHampSetStop to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdHampSetStop\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdHampSetStop.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdHampSetStop;\n    })();\n\n    hdyRpc.ResponseCmdHampSetStop = (function() {\n\n        /**\n         * Properties of a ResponseCmdHampSetStop.\n         * @memberof hdyRpc\n         * @interface IResponseCmdHampSetStop\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdHampSetStop result\n         */\n\n        /**\n         * Constructs a new ResponseCmdHampSetStop.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdHampSetStop.\n         * @implements IResponseCmdHampSetStop\n         * @constructor\n         * @param {hdyRpc.IResponseCmdHampSetStop=} [properties] Properties to set\n         */\n        function ResponseCmdHampSetStop(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdHampSetStop result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdHampSetStop\n         * @instance\n         */\n        ResponseCmdHampSetStop.prototype.result = 0;\n\n        /**\n         * Creates a new ResponseCmdHampSetStop instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdHampSetStop\n         * @static\n         * @param {hdyRpc.IResponseCmdHampSetStop=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdHampSetStop} ResponseCmdHampSetStop instance\n         */\n        ResponseCmdHampSetStop.create = function create(properties) {\n            return new ResponseCmdHampSetStop(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHampSetStop message. Does not implicitly {@link hdyRpc.ResponseCmdHampSetStop.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdHampSetStop\n         * @static\n         * @param {hdyRpc.ResponseCmdHampSetStop} message ResponseCmdHampSetStop message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHampSetStop.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHampSetStop message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdHampSetStop.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdHampSetStop\n         * @static\n         * @param {hdyRpc.ResponseCmdHampSetStop} message ResponseCmdHampSetStop message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHampSetStop.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdHampSetStop message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdHampSetStop\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdHampSetStop} ResponseCmdHampSetStop\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHampSetStop.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdHampSetStop();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdHampSetStop message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdHampSetStop\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdHampSetStop} ResponseCmdHampSetStop\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHampSetStop.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdHampSetStop message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdHampSetStop\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdHampSetStop.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdHampSetStop message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdHampSetStop\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdHampSetStop} ResponseCmdHampSetStop\n         */\n        ResponseCmdHampSetStop.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdHampSetStop)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdHampSetStop();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdHampSetStop message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdHampSetStop\n         * @static\n         * @param {hdyRpc.ResponseCmdHampSetStop} message ResponseCmdHampSetStop\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdHampSetStop.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdHampSetStop to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdHampSetStop\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdHampSetStop.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdHampSetStop;\n    })();\n\n    hdyRpc.RequestCmdHampGetVelocity = (function() {\n\n        /**\n         * Properties of a RequestCmdHampGetVelocity.\n         * @memberof hdyRpc\n         * @interface IRequestCmdHampGetVelocity\n         */\n\n        /**\n         * Constructs a new RequestCmdHampGetVelocity.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdHampGetVelocity.\n         * @implements IRequestCmdHampGetVelocity\n         * @constructor\n         * @param {hdyRpc.IRequestCmdHampGetVelocity=} [properties] Properties to set\n         */\n        function RequestCmdHampGetVelocity(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new RequestCmdHampGetVelocity instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdHampGetVelocity\n         * @static\n         * @param {hdyRpc.IRequestCmdHampGetVelocity=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdHampGetVelocity} RequestCmdHampGetVelocity instance\n         */\n        RequestCmdHampGetVelocity.create = function create(properties) {\n            return new RequestCmdHampGetVelocity(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdHampGetVelocity message. Does not implicitly {@link hdyRpc.RequestCmdHampGetVelocity.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdHampGetVelocity\n         * @static\n         * @param {hdyRpc.RequestCmdHampGetVelocity} message RequestCmdHampGetVelocity message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHampGetVelocity.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdHampGetVelocity message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdHampGetVelocity.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdHampGetVelocity\n         * @static\n         * @param {hdyRpc.RequestCmdHampGetVelocity} message RequestCmdHampGetVelocity message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHampGetVelocity.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdHampGetVelocity message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdHampGetVelocity\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdHampGetVelocity} RequestCmdHampGetVelocity\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHampGetVelocity.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdHampGetVelocity();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdHampGetVelocity message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdHampGetVelocity\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdHampGetVelocity} RequestCmdHampGetVelocity\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHampGetVelocity.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdHampGetVelocity message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdHampGetVelocity\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdHampGetVelocity.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdHampGetVelocity message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdHampGetVelocity\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdHampGetVelocity} RequestCmdHampGetVelocity\n         */\n        RequestCmdHampGetVelocity.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdHampGetVelocity)\n                return object;\n            return new $root.hdyRpc.RequestCmdHampGetVelocity();\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdHampGetVelocity message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdHampGetVelocity\n         * @static\n         * @param {hdyRpc.RequestCmdHampGetVelocity} message RequestCmdHampGetVelocity\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdHampGetVelocity.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this RequestCmdHampGetVelocity to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdHampGetVelocity\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdHampGetVelocity.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdHampGetVelocity;\n    })();\n\n    hdyRpc.ResponseCmdHampGetVelocity = (function() {\n\n        /**\n         * Properties of a ResponseCmdHampGetVelocity.\n         * @memberof hdyRpc\n         * @interface IResponseCmdHampGetVelocity\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdHampGetVelocity result\n         * @property {number|null} [velocity] ResponseCmdHampGetVelocity velocity\n         */\n\n        /**\n         * Constructs a new ResponseCmdHampGetVelocity.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdHampGetVelocity.\n         * @implements IResponseCmdHampGetVelocity\n         * @constructor\n         * @param {hdyRpc.IResponseCmdHampGetVelocity=} [properties] Properties to set\n         */\n        function ResponseCmdHampGetVelocity(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdHampGetVelocity result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdHampGetVelocity\n         * @instance\n         */\n        ResponseCmdHampGetVelocity.prototype.result = 0;\n\n        /**\n         * ResponseCmdHampGetVelocity velocity.\n         * @member {number} velocity\n         * @memberof hdyRpc.ResponseCmdHampGetVelocity\n         * @instance\n         */\n        ResponseCmdHampGetVelocity.prototype.velocity = 0;\n\n        /**\n         * Creates a new ResponseCmdHampGetVelocity instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdHampGetVelocity\n         * @static\n         * @param {hdyRpc.IResponseCmdHampGetVelocity=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdHampGetVelocity} ResponseCmdHampGetVelocity instance\n         */\n        ResponseCmdHampGetVelocity.create = function create(properties) {\n            return new ResponseCmdHampGetVelocity(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHampGetVelocity message. Does not implicitly {@link hdyRpc.ResponseCmdHampGetVelocity.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdHampGetVelocity\n         * @static\n         * @param {hdyRpc.ResponseCmdHampGetVelocity} message ResponseCmdHampGetVelocity message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHampGetVelocity.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            if (message.velocity != null && Object.hasOwnProperty.call(message, \"velocity\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.velocity);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHampGetVelocity message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdHampGetVelocity.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdHampGetVelocity\n         * @static\n         * @param {hdyRpc.ResponseCmdHampGetVelocity} message ResponseCmdHampGetVelocity message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHampGetVelocity.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdHampGetVelocity message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdHampGetVelocity\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdHampGetVelocity} ResponseCmdHampGetVelocity\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHampGetVelocity.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdHampGetVelocity();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                case 2:\n                    message.velocity = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdHampGetVelocity message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdHampGetVelocity\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdHampGetVelocity} ResponseCmdHampGetVelocity\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHampGetVelocity.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdHampGetVelocity message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdHampGetVelocity\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdHampGetVelocity.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            if (message.velocity != null && message.hasOwnProperty(\"velocity\"))\n                if (typeof message.velocity !== \"number\")\n                    return \"velocity: number expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdHampGetVelocity message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdHampGetVelocity\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdHampGetVelocity} ResponseCmdHampGetVelocity\n         */\n        ResponseCmdHampGetVelocity.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdHampGetVelocity)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdHampGetVelocity();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            if (object.velocity != null)\n                message.velocity = Number(object.velocity);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdHampGetVelocity message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdHampGetVelocity\n         * @static\n         * @param {hdyRpc.ResponseCmdHampGetVelocity} message ResponseCmdHampGetVelocity\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdHampGetVelocity.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n                object.velocity = 0;\n            }\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            if (message.velocity != null && message.hasOwnProperty(\"velocity\"))\n                object.velocity = options.json && !isFinite(message.velocity) ? String(message.velocity) : message.velocity;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdHampGetVelocity to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdHampGetVelocity\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdHampGetVelocity.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdHampGetVelocity;\n    })();\n\n    hdyRpc.RequestCmdHampSetVelocity = (function() {\n\n        /**\n         * Properties of a RequestCmdHampSetVelocity.\n         * @memberof hdyRpc\n         * @interface IRequestCmdHampSetVelocity\n         * @property {number|null} [velocity] RequestCmdHampSetVelocity velocity\n         */\n\n        /**\n         * Constructs a new RequestCmdHampSetVelocity.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdHampSetVelocity.\n         * @implements IRequestCmdHampSetVelocity\n         * @constructor\n         * @param {hdyRpc.IRequestCmdHampSetVelocity=} [properties] Properties to set\n         */\n        function RequestCmdHampSetVelocity(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RequestCmdHampSetVelocity velocity.\n         * @member {number} velocity\n         * @memberof hdyRpc.RequestCmdHampSetVelocity\n         * @instance\n         */\n        RequestCmdHampSetVelocity.prototype.velocity = 0;\n\n        /**\n         * Creates a new RequestCmdHampSetVelocity instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdHampSetVelocity\n         * @static\n         * @param {hdyRpc.IRequestCmdHampSetVelocity=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdHampSetVelocity} RequestCmdHampSetVelocity instance\n         */\n        RequestCmdHampSetVelocity.create = function create(properties) {\n            return new RequestCmdHampSetVelocity(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdHampSetVelocity message. Does not implicitly {@link hdyRpc.RequestCmdHampSetVelocity.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdHampSetVelocity\n         * @static\n         * @param {hdyRpc.RequestCmdHampSetVelocity} message RequestCmdHampSetVelocity message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHampSetVelocity.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.velocity != null && Object.hasOwnProperty.call(message, \"velocity\"))\n                writer.uint32(/* id 1, wireType 5 =*/13).float(message.velocity);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdHampSetVelocity message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdHampSetVelocity.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdHampSetVelocity\n         * @static\n         * @param {hdyRpc.RequestCmdHampSetVelocity} message RequestCmdHampSetVelocity message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHampSetVelocity.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdHampSetVelocity message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdHampSetVelocity\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdHampSetVelocity} RequestCmdHampSetVelocity\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHampSetVelocity.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdHampSetVelocity();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.velocity = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdHampSetVelocity message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdHampSetVelocity\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdHampSetVelocity} RequestCmdHampSetVelocity\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHampSetVelocity.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdHampSetVelocity message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdHampSetVelocity\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdHampSetVelocity.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.velocity != null && message.hasOwnProperty(\"velocity\"))\n                if (typeof message.velocity !== \"number\")\n                    return \"velocity: number expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdHampSetVelocity message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdHampSetVelocity\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdHampSetVelocity} RequestCmdHampSetVelocity\n         */\n        RequestCmdHampSetVelocity.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdHampSetVelocity)\n                return object;\n            let message = new $root.hdyRpc.RequestCmdHampSetVelocity();\n            if (object.velocity != null)\n                message.velocity = Number(object.velocity);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdHampSetVelocity message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdHampSetVelocity\n         * @static\n         * @param {hdyRpc.RequestCmdHampSetVelocity} message RequestCmdHampSetVelocity\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdHampSetVelocity.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.velocity = 0;\n            if (message.velocity != null && message.hasOwnProperty(\"velocity\"))\n                object.velocity = options.json && !isFinite(message.velocity) ? String(message.velocity) : message.velocity;\n            return object;\n        };\n\n        /**\n         * Converts this RequestCmdHampSetVelocity to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdHampSetVelocity\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdHampSetVelocity.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdHampSetVelocity;\n    })();\n\n    hdyRpc.ResponseCmdHampSetVelocity = (function() {\n\n        /**\n         * Properties of a ResponseCmdHampSetVelocity.\n         * @memberof hdyRpc\n         * @interface IResponseCmdHampSetVelocity\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdHampSetVelocity result\n         */\n\n        /**\n         * Constructs a new ResponseCmdHampSetVelocity.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdHampSetVelocity.\n         * @implements IResponseCmdHampSetVelocity\n         * @constructor\n         * @param {hdyRpc.IResponseCmdHampSetVelocity=} [properties] Properties to set\n         */\n        function ResponseCmdHampSetVelocity(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdHampSetVelocity result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdHampSetVelocity\n         * @instance\n         */\n        ResponseCmdHampSetVelocity.prototype.result = 0;\n\n        /**\n         * Creates a new ResponseCmdHampSetVelocity instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdHampSetVelocity\n         * @static\n         * @param {hdyRpc.IResponseCmdHampSetVelocity=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdHampSetVelocity} ResponseCmdHampSetVelocity instance\n         */\n        ResponseCmdHampSetVelocity.create = function create(properties) {\n            return new ResponseCmdHampSetVelocity(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHampSetVelocity message. Does not implicitly {@link hdyRpc.ResponseCmdHampSetVelocity.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdHampSetVelocity\n         * @static\n         * @param {hdyRpc.ResponseCmdHampSetVelocity} message ResponseCmdHampSetVelocity message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHampSetVelocity.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHampSetVelocity message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdHampSetVelocity.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdHampSetVelocity\n         * @static\n         * @param {hdyRpc.ResponseCmdHampSetVelocity} message ResponseCmdHampSetVelocity message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHampSetVelocity.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdHampSetVelocity message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdHampSetVelocity\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdHampSetVelocity} ResponseCmdHampSetVelocity\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHampSetVelocity.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdHampSetVelocity();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdHampSetVelocity message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdHampSetVelocity\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdHampSetVelocity} ResponseCmdHampSetVelocity\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHampSetVelocity.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdHampSetVelocity message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdHampSetVelocity\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdHampSetVelocity.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdHampSetVelocity message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdHampSetVelocity\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdHampSetVelocity} ResponseCmdHampSetVelocity\n         */\n        ResponseCmdHampSetVelocity.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdHampSetVelocity)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdHampSetVelocity();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdHampSetVelocity message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdHampSetVelocity\n         * @static\n         * @param {hdyRpc.ResponseCmdHampSetVelocity} message ResponseCmdHampSetVelocity\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdHampSetVelocity.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdHampSetVelocity to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdHampSetVelocity\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdHampSetVelocity.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdHampSetVelocity;\n    })();\n\n    hdyRpc.RequestCmdHampGetState = (function() {\n\n        /**\n         * Properties of a RequestCmdHampGetState.\n         * @memberof hdyRpc\n         * @interface IRequestCmdHampGetState\n         */\n\n        /**\n         * Constructs a new RequestCmdHampGetState.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdHampGetState.\n         * @implements IRequestCmdHampGetState\n         * @constructor\n         * @param {hdyRpc.IRequestCmdHampGetState=} [properties] Properties to set\n         */\n        function RequestCmdHampGetState(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new RequestCmdHampGetState instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdHampGetState\n         * @static\n         * @param {hdyRpc.IRequestCmdHampGetState=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdHampGetState} RequestCmdHampGetState instance\n         */\n        RequestCmdHampGetState.create = function create(properties) {\n            return new RequestCmdHampGetState(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdHampGetState message. Does not implicitly {@link hdyRpc.RequestCmdHampGetState.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdHampGetState\n         * @static\n         * @param {hdyRpc.RequestCmdHampGetState} message RequestCmdHampGetState message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHampGetState.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdHampGetState message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdHampGetState.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdHampGetState\n         * @static\n         * @param {hdyRpc.RequestCmdHampGetState} message RequestCmdHampGetState message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHampGetState.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdHampGetState message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdHampGetState\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdHampGetState} RequestCmdHampGetState\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHampGetState.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdHampGetState();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdHampGetState message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdHampGetState\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdHampGetState} RequestCmdHampGetState\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHampGetState.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdHampGetState message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdHampGetState\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdHampGetState.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdHampGetState message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdHampGetState\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdHampGetState} RequestCmdHampGetState\n         */\n        RequestCmdHampGetState.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdHampGetState)\n                return object;\n            return new $root.hdyRpc.RequestCmdHampGetState();\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdHampGetState message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdHampGetState\n         * @static\n         * @param {hdyRpc.RequestCmdHampGetState} message RequestCmdHampGetState\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdHampGetState.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this RequestCmdHampGetState to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdHampGetState\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdHampGetState.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdHampGetState;\n    })();\n\n    hdyRpc.ResponseCmdHampGetState = (function() {\n\n        /**\n         * Properties of a ResponseCmdHampGetState.\n         * @memberof hdyRpc\n         * @interface IResponseCmdHampGetState\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdHampGetState result\n         * @property {hdyRpc.HampStates|null} [state] ResponseCmdHampGetState state\n         */\n\n        /**\n         * Constructs a new ResponseCmdHampGetState.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdHampGetState.\n         * @implements IResponseCmdHampGetState\n         * @constructor\n         * @param {hdyRpc.IResponseCmdHampGetState=} [properties] Properties to set\n         */\n        function ResponseCmdHampGetState(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdHampGetState result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdHampGetState\n         * @instance\n         */\n        ResponseCmdHampGetState.prototype.result = 0;\n\n        /**\n         * ResponseCmdHampGetState state.\n         * @member {hdyRpc.HampStates} state\n         * @memberof hdyRpc.ResponseCmdHampGetState\n         * @instance\n         */\n        ResponseCmdHampGetState.prototype.state = 0;\n\n        /**\n         * Creates a new ResponseCmdHampGetState instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdHampGetState\n         * @static\n         * @param {hdyRpc.IResponseCmdHampGetState=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdHampGetState} ResponseCmdHampGetState instance\n         */\n        ResponseCmdHampGetState.create = function create(properties) {\n            return new ResponseCmdHampGetState(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHampGetState message. Does not implicitly {@link hdyRpc.ResponseCmdHampGetState.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdHampGetState\n         * @static\n         * @param {hdyRpc.ResponseCmdHampGetState} message ResponseCmdHampGetState message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHampGetState.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            if (message.state != null && Object.hasOwnProperty.call(message, \"state\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHampGetState message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdHampGetState.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdHampGetState\n         * @static\n         * @param {hdyRpc.ResponseCmdHampGetState} message ResponseCmdHampGetState message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHampGetState.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdHampGetState message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdHampGetState\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdHampGetState} ResponseCmdHampGetState\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHampGetState.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdHampGetState();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                case 2:\n                    message.state = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdHampGetState message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdHampGetState\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdHampGetState} ResponseCmdHampGetState\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHampGetState.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdHampGetState message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdHampGetState\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdHampGetState.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            if (message.state != null && message.hasOwnProperty(\"state\"))\n                switch (message.state) {\n                default:\n                    return \"state: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdHampGetState message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdHampGetState\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdHampGetState} ResponseCmdHampGetState\n         */\n        ResponseCmdHampGetState.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdHampGetState)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdHampGetState();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            switch (object.state) {\n            case \"HAMP_STATE_STOPPED\":\n            case 0:\n                message.state = 0;\n                break;\n            case \"HAMP_STATE_RUNNING\":\n            case 1:\n                message.state = 1;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdHampGetState message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdHampGetState\n         * @static\n         * @param {hdyRpc.ResponseCmdHampGetState} message ResponseCmdHampGetState\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdHampGetState.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n                object.state = options.enums === String ? \"HAMP_STATE_STOPPED\" : 0;\n            }\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            if (message.state != null && message.hasOwnProperty(\"state\"))\n                object.state = options.enums === String ? $root.hdyRpc.HampStates[message.state] : message.state;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdHampGetState to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdHampGetState\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdHampGetState.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdHampGetState;\n    })();\n\n    hdyRpc.RequestCmdHdspSetXaVa = (function() {\n\n        /**\n         * Properties of a RequestCmdHdspSetXaVa.\n         * @memberof hdyRpc\n         * @interface IRequestCmdHdspSetXaVa\n         * @property {number|null} [x] RequestCmdHdspSetXaVa x\n         * @property {number|null} [v] RequestCmdHdspSetXaVa v\n         */\n\n        /**\n         * Constructs a new RequestCmdHdspSetXaVa.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdHdspSetXaVa.\n         * @implements IRequestCmdHdspSetXaVa\n         * @constructor\n         * @param {hdyRpc.IRequestCmdHdspSetXaVa=} [properties] Properties to set\n         */\n        function RequestCmdHdspSetXaVa(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RequestCmdHdspSetXaVa x.\n         * @member {number} x\n         * @memberof hdyRpc.RequestCmdHdspSetXaVa\n         * @instance\n         */\n        RequestCmdHdspSetXaVa.prototype.x = 0;\n\n        /**\n         * RequestCmdHdspSetXaVa v.\n         * @member {number} v\n         * @memberof hdyRpc.RequestCmdHdspSetXaVa\n         * @instance\n         */\n        RequestCmdHdspSetXaVa.prototype.v = 0;\n\n        /**\n         * Creates a new RequestCmdHdspSetXaVa instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdHdspSetXaVa\n         * @static\n         * @param {hdyRpc.IRequestCmdHdspSetXaVa=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdHdspSetXaVa} RequestCmdHdspSetXaVa instance\n         */\n        RequestCmdHdspSetXaVa.create = function create(properties) {\n            return new RequestCmdHdspSetXaVa(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdHdspSetXaVa message. Does not implicitly {@link hdyRpc.RequestCmdHdspSetXaVa.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdHdspSetXaVa\n         * @static\n         * @param {hdyRpc.RequestCmdHdspSetXaVa} message RequestCmdHdspSetXaVa message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHdspSetXaVa.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.x != null && Object.hasOwnProperty.call(message, \"x\"))\n                writer.uint32(/* id 1, wireType 5 =*/13).float(message.x);\n            if (message.v != null && Object.hasOwnProperty.call(message, \"v\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.v);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdHdspSetXaVa message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdHdspSetXaVa.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdHdspSetXaVa\n         * @static\n         * @param {hdyRpc.RequestCmdHdspSetXaVa} message RequestCmdHdspSetXaVa message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHdspSetXaVa.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdHdspSetXaVa message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdHdspSetXaVa\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdHdspSetXaVa} RequestCmdHdspSetXaVa\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHdspSetXaVa.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdHdspSetXaVa();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.x = reader.float();\n                    break;\n                case 2:\n                    message.v = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdHdspSetXaVa message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdHdspSetXaVa\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdHdspSetXaVa} RequestCmdHdspSetXaVa\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHdspSetXaVa.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdHdspSetXaVa message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdHdspSetXaVa\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdHdspSetXaVa.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.x != null && message.hasOwnProperty(\"x\"))\n                if (typeof message.x !== \"number\")\n                    return \"x: number expected\";\n            if (message.v != null && message.hasOwnProperty(\"v\"))\n                if (typeof message.v !== \"number\")\n                    return \"v: number expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdHdspSetXaVa message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdHdspSetXaVa\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdHdspSetXaVa} RequestCmdHdspSetXaVa\n         */\n        RequestCmdHdspSetXaVa.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdHdspSetXaVa)\n                return object;\n            let message = new $root.hdyRpc.RequestCmdHdspSetXaVa();\n            if (object.x != null)\n                message.x = Number(object.x);\n            if (object.v != null)\n                message.v = Number(object.v);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdHdspSetXaVa message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdHdspSetXaVa\n         * @static\n         * @param {hdyRpc.RequestCmdHdspSetXaVa} message RequestCmdHdspSetXaVa\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdHdspSetXaVa.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.x = 0;\n                object.v = 0;\n            }\n            if (message.x != null && message.hasOwnProperty(\"x\"))\n                object.x = options.json && !isFinite(message.x) ? String(message.x) : message.x;\n            if (message.v != null && message.hasOwnProperty(\"v\"))\n                object.v = options.json && !isFinite(message.v) ? String(message.v) : message.v;\n            return object;\n        };\n\n        /**\n         * Converts this RequestCmdHdspSetXaVa to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdHdspSetXaVa\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdHdspSetXaVa.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdHdspSetXaVa;\n    })();\n\n    hdyRpc.ResponseCmdHdspSetXaVa = (function() {\n\n        /**\n         * Properties of a ResponseCmdHdspSetXaVa.\n         * @memberof hdyRpc\n         * @interface IResponseCmdHdspSetXaVa\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdHdspSetXaVa result\n         */\n\n        /**\n         * Constructs a new ResponseCmdHdspSetXaVa.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdHdspSetXaVa.\n         * @implements IResponseCmdHdspSetXaVa\n         * @constructor\n         * @param {hdyRpc.IResponseCmdHdspSetXaVa=} [properties] Properties to set\n         */\n        function ResponseCmdHdspSetXaVa(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdHdspSetXaVa result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdHdspSetXaVa\n         * @instance\n         */\n        ResponseCmdHdspSetXaVa.prototype.result = 0;\n\n        /**\n         * Creates a new ResponseCmdHdspSetXaVa instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdHdspSetXaVa\n         * @static\n         * @param {hdyRpc.IResponseCmdHdspSetXaVa=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdHdspSetXaVa} ResponseCmdHdspSetXaVa instance\n         */\n        ResponseCmdHdspSetXaVa.create = function create(properties) {\n            return new ResponseCmdHdspSetXaVa(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHdspSetXaVa message. Does not implicitly {@link hdyRpc.ResponseCmdHdspSetXaVa.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdHdspSetXaVa\n         * @static\n         * @param {hdyRpc.ResponseCmdHdspSetXaVa} message ResponseCmdHdspSetXaVa message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHdspSetXaVa.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHdspSetXaVa message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdHdspSetXaVa.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdHdspSetXaVa\n         * @static\n         * @param {hdyRpc.ResponseCmdHdspSetXaVa} message ResponseCmdHdspSetXaVa message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHdspSetXaVa.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdHdspSetXaVa message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdHdspSetXaVa\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdHdspSetXaVa} ResponseCmdHdspSetXaVa\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHdspSetXaVa.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdHdspSetXaVa();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdHdspSetXaVa message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdHdspSetXaVa\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdHdspSetXaVa} ResponseCmdHdspSetXaVa\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHdspSetXaVa.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdHdspSetXaVa message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdHdspSetXaVa\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdHdspSetXaVa.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdHdspSetXaVa message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdHdspSetXaVa\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdHdspSetXaVa} ResponseCmdHdspSetXaVa\n         */\n        ResponseCmdHdspSetXaVa.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdHdspSetXaVa)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdHdspSetXaVa();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdHdspSetXaVa message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdHdspSetXaVa\n         * @static\n         * @param {hdyRpc.ResponseCmdHdspSetXaVa} message ResponseCmdHdspSetXaVa\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdHdspSetXaVa.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdHdspSetXaVa to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdHdspSetXaVa\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdHdspSetXaVa.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdHdspSetXaVa;\n    })();\n\n    hdyRpc.RequestCmdHdspSetXpVa = (function() {\n\n        /**\n         * Properties of a RequestCmdHdspSetXpVa.\n         * @memberof hdyRpc\n         * @interface IRequestCmdHdspSetXpVa\n         * @property {number|null} [x] RequestCmdHdspSetXpVa x\n         * @property {number|null} [v] RequestCmdHdspSetXpVa v\n         */\n\n        /**\n         * Constructs a new RequestCmdHdspSetXpVa.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdHdspSetXpVa.\n         * @implements IRequestCmdHdspSetXpVa\n         * @constructor\n         * @param {hdyRpc.IRequestCmdHdspSetXpVa=} [properties] Properties to set\n         */\n        function RequestCmdHdspSetXpVa(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RequestCmdHdspSetXpVa x.\n         * @member {number} x\n         * @memberof hdyRpc.RequestCmdHdspSetXpVa\n         * @instance\n         */\n        RequestCmdHdspSetXpVa.prototype.x = 0;\n\n        /**\n         * RequestCmdHdspSetXpVa v.\n         * @member {number} v\n         * @memberof hdyRpc.RequestCmdHdspSetXpVa\n         * @instance\n         */\n        RequestCmdHdspSetXpVa.prototype.v = 0;\n\n        /**\n         * Creates a new RequestCmdHdspSetXpVa instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdHdspSetXpVa\n         * @static\n         * @param {hdyRpc.IRequestCmdHdspSetXpVa=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdHdspSetXpVa} RequestCmdHdspSetXpVa instance\n         */\n        RequestCmdHdspSetXpVa.create = function create(properties) {\n            return new RequestCmdHdspSetXpVa(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdHdspSetXpVa message. Does not implicitly {@link hdyRpc.RequestCmdHdspSetXpVa.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdHdspSetXpVa\n         * @static\n         * @param {hdyRpc.RequestCmdHdspSetXpVa} message RequestCmdHdspSetXpVa message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHdspSetXpVa.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.x != null && Object.hasOwnProperty.call(message, \"x\"))\n                writer.uint32(/* id 1, wireType 5 =*/13).float(message.x);\n            if (message.v != null && Object.hasOwnProperty.call(message, \"v\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.v);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdHdspSetXpVa message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdHdspSetXpVa.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdHdspSetXpVa\n         * @static\n         * @param {hdyRpc.RequestCmdHdspSetXpVa} message RequestCmdHdspSetXpVa message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHdspSetXpVa.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdHdspSetXpVa message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdHdspSetXpVa\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdHdspSetXpVa} RequestCmdHdspSetXpVa\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHdspSetXpVa.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdHdspSetXpVa();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.x = reader.float();\n                    break;\n                case 2:\n                    message.v = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdHdspSetXpVa message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdHdspSetXpVa\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdHdspSetXpVa} RequestCmdHdspSetXpVa\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHdspSetXpVa.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdHdspSetXpVa message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdHdspSetXpVa\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdHdspSetXpVa.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.x != null && message.hasOwnProperty(\"x\"))\n                if (typeof message.x !== \"number\")\n                    return \"x: number expected\";\n            if (message.v != null && message.hasOwnProperty(\"v\"))\n                if (typeof message.v !== \"number\")\n                    return \"v: number expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdHdspSetXpVa message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdHdspSetXpVa\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdHdspSetXpVa} RequestCmdHdspSetXpVa\n         */\n        RequestCmdHdspSetXpVa.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdHdspSetXpVa)\n                return object;\n            let message = new $root.hdyRpc.RequestCmdHdspSetXpVa();\n            if (object.x != null)\n                message.x = Number(object.x);\n            if (object.v != null)\n                message.v = Number(object.v);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdHdspSetXpVa message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdHdspSetXpVa\n         * @static\n         * @param {hdyRpc.RequestCmdHdspSetXpVa} message RequestCmdHdspSetXpVa\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdHdspSetXpVa.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.x = 0;\n                object.v = 0;\n            }\n            if (message.x != null && message.hasOwnProperty(\"x\"))\n                object.x = options.json && !isFinite(message.x) ? String(message.x) : message.x;\n            if (message.v != null && message.hasOwnProperty(\"v\"))\n                object.v = options.json && !isFinite(message.v) ? String(message.v) : message.v;\n            return object;\n        };\n\n        /**\n         * Converts this RequestCmdHdspSetXpVa to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdHdspSetXpVa\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdHdspSetXpVa.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdHdspSetXpVa;\n    })();\n\n    hdyRpc.ResponseCmdHdspSetXpVa = (function() {\n\n        /**\n         * Properties of a ResponseCmdHdspSetXpVa.\n         * @memberof hdyRpc\n         * @interface IResponseCmdHdspSetXpVa\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdHdspSetXpVa result\n         */\n\n        /**\n         * Constructs a new ResponseCmdHdspSetXpVa.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdHdspSetXpVa.\n         * @implements IResponseCmdHdspSetXpVa\n         * @constructor\n         * @param {hdyRpc.IResponseCmdHdspSetXpVa=} [properties] Properties to set\n         */\n        function ResponseCmdHdspSetXpVa(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdHdspSetXpVa result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdHdspSetXpVa\n         * @instance\n         */\n        ResponseCmdHdspSetXpVa.prototype.result = 0;\n\n        /**\n         * Creates a new ResponseCmdHdspSetXpVa instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdHdspSetXpVa\n         * @static\n         * @param {hdyRpc.IResponseCmdHdspSetXpVa=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdHdspSetXpVa} ResponseCmdHdspSetXpVa instance\n         */\n        ResponseCmdHdspSetXpVa.create = function create(properties) {\n            return new ResponseCmdHdspSetXpVa(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHdspSetXpVa message. Does not implicitly {@link hdyRpc.ResponseCmdHdspSetXpVa.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdHdspSetXpVa\n         * @static\n         * @param {hdyRpc.ResponseCmdHdspSetXpVa} message ResponseCmdHdspSetXpVa message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHdspSetXpVa.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHdspSetXpVa message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdHdspSetXpVa.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdHdspSetXpVa\n         * @static\n         * @param {hdyRpc.ResponseCmdHdspSetXpVa} message ResponseCmdHdspSetXpVa message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHdspSetXpVa.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdHdspSetXpVa message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdHdspSetXpVa\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdHdspSetXpVa} ResponseCmdHdspSetXpVa\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHdspSetXpVa.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdHdspSetXpVa();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdHdspSetXpVa message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdHdspSetXpVa\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdHdspSetXpVa} ResponseCmdHdspSetXpVa\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHdspSetXpVa.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdHdspSetXpVa message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdHdspSetXpVa\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdHdspSetXpVa.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdHdspSetXpVa message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdHdspSetXpVa\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdHdspSetXpVa} ResponseCmdHdspSetXpVa\n         */\n        ResponseCmdHdspSetXpVa.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdHdspSetXpVa)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdHdspSetXpVa();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdHdspSetXpVa message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdHdspSetXpVa\n         * @static\n         * @param {hdyRpc.ResponseCmdHdspSetXpVa} message ResponseCmdHdspSetXpVa\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdHdspSetXpVa.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdHdspSetXpVa to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdHdspSetXpVa\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdHdspSetXpVa.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdHdspSetXpVa;\n    })();\n\n    hdyRpc.RequestCmdHdspSetXpVp = (function() {\n\n        /**\n         * Properties of a RequestCmdHdspSetXpVp.\n         * @memberof hdyRpc\n         * @interface IRequestCmdHdspSetXpVp\n         * @property {number|null} [x] RequestCmdHdspSetXpVp x\n         * @property {number|null} [v] RequestCmdHdspSetXpVp v\n         */\n\n        /**\n         * Constructs a new RequestCmdHdspSetXpVp.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdHdspSetXpVp.\n         * @implements IRequestCmdHdspSetXpVp\n         * @constructor\n         * @param {hdyRpc.IRequestCmdHdspSetXpVp=} [properties] Properties to set\n         */\n        function RequestCmdHdspSetXpVp(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RequestCmdHdspSetXpVp x.\n         * @member {number} x\n         * @memberof hdyRpc.RequestCmdHdspSetXpVp\n         * @instance\n         */\n        RequestCmdHdspSetXpVp.prototype.x = 0;\n\n        /**\n         * RequestCmdHdspSetXpVp v.\n         * @member {number} v\n         * @memberof hdyRpc.RequestCmdHdspSetXpVp\n         * @instance\n         */\n        RequestCmdHdspSetXpVp.prototype.v = 0;\n\n        /**\n         * Creates a new RequestCmdHdspSetXpVp instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdHdspSetXpVp\n         * @static\n         * @param {hdyRpc.IRequestCmdHdspSetXpVp=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdHdspSetXpVp} RequestCmdHdspSetXpVp instance\n         */\n        RequestCmdHdspSetXpVp.create = function create(properties) {\n            return new RequestCmdHdspSetXpVp(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdHdspSetXpVp message. Does not implicitly {@link hdyRpc.RequestCmdHdspSetXpVp.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdHdspSetXpVp\n         * @static\n         * @param {hdyRpc.RequestCmdHdspSetXpVp} message RequestCmdHdspSetXpVp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHdspSetXpVp.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.x != null && Object.hasOwnProperty.call(message, \"x\"))\n                writer.uint32(/* id 1, wireType 5 =*/13).float(message.x);\n            if (message.v != null && Object.hasOwnProperty.call(message, \"v\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.v);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdHdspSetXpVp message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdHdspSetXpVp.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdHdspSetXpVp\n         * @static\n         * @param {hdyRpc.RequestCmdHdspSetXpVp} message RequestCmdHdspSetXpVp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHdspSetXpVp.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdHdspSetXpVp message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdHdspSetXpVp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdHdspSetXpVp} RequestCmdHdspSetXpVp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHdspSetXpVp.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdHdspSetXpVp();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.x = reader.float();\n                    break;\n                case 2:\n                    message.v = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdHdspSetXpVp message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdHdspSetXpVp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdHdspSetXpVp} RequestCmdHdspSetXpVp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHdspSetXpVp.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdHdspSetXpVp message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdHdspSetXpVp\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdHdspSetXpVp.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.x != null && message.hasOwnProperty(\"x\"))\n                if (typeof message.x !== \"number\")\n                    return \"x: number expected\";\n            if (message.v != null && message.hasOwnProperty(\"v\"))\n                if (typeof message.v !== \"number\")\n                    return \"v: number expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdHdspSetXpVp message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdHdspSetXpVp\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdHdspSetXpVp} RequestCmdHdspSetXpVp\n         */\n        RequestCmdHdspSetXpVp.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdHdspSetXpVp)\n                return object;\n            let message = new $root.hdyRpc.RequestCmdHdspSetXpVp();\n            if (object.x != null)\n                message.x = Number(object.x);\n            if (object.v != null)\n                message.v = Number(object.v);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdHdspSetXpVp message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdHdspSetXpVp\n         * @static\n         * @param {hdyRpc.RequestCmdHdspSetXpVp} message RequestCmdHdspSetXpVp\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdHdspSetXpVp.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.x = 0;\n                object.v = 0;\n            }\n            if (message.x != null && message.hasOwnProperty(\"x\"))\n                object.x = options.json && !isFinite(message.x) ? String(message.x) : message.x;\n            if (message.v != null && message.hasOwnProperty(\"v\"))\n                object.v = options.json && !isFinite(message.v) ? String(message.v) : message.v;\n            return object;\n        };\n\n        /**\n         * Converts this RequestCmdHdspSetXpVp to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdHdspSetXpVp\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdHdspSetXpVp.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdHdspSetXpVp;\n    })();\n\n    hdyRpc.ResponseCmdHdspSetXpVp = (function() {\n\n        /**\n         * Properties of a ResponseCmdHdspSetXpVp.\n         * @memberof hdyRpc\n         * @interface IResponseCmdHdspSetXpVp\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdHdspSetXpVp result\n         */\n\n        /**\n         * Constructs a new ResponseCmdHdspSetXpVp.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdHdspSetXpVp.\n         * @implements IResponseCmdHdspSetXpVp\n         * @constructor\n         * @param {hdyRpc.IResponseCmdHdspSetXpVp=} [properties] Properties to set\n         */\n        function ResponseCmdHdspSetXpVp(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdHdspSetXpVp result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdHdspSetXpVp\n         * @instance\n         */\n        ResponseCmdHdspSetXpVp.prototype.result = 0;\n\n        /**\n         * Creates a new ResponseCmdHdspSetXpVp instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdHdspSetXpVp\n         * @static\n         * @param {hdyRpc.IResponseCmdHdspSetXpVp=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdHdspSetXpVp} ResponseCmdHdspSetXpVp instance\n         */\n        ResponseCmdHdspSetXpVp.create = function create(properties) {\n            return new ResponseCmdHdspSetXpVp(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHdspSetXpVp message. Does not implicitly {@link hdyRpc.ResponseCmdHdspSetXpVp.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdHdspSetXpVp\n         * @static\n         * @param {hdyRpc.ResponseCmdHdspSetXpVp} message ResponseCmdHdspSetXpVp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHdspSetXpVp.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHdspSetXpVp message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdHdspSetXpVp.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdHdspSetXpVp\n         * @static\n         * @param {hdyRpc.ResponseCmdHdspSetXpVp} message ResponseCmdHdspSetXpVp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHdspSetXpVp.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdHdspSetXpVp message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdHdspSetXpVp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdHdspSetXpVp} ResponseCmdHdspSetXpVp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHdspSetXpVp.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdHdspSetXpVp();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdHdspSetXpVp message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdHdspSetXpVp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdHdspSetXpVp} ResponseCmdHdspSetXpVp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHdspSetXpVp.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdHdspSetXpVp message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdHdspSetXpVp\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdHdspSetXpVp.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdHdspSetXpVp message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdHdspSetXpVp\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdHdspSetXpVp} ResponseCmdHdspSetXpVp\n         */\n        ResponseCmdHdspSetXpVp.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdHdspSetXpVp)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdHdspSetXpVp();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdHdspSetXpVp message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdHdspSetXpVp\n         * @static\n         * @param {hdyRpc.ResponseCmdHdspSetXpVp} message ResponseCmdHdspSetXpVp\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdHdspSetXpVp.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdHdspSetXpVp to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdHdspSetXpVp\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdHdspSetXpVp.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdHdspSetXpVp;\n    })();\n\n    hdyRpc.RequestCmdHdspSetXaT = (function() {\n\n        /**\n         * Properties of a RequestCmdHdspSetXaT.\n         * @memberof hdyRpc\n         * @interface IRequestCmdHdspSetXaT\n         * @property {number|null} [x] RequestCmdHdspSetXaT x\n         * @property {number|null} [t] RequestCmdHdspSetXaT t\n         */\n\n        /**\n         * Constructs a new RequestCmdHdspSetXaT.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdHdspSetXaT.\n         * @implements IRequestCmdHdspSetXaT\n         * @constructor\n         * @param {hdyRpc.IRequestCmdHdspSetXaT=} [properties] Properties to set\n         */\n        function RequestCmdHdspSetXaT(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RequestCmdHdspSetXaT x.\n         * @member {number} x\n         * @memberof hdyRpc.RequestCmdHdspSetXaT\n         * @instance\n         */\n        RequestCmdHdspSetXaT.prototype.x = 0;\n\n        /**\n         * RequestCmdHdspSetXaT t.\n         * @member {number} t\n         * @memberof hdyRpc.RequestCmdHdspSetXaT\n         * @instance\n         */\n        RequestCmdHdspSetXaT.prototype.t = 0;\n\n        /**\n         * Creates a new RequestCmdHdspSetXaT instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdHdspSetXaT\n         * @static\n         * @param {hdyRpc.IRequestCmdHdspSetXaT=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdHdspSetXaT} RequestCmdHdspSetXaT instance\n         */\n        RequestCmdHdspSetXaT.create = function create(properties) {\n            return new RequestCmdHdspSetXaT(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdHdspSetXaT message. Does not implicitly {@link hdyRpc.RequestCmdHdspSetXaT.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdHdspSetXaT\n         * @static\n         * @param {hdyRpc.RequestCmdHdspSetXaT} message RequestCmdHdspSetXaT message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHdspSetXaT.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.x != null && Object.hasOwnProperty.call(message, \"x\"))\n                writer.uint32(/* id 1, wireType 5 =*/13).float(message.x);\n            if (message.t != null && Object.hasOwnProperty.call(message, \"t\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.t);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdHdspSetXaT message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdHdspSetXaT.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdHdspSetXaT\n         * @static\n         * @param {hdyRpc.RequestCmdHdspSetXaT} message RequestCmdHdspSetXaT message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHdspSetXaT.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdHdspSetXaT message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdHdspSetXaT\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdHdspSetXaT} RequestCmdHdspSetXaT\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHdspSetXaT.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdHdspSetXaT();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.x = reader.float();\n                    break;\n                case 2:\n                    message.t = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdHdspSetXaT message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdHdspSetXaT\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdHdspSetXaT} RequestCmdHdspSetXaT\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHdspSetXaT.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdHdspSetXaT message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdHdspSetXaT\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdHdspSetXaT.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.x != null && message.hasOwnProperty(\"x\"))\n                if (typeof message.x !== \"number\")\n                    return \"x: number expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                if (!$util.isInteger(message.t))\n                    return \"t: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdHdspSetXaT message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdHdspSetXaT\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdHdspSetXaT} RequestCmdHdspSetXaT\n         */\n        RequestCmdHdspSetXaT.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdHdspSetXaT)\n                return object;\n            let message = new $root.hdyRpc.RequestCmdHdspSetXaT();\n            if (object.x != null)\n                message.x = Number(object.x);\n            if (object.t != null)\n                message.t = object.t >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdHdspSetXaT message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdHdspSetXaT\n         * @static\n         * @param {hdyRpc.RequestCmdHdspSetXaT} message RequestCmdHdspSetXaT\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdHdspSetXaT.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.x = 0;\n                object.t = 0;\n            }\n            if (message.x != null && message.hasOwnProperty(\"x\"))\n                object.x = options.json && !isFinite(message.x) ? String(message.x) : message.x;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = message.t;\n            return object;\n        };\n\n        /**\n         * Converts this RequestCmdHdspSetXaT to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdHdspSetXaT\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdHdspSetXaT.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdHdspSetXaT;\n    })();\n\n    hdyRpc.ResponseCmdHdspSetXaT = (function() {\n\n        /**\n         * Properties of a ResponseCmdHdspSetXaT.\n         * @memberof hdyRpc\n         * @interface IResponseCmdHdspSetXaT\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdHdspSetXaT result\n         */\n\n        /**\n         * Constructs a new ResponseCmdHdspSetXaT.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdHdspSetXaT.\n         * @implements IResponseCmdHdspSetXaT\n         * @constructor\n         * @param {hdyRpc.IResponseCmdHdspSetXaT=} [properties] Properties to set\n         */\n        function ResponseCmdHdspSetXaT(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdHdspSetXaT result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdHdspSetXaT\n         * @instance\n         */\n        ResponseCmdHdspSetXaT.prototype.result = 0;\n\n        /**\n         * Creates a new ResponseCmdHdspSetXaT instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdHdspSetXaT\n         * @static\n         * @param {hdyRpc.IResponseCmdHdspSetXaT=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdHdspSetXaT} ResponseCmdHdspSetXaT instance\n         */\n        ResponseCmdHdspSetXaT.create = function create(properties) {\n            return new ResponseCmdHdspSetXaT(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHdspSetXaT message. Does not implicitly {@link hdyRpc.ResponseCmdHdspSetXaT.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdHdspSetXaT\n         * @static\n         * @param {hdyRpc.ResponseCmdHdspSetXaT} message ResponseCmdHdspSetXaT message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHdspSetXaT.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHdspSetXaT message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdHdspSetXaT.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdHdspSetXaT\n         * @static\n         * @param {hdyRpc.ResponseCmdHdspSetXaT} message ResponseCmdHdspSetXaT message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHdspSetXaT.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdHdspSetXaT message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdHdspSetXaT\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdHdspSetXaT} ResponseCmdHdspSetXaT\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHdspSetXaT.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdHdspSetXaT();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdHdspSetXaT message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdHdspSetXaT\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdHdspSetXaT} ResponseCmdHdspSetXaT\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHdspSetXaT.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdHdspSetXaT message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdHdspSetXaT\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdHdspSetXaT.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdHdspSetXaT message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdHdspSetXaT\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdHdspSetXaT} ResponseCmdHdspSetXaT\n         */\n        ResponseCmdHdspSetXaT.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdHdspSetXaT)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdHdspSetXaT();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdHdspSetXaT message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdHdspSetXaT\n         * @static\n         * @param {hdyRpc.ResponseCmdHdspSetXaT} message ResponseCmdHdspSetXaT\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdHdspSetXaT.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdHdspSetXaT to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdHdspSetXaT\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdHdspSetXaT.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdHdspSetXaT;\n    })();\n\n    hdyRpc.RequestCmdHdspSetXpT = (function() {\n\n        /**\n         * Properties of a RequestCmdHdspSetXpT.\n         * @memberof hdyRpc\n         * @interface IRequestCmdHdspSetXpT\n         * @property {number|null} [x] RequestCmdHdspSetXpT x\n         * @property {number|null} [t] RequestCmdHdspSetXpT t\n         */\n\n        /**\n         * Constructs a new RequestCmdHdspSetXpT.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdHdspSetXpT.\n         * @implements IRequestCmdHdspSetXpT\n         * @constructor\n         * @param {hdyRpc.IRequestCmdHdspSetXpT=} [properties] Properties to set\n         */\n        function RequestCmdHdspSetXpT(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RequestCmdHdspSetXpT x.\n         * @member {number} x\n         * @memberof hdyRpc.RequestCmdHdspSetXpT\n         * @instance\n         */\n        RequestCmdHdspSetXpT.prototype.x = 0;\n\n        /**\n         * RequestCmdHdspSetXpT t.\n         * @member {number} t\n         * @memberof hdyRpc.RequestCmdHdspSetXpT\n         * @instance\n         */\n        RequestCmdHdspSetXpT.prototype.t = 0;\n\n        /**\n         * Creates a new RequestCmdHdspSetXpT instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdHdspSetXpT\n         * @static\n         * @param {hdyRpc.IRequestCmdHdspSetXpT=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdHdspSetXpT} RequestCmdHdspSetXpT instance\n         */\n        RequestCmdHdspSetXpT.create = function create(properties) {\n            return new RequestCmdHdspSetXpT(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdHdspSetXpT message. Does not implicitly {@link hdyRpc.RequestCmdHdspSetXpT.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdHdspSetXpT\n         * @static\n         * @param {hdyRpc.RequestCmdHdspSetXpT} message RequestCmdHdspSetXpT message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHdspSetXpT.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.x != null && Object.hasOwnProperty.call(message, \"x\"))\n                writer.uint32(/* id 1, wireType 5 =*/13).float(message.x);\n            if (message.t != null && Object.hasOwnProperty.call(message, \"t\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.t);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdHdspSetXpT message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdHdspSetXpT.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdHdspSetXpT\n         * @static\n         * @param {hdyRpc.RequestCmdHdspSetXpT} message RequestCmdHdspSetXpT message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHdspSetXpT.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdHdspSetXpT message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdHdspSetXpT\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdHdspSetXpT} RequestCmdHdspSetXpT\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHdspSetXpT.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdHdspSetXpT();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.x = reader.float();\n                    break;\n                case 2:\n                    message.t = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdHdspSetXpT message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdHdspSetXpT\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdHdspSetXpT} RequestCmdHdspSetXpT\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHdspSetXpT.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdHdspSetXpT message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdHdspSetXpT\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdHdspSetXpT.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.x != null && message.hasOwnProperty(\"x\"))\n                if (typeof message.x !== \"number\")\n                    return \"x: number expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                if (!$util.isInteger(message.t))\n                    return \"t: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdHdspSetXpT message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdHdspSetXpT\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdHdspSetXpT} RequestCmdHdspSetXpT\n         */\n        RequestCmdHdspSetXpT.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdHdspSetXpT)\n                return object;\n            let message = new $root.hdyRpc.RequestCmdHdspSetXpT();\n            if (object.x != null)\n                message.x = Number(object.x);\n            if (object.t != null)\n                message.t = object.t >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdHdspSetXpT message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdHdspSetXpT\n         * @static\n         * @param {hdyRpc.RequestCmdHdspSetXpT} message RequestCmdHdspSetXpT\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdHdspSetXpT.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.x = 0;\n                object.t = 0;\n            }\n            if (message.x != null && message.hasOwnProperty(\"x\"))\n                object.x = options.json && !isFinite(message.x) ? String(message.x) : message.x;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = message.t;\n            return object;\n        };\n\n        /**\n         * Converts this RequestCmdHdspSetXpT to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdHdspSetXpT\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdHdspSetXpT.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdHdspSetXpT;\n    })();\n\n    hdyRpc.ResponseCmdHdspSetXpT = (function() {\n\n        /**\n         * Properties of a ResponseCmdHdspSetXpT.\n         * @memberof hdyRpc\n         * @interface IResponseCmdHdspSetXpT\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdHdspSetXpT result\n         */\n\n        /**\n         * Constructs a new ResponseCmdHdspSetXpT.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdHdspSetXpT.\n         * @implements IResponseCmdHdspSetXpT\n         * @constructor\n         * @param {hdyRpc.IResponseCmdHdspSetXpT=} [properties] Properties to set\n         */\n        function ResponseCmdHdspSetXpT(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdHdspSetXpT result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdHdspSetXpT\n         * @instance\n         */\n        ResponseCmdHdspSetXpT.prototype.result = 0;\n\n        /**\n         * Creates a new ResponseCmdHdspSetXpT instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdHdspSetXpT\n         * @static\n         * @param {hdyRpc.IResponseCmdHdspSetXpT=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdHdspSetXpT} ResponseCmdHdspSetXpT instance\n         */\n        ResponseCmdHdspSetXpT.create = function create(properties) {\n            return new ResponseCmdHdspSetXpT(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHdspSetXpT message. Does not implicitly {@link hdyRpc.ResponseCmdHdspSetXpT.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdHdspSetXpT\n         * @static\n         * @param {hdyRpc.ResponseCmdHdspSetXpT} message ResponseCmdHdspSetXpT message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHdspSetXpT.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHdspSetXpT message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdHdspSetXpT.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdHdspSetXpT\n         * @static\n         * @param {hdyRpc.ResponseCmdHdspSetXpT} message ResponseCmdHdspSetXpT message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHdspSetXpT.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdHdspSetXpT message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdHdspSetXpT\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdHdspSetXpT} ResponseCmdHdspSetXpT\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHdspSetXpT.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdHdspSetXpT();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdHdspSetXpT message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdHdspSetXpT\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdHdspSetXpT} ResponseCmdHdspSetXpT\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHdspSetXpT.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdHdspSetXpT message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdHdspSetXpT\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdHdspSetXpT.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdHdspSetXpT message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdHdspSetXpT\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdHdspSetXpT} ResponseCmdHdspSetXpT\n         */\n        ResponseCmdHdspSetXpT.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdHdspSetXpT)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdHdspSetXpT();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdHdspSetXpT message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdHdspSetXpT\n         * @static\n         * @param {hdyRpc.ResponseCmdHdspSetXpT} message ResponseCmdHdspSetXpT\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdHdspSetXpT.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdHdspSetXpT to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdHdspSetXpT\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdHdspSetXpT.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdHdspSetXpT;\n    })();\n\n    hdyRpc.RequestCmdHdspSetXaVp = (function() {\n\n        /**\n         * Properties of a RequestCmdHdspSetXaVp.\n         * @memberof hdyRpc\n         * @interface IRequestCmdHdspSetXaVp\n         * @property {number|null} [x] RequestCmdHdspSetXaVp x\n         * @property {number|null} [v] RequestCmdHdspSetXaVp v\n         */\n\n        /**\n         * Constructs a new RequestCmdHdspSetXaVp.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdHdspSetXaVp.\n         * @implements IRequestCmdHdspSetXaVp\n         * @constructor\n         * @param {hdyRpc.IRequestCmdHdspSetXaVp=} [properties] Properties to set\n         */\n        function RequestCmdHdspSetXaVp(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RequestCmdHdspSetXaVp x.\n         * @member {number} x\n         * @memberof hdyRpc.RequestCmdHdspSetXaVp\n         * @instance\n         */\n        RequestCmdHdspSetXaVp.prototype.x = 0;\n\n        /**\n         * RequestCmdHdspSetXaVp v.\n         * @member {number} v\n         * @memberof hdyRpc.RequestCmdHdspSetXaVp\n         * @instance\n         */\n        RequestCmdHdspSetXaVp.prototype.v = 0;\n\n        /**\n         * Creates a new RequestCmdHdspSetXaVp instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdHdspSetXaVp\n         * @static\n         * @param {hdyRpc.IRequestCmdHdspSetXaVp=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdHdspSetXaVp} RequestCmdHdspSetXaVp instance\n         */\n        RequestCmdHdspSetXaVp.create = function create(properties) {\n            return new RequestCmdHdspSetXaVp(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdHdspSetXaVp message. Does not implicitly {@link hdyRpc.RequestCmdHdspSetXaVp.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdHdspSetXaVp\n         * @static\n         * @param {hdyRpc.RequestCmdHdspSetXaVp} message RequestCmdHdspSetXaVp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHdspSetXaVp.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.x != null && Object.hasOwnProperty.call(message, \"x\"))\n                writer.uint32(/* id 1, wireType 5 =*/13).float(message.x);\n            if (message.v != null && Object.hasOwnProperty.call(message, \"v\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.v);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdHdspSetXaVp message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdHdspSetXaVp.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdHdspSetXaVp\n         * @static\n         * @param {hdyRpc.RequestCmdHdspSetXaVp} message RequestCmdHdspSetXaVp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHdspSetXaVp.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdHdspSetXaVp message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdHdspSetXaVp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdHdspSetXaVp} RequestCmdHdspSetXaVp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHdspSetXaVp.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdHdspSetXaVp();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.x = reader.float();\n                    break;\n                case 2:\n                    message.v = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdHdspSetXaVp message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdHdspSetXaVp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdHdspSetXaVp} RequestCmdHdspSetXaVp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHdspSetXaVp.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdHdspSetXaVp message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdHdspSetXaVp\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdHdspSetXaVp.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.x != null && message.hasOwnProperty(\"x\"))\n                if (typeof message.x !== \"number\")\n                    return \"x: number expected\";\n            if (message.v != null && message.hasOwnProperty(\"v\"))\n                if (typeof message.v !== \"number\")\n                    return \"v: number expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdHdspSetXaVp message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdHdspSetXaVp\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdHdspSetXaVp} RequestCmdHdspSetXaVp\n         */\n        RequestCmdHdspSetXaVp.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdHdspSetXaVp)\n                return object;\n            let message = new $root.hdyRpc.RequestCmdHdspSetXaVp();\n            if (object.x != null)\n                message.x = Number(object.x);\n            if (object.v != null)\n                message.v = Number(object.v);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdHdspSetXaVp message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdHdspSetXaVp\n         * @static\n         * @param {hdyRpc.RequestCmdHdspSetXaVp} message RequestCmdHdspSetXaVp\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdHdspSetXaVp.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.x = 0;\n                object.v = 0;\n            }\n            if (message.x != null && message.hasOwnProperty(\"x\"))\n                object.x = options.json && !isFinite(message.x) ? String(message.x) : message.x;\n            if (message.v != null && message.hasOwnProperty(\"v\"))\n                object.v = options.json && !isFinite(message.v) ? String(message.v) : message.v;\n            return object;\n        };\n\n        /**\n         * Converts this RequestCmdHdspSetXaVp to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdHdspSetXaVp\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdHdspSetXaVp.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdHdspSetXaVp;\n    })();\n\n    hdyRpc.ResponseCmdHdspSetXaVp = (function() {\n\n        /**\n         * Properties of a ResponseCmdHdspSetXaVp.\n         * @memberof hdyRpc\n         * @interface IResponseCmdHdspSetXaVp\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdHdspSetXaVp result\n         */\n\n        /**\n         * Constructs a new ResponseCmdHdspSetXaVp.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdHdspSetXaVp.\n         * @implements IResponseCmdHdspSetXaVp\n         * @constructor\n         * @param {hdyRpc.IResponseCmdHdspSetXaVp=} [properties] Properties to set\n         */\n        function ResponseCmdHdspSetXaVp(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdHdspSetXaVp result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdHdspSetXaVp\n         * @instance\n         */\n        ResponseCmdHdspSetXaVp.prototype.result = 0;\n\n        /**\n         * Creates a new ResponseCmdHdspSetXaVp instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdHdspSetXaVp\n         * @static\n         * @param {hdyRpc.IResponseCmdHdspSetXaVp=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdHdspSetXaVp} ResponseCmdHdspSetXaVp instance\n         */\n        ResponseCmdHdspSetXaVp.create = function create(properties) {\n            return new ResponseCmdHdspSetXaVp(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHdspSetXaVp message. Does not implicitly {@link hdyRpc.ResponseCmdHdspSetXaVp.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdHdspSetXaVp\n         * @static\n         * @param {hdyRpc.ResponseCmdHdspSetXaVp} message ResponseCmdHdspSetXaVp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHdspSetXaVp.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHdspSetXaVp message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdHdspSetXaVp.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdHdspSetXaVp\n         * @static\n         * @param {hdyRpc.ResponseCmdHdspSetXaVp} message ResponseCmdHdspSetXaVp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHdspSetXaVp.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdHdspSetXaVp message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdHdspSetXaVp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdHdspSetXaVp} ResponseCmdHdspSetXaVp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHdspSetXaVp.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdHdspSetXaVp();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdHdspSetXaVp message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdHdspSetXaVp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdHdspSetXaVp} ResponseCmdHdspSetXaVp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHdspSetXaVp.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdHdspSetXaVp message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdHdspSetXaVp\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdHdspSetXaVp.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdHdspSetXaVp message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdHdspSetXaVp\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdHdspSetXaVp} ResponseCmdHdspSetXaVp\n         */\n        ResponseCmdHdspSetXaVp.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdHdspSetXaVp)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdHdspSetXaVp();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdHdspSetXaVp message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdHdspSetXaVp\n         * @static\n         * @param {hdyRpc.ResponseCmdHdspSetXaVp} message ResponseCmdHdspSetXaVp\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdHdspSetXaVp.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdHdspSetXaVp to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdHdspSetXaVp\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdHdspSetXaVp.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdHdspSetXaVp;\n    })();\n\n    hdyRpc.RequestCmdHstpGetTime = (function() {\n\n        /**\n         * Properties of a RequestCmdHstpGetTime.\n         * @memberof hdyRpc\n         * @interface IRequestCmdHstpGetTime\n         * @property {number|Long|null} [time] RequestCmdHstpGetTime time\n         */\n\n        /**\n         * Constructs a new RequestCmdHstpGetTime.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdHstpGetTime.\n         * @implements IRequestCmdHstpGetTime\n         * @constructor\n         * @param {hdyRpc.IRequestCmdHstpGetTime=} [properties] Properties to set\n         */\n        function RequestCmdHstpGetTime(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RequestCmdHstpGetTime time.\n         * @member {number|Long} time\n         * @memberof hdyRpc.RequestCmdHstpGetTime\n         * @instance\n         */\n        RequestCmdHstpGetTime.prototype.time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new RequestCmdHstpGetTime instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdHstpGetTime\n         * @static\n         * @param {hdyRpc.IRequestCmdHstpGetTime=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdHstpGetTime} RequestCmdHstpGetTime instance\n         */\n        RequestCmdHstpGetTime.create = function create(properties) {\n            return new RequestCmdHstpGetTime(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdHstpGetTime message. Does not implicitly {@link hdyRpc.RequestCmdHstpGetTime.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdHstpGetTime\n         * @static\n         * @param {hdyRpc.RequestCmdHstpGetTime} message RequestCmdHstpGetTime message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHstpGetTime.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.time != null && Object.hasOwnProperty.call(message, \"time\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.time);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdHstpGetTime message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdHstpGetTime.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdHstpGetTime\n         * @static\n         * @param {hdyRpc.RequestCmdHstpGetTime} message RequestCmdHstpGetTime message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHstpGetTime.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdHstpGetTime message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdHstpGetTime\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdHstpGetTime} RequestCmdHstpGetTime\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHstpGetTime.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdHstpGetTime();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.time = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdHstpGetTime message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdHstpGetTime\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdHstpGetTime} RequestCmdHstpGetTime\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHstpGetTime.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdHstpGetTime message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdHstpGetTime\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdHstpGetTime.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.time != null && message.hasOwnProperty(\"time\"))\n                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))\n                    return \"time: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdHstpGetTime message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdHstpGetTime\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdHstpGetTime} RequestCmdHstpGetTime\n         */\n        RequestCmdHstpGetTime.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdHstpGetTime)\n                return object;\n            let message = new $root.hdyRpc.RequestCmdHstpGetTime();\n            if (object.time != null)\n                if ($util.Long)\n                    (message.time = $util.Long.fromValue(object.time)).unsigned = true;\n                else if (typeof object.time === \"string\")\n                    message.time = parseInt(object.time, 10);\n                else if (typeof object.time === \"number\")\n                    message.time = object.time;\n                else if (typeof object.time === \"object\")\n                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdHstpGetTime message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdHstpGetTime\n         * @static\n         * @param {hdyRpc.RequestCmdHstpGetTime} message RequestCmdHstpGetTime\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdHstpGetTime.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.time = options.longs === String ? \"0\" : 0;\n            if (message.time != null && message.hasOwnProperty(\"time\"))\n                if (typeof message.time === \"number\")\n                    object.time = options.longs === String ? String(message.time) : message.time;\n                else\n                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber(true) : message.time;\n            return object;\n        };\n\n        /**\n         * Converts this RequestCmdHstpGetTime to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdHstpGetTime\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdHstpGetTime.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdHstpGetTime;\n    })();\n\n    hdyRpc.ResponseCmdHstpGetTime = (function() {\n\n        /**\n         * Properties of a ResponseCmdHstpGetTime.\n         * @memberof hdyRpc\n         * @interface IResponseCmdHstpGetTime\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdHstpGetTime result\n         * @property {number|Long|null} [time] ResponseCmdHstpGetTime time\n         */\n\n        /**\n         * Constructs a new ResponseCmdHstpGetTime.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdHstpGetTime.\n         * @implements IResponseCmdHstpGetTime\n         * @constructor\n         * @param {hdyRpc.IResponseCmdHstpGetTime=} [properties] Properties to set\n         */\n        function ResponseCmdHstpGetTime(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdHstpGetTime result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdHstpGetTime\n         * @instance\n         */\n        ResponseCmdHstpGetTime.prototype.result = 0;\n\n        /**\n         * ResponseCmdHstpGetTime time.\n         * @member {number|Long} time\n         * @memberof hdyRpc.ResponseCmdHstpGetTime\n         * @instance\n         */\n        ResponseCmdHstpGetTime.prototype.time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new ResponseCmdHstpGetTime instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdHstpGetTime\n         * @static\n         * @param {hdyRpc.IResponseCmdHstpGetTime=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdHstpGetTime} ResponseCmdHstpGetTime instance\n         */\n        ResponseCmdHstpGetTime.create = function create(properties) {\n            return new ResponseCmdHstpGetTime(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHstpGetTime message. Does not implicitly {@link hdyRpc.ResponseCmdHstpGetTime.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdHstpGetTime\n         * @static\n         * @param {hdyRpc.ResponseCmdHstpGetTime} message ResponseCmdHstpGetTime message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHstpGetTime.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            if (message.time != null && Object.hasOwnProperty.call(message, \"time\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.time);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHstpGetTime message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdHstpGetTime.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdHstpGetTime\n         * @static\n         * @param {hdyRpc.ResponseCmdHstpGetTime} message ResponseCmdHstpGetTime message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHstpGetTime.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdHstpGetTime message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdHstpGetTime\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdHstpGetTime} ResponseCmdHstpGetTime\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHstpGetTime.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdHstpGetTime();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                case 2:\n                    message.time = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdHstpGetTime message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdHstpGetTime\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdHstpGetTime} ResponseCmdHstpGetTime\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHstpGetTime.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdHstpGetTime message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdHstpGetTime\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdHstpGetTime.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            if (message.time != null && message.hasOwnProperty(\"time\"))\n                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))\n                    return \"time: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdHstpGetTime message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdHstpGetTime\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdHstpGetTime} ResponseCmdHstpGetTime\n         */\n        ResponseCmdHstpGetTime.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdHstpGetTime)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdHstpGetTime();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            if (object.time != null)\n                if ($util.Long)\n                    (message.time = $util.Long.fromValue(object.time)).unsigned = true;\n                else if (typeof object.time === \"string\")\n                    message.time = parseInt(object.time, 10);\n                else if (typeof object.time === \"number\")\n                    message.time = object.time;\n                else if (typeof object.time === \"object\")\n                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdHstpGetTime message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdHstpGetTime\n         * @static\n         * @param {hdyRpc.ResponseCmdHstpGetTime} message ResponseCmdHstpGetTime\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdHstpGetTime.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.time = options.longs === String ? \"0\" : 0;\n            }\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            if (message.time != null && message.hasOwnProperty(\"time\"))\n                if (typeof message.time === \"number\")\n                    object.time = options.longs === String ? String(message.time) : message.time;\n                else\n                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber(true) : message.time;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdHstpGetTime to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdHstpGetTime\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdHstpGetTime.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdHstpGetTime;\n    })();\n\n    hdyRpc.RequestCmdHstpGetOffset = (function() {\n\n        /**\n         * Properties of a RequestCmdHstpGetOffset.\n         * @memberof hdyRpc\n         * @interface IRequestCmdHstpGetOffset\n         * @property {number|null} [offset] RequestCmdHstpGetOffset offset\n         */\n\n        /**\n         * Constructs a new RequestCmdHstpGetOffset.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdHstpGetOffset.\n         * @implements IRequestCmdHstpGetOffset\n         * @constructor\n         * @param {hdyRpc.IRequestCmdHstpGetOffset=} [properties] Properties to set\n         */\n        function RequestCmdHstpGetOffset(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RequestCmdHstpGetOffset offset.\n         * @member {number} offset\n         * @memberof hdyRpc.RequestCmdHstpGetOffset\n         * @instance\n         */\n        RequestCmdHstpGetOffset.prototype.offset = 0;\n\n        /**\n         * Creates a new RequestCmdHstpGetOffset instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdHstpGetOffset\n         * @static\n         * @param {hdyRpc.IRequestCmdHstpGetOffset=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdHstpGetOffset} RequestCmdHstpGetOffset instance\n         */\n        RequestCmdHstpGetOffset.create = function create(properties) {\n            return new RequestCmdHstpGetOffset(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdHstpGetOffset message. Does not implicitly {@link hdyRpc.RequestCmdHstpGetOffset.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdHstpGetOffset\n         * @static\n         * @param {hdyRpc.RequestCmdHstpGetOffset} message RequestCmdHstpGetOffset message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHstpGetOffset.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.offset != null && Object.hasOwnProperty.call(message, \"offset\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).sint32(message.offset);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdHstpGetOffset message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdHstpGetOffset.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdHstpGetOffset\n         * @static\n         * @param {hdyRpc.RequestCmdHstpGetOffset} message RequestCmdHstpGetOffset message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHstpGetOffset.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdHstpGetOffset message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdHstpGetOffset\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdHstpGetOffset} RequestCmdHstpGetOffset\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHstpGetOffset.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdHstpGetOffset();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.offset = reader.sint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdHstpGetOffset message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdHstpGetOffset\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdHstpGetOffset} RequestCmdHstpGetOffset\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHstpGetOffset.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdHstpGetOffset message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdHstpGetOffset\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdHstpGetOffset.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.offset != null && message.hasOwnProperty(\"offset\"))\n                if (!$util.isInteger(message.offset))\n                    return \"offset: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdHstpGetOffset message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdHstpGetOffset\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdHstpGetOffset} RequestCmdHstpGetOffset\n         */\n        RequestCmdHstpGetOffset.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdHstpGetOffset)\n                return object;\n            let message = new $root.hdyRpc.RequestCmdHstpGetOffset();\n            if (object.offset != null)\n                message.offset = object.offset | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdHstpGetOffset message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdHstpGetOffset\n         * @static\n         * @param {hdyRpc.RequestCmdHstpGetOffset} message RequestCmdHstpGetOffset\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdHstpGetOffset.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.offset = 0;\n            if (message.offset != null && message.hasOwnProperty(\"offset\"))\n                object.offset = message.offset;\n            return object;\n        };\n\n        /**\n         * Converts this RequestCmdHstpGetOffset to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdHstpGetOffset\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdHstpGetOffset.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdHstpGetOffset;\n    })();\n\n    hdyRpc.ResponseCmdHstpGetOffset = (function() {\n\n        /**\n         * Properties of a ResponseCmdHstpGetOffset.\n         * @memberof hdyRpc\n         * @interface IResponseCmdHstpGetOffset\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdHstpGetOffset result\n         * @property {number|null} [offset] ResponseCmdHstpGetOffset offset\n         */\n\n        /**\n         * Constructs a new ResponseCmdHstpGetOffset.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdHstpGetOffset.\n         * @implements IResponseCmdHstpGetOffset\n         * @constructor\n         * @param {hdyRpc.IResponseCmdHstpGetOffset=} [properties] Properties to set\n         */\n        function ResponseCmdHstpGetOffset(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdHstpGetOffset result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdHstpGetOffset\n         * @instance\n         */\n        ResponseCmdHstpGetOffset.prototype.result = 0;\n\n        /**\n         * ResponseCmdHstpGetOffset offset.\n         * @member {number} offset\n         * @memberof hdyRpc.ResponseCmdHstpGetOffset\n         * @instance\n         */\n        ResponseCmdHstpGetOffset.prototype.offset = 0;\n\n        /**\n         * Creates a new ResponseCmdHstpGetOffset instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdHstpGetOffset\n         * @static\n         * @param {hdyRpc.IResponseCmdHstpGetOffset=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdHstpGetOffset} ResponseCmdHstpGetOffset instance\n         */\n        ResponseCmdHstpGetOffset.create = function create(properties) {\n            return new ResponseCmdHstpGetOffset(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHstpGetOffset message. Does not implicitly {@link hdyRpc.ResponseCmdHstpGetOffset.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdHstpGetOffset\n         * @static\n         * @param {hdyRpc.ResponseCmdHstpGetOffset} message ResponseCmdHstpGetOffset message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHstpGetOffset.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            if (message.offset != null && Object.hasOwnProperty.call(message, \"offset\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).sint32(message.offset);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHstpGetOffset message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdHstpGetOffset.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdHstpGetOffset\n         * @static\n         * @param {hdyRpc.ResponseCmdHstpGetOffset} message ResponseCmdHstpGetOffset message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHstpGetOffset.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdHstpGetOffset message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdHstpGetOffset\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdHstpGetOffset} ResponseCmdHstpGetOffset\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHstpGetOffset.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdHstpGetOffset();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                case 2:\n                    message.offset = reader.sint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdHstpGetOffset message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdHstpGetOffset\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdHstpGetOffset} ResponseCmdHstpGetOffset\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHstpGetOffset.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdHstpGetOffset message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdHstpGetOffset\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdHstpGetOffset.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            if (message.offset != null && message.hasOwnProperty(\"offset\"))\n                if (!$util.isInteger(message.offset))\n                    return \"offset: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdHstpGetOffset message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdHstpGetOffset\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdHstpGetOffset} ResponseCmdHstpGetOffset\n         */\n        ResponseCmdHstpGetOffset.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdHstpGetOffset)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdHstpGetOffset();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            if (object.offset != null)\n                message.offset = object.offset | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdHstpGetOffset message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdHstpGetOffset\n         * @static\n         * @param {hdyRpc.ResponseCmdHstpGetOffset} message ResponseCmdHstpGetOffset\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdHstpGetOffset.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n                object.offset = 0;\n            }\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            if (message.offset != null && message.hasOwnProperty(\"offset\"))\n                object.offset = message.offset;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdHstpGetOffset to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdHstpGetOffset\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdHstpGetOffset.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdHstpGetOffset;\n    })();\n\n    hdyRpc.RequestCmdHstpSetOffset = (function() {\n\n        /**\n         * Properties of a RequestCmdHstpSetOffset.\n         * @memberof hdyRpc\n         * @interface IRequestCmdHstpSetOffset\n         * @property {number|null} [offset] RequestCmdHstpSetOffset offset\n         */\n\n        /**\n         * Constructs a new RequestCmdHstpSetOffset.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdHstpSetOffset.\n         * @implements IRequestCmdHstpSetOffset\n         * @constructor\n         * @param {hdyRpc.IRequestCmdHstpSetOffset=} [properties] Properties to set\n         */\n        function RequestCmdHstpSetOffset(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RequestCmdHstpSetOffset offset.\n         * @member {number} offset\n         * @memberof hdyRpc.RequestCmdHstpSetOffset\n         * @instance\n         */\n        RequestCmdHstpSetOffset.prototype.offset = 0;\n\n        /**\n         * Creates a new RequestCmdHstpSetOffset instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdHstpSetOffset\n         * @static\n         * @param {hdyRpc.IRequestCmdHstpSetOffset=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdHstpSetOffset} RequestCmdHstpSetOffset instance\n         */\n        RequestCmdHstpSetOffset.create = function create(properties) {\n            return new RequestCmdHstpSetOffset(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdHstpSetOffset message. Does not implicitly {@link hdyRpc.RequestCmdHstpSetOffset.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdHstpSetOffset\n         * @static\n         * @param {hdyRpc.RequestCmdHstpSetOffset} message RequestCmdHstpSetOffset message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHstpSetOffset.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.offset != null && Object.hasOwnProperty.call(message, \"offset\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).sint32(message.offset);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdHstpSetOffset message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdHstpSetOffset.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdHstpSetOffset\n         * @static\n         * @param {hdyRpc.RequestCmdHstpSetOffset} message RequestCmdHstpSetOffset message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHstpSetOffset.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdHstpSetOffset message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdHstpSetOffset\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdHstpSetOffset} RequestCmdHstpSetOffset\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHstpSetOffset.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdHstpSetOffset();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.offset = reader.sint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdHstpSetOffset message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdHstpSetOffset\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdHstpSetOffset} RequestCmdHstpSetOffset\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHstpSetOffset.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdHstpSetOffset message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdHstpSetOffset\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdHstpSetOffset.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.offset != null && message.hasOwnProperty(\"offset\"))\n                if (!$util.isInteger(message.offset))\n                    return \"offset: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdHstpSetOffset message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdHstpSetOffset\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdHstpSetOffset} RequestCmdHstpSetOffset\n         */\n        RequestCmdHstpSetOffset.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdHstpSetOffset)\n                return object;\n            let message = new $root.hdyRpc.RequestCmdHstpSetOffset();\n            if (object.offset != null)\n                message.offset = object.offset | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdHstpSetOffset message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdHstpSetOffset\n         * @static\n         * @param {hdyRpc.RequestCmdHstpSetOffset} message RequestCmdHstpSetOffset\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdHstpSetOffset.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.offset = 0;\n            if (message.offset != null && message.hasOwnProperty(\"offset\"))\n                object.offset = message.offset;\n            return object;\n        };\n\n        /**\n         * Converts this RequestCmdHstpSetOffset to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdHstpSetOffset\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdHstpSetOffset.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdHstpSetOffset;\n    })();\n\n    hdyRpc.ResponseCmdHstpSetOffset = (function() {\n\n        /**\n         * Properties of a ResponseCmdHstpSetOffset.\n         * @memberof hdyRpc\n         * @interface IResponseCmdHstpSetOffset\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdHstpSetOffset result\n         */\n\n        /**\n         * Constructs a new ResponseCmdHstpSetOffset.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdHstpSetOffset.\n         * @implements IResponseCmdHstpSetOffset\n         * @constructor\n         * @param {hdyRpc.IResponseCmdHstpSetOffset=} [properties] Properties to set\n         */\n        function ResponseCmdHstpSetOffset(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdHstpSetOffset result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdHstpSetOffset\n         * @instance\n         */\n        ResponseCmdHstpSetOffset.prototype.result = 0;\n\n        /**\n         * Creates a new ResponseCmdHstpSetOffset instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdHstpSetOffset\n         * @static\n         * @param {hdyRpc.IResponseCmdHstpSetOffset=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdHstpSetOffset} ResponseCmdHstpSetOffset instance\n         */\n        ResponseCmdHstpSetOffset.create = function create(properties) {\n            return new ResponseCmdHstpSetOffset(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHstpSetOffset message. Does not implicitly {@link hdyRpc.ResponseCmdHstpSetOffset.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdHstpSetOffset\n         * @static\n         * @param {hdyRpc.ResponseCmdHstpSetOffset} message ResponseCmdHstpSetOffset message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHstpSetOffset.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHstpSetOffset message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdHstpSetOffset.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdHstpSetOffset\n         * @static\n         * @param {hdyRpc.ResponseCmdHstpSetOffset} message ResponseCmdHstpSetOffset message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHstpSetOffset.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdHstpSetOffset message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdHstpSetOffset\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdHstpSetOffset} ResponseCmdHstpSetOffset\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHstpSetOffset.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdHstpSetOffset();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdHstpSetOffset message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdHstpSetOffset\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdHstpSetOffset} ResponseCmdHstpSetOffset\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHstpSetOffset.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdHstpSetOffset message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdHstpSetOffset\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdHstpSetOffset.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdHstpSetOffset message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdHstpSetOffset\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdHstpSetOffset} ResponseCmdHstpSetOffset\n         */\n        ResponseCmdHstpSetOffset.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdHstpSetOffset)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdHstpSetOffset();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdHstpSetOffset message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdHstpSetOffset\n         * @static\n         * @param {hdyRpc.ResponseCmdHstpSetOffset} message ResponseCmdHstpSetOffset\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdHstpSetOffset.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdHstpSetOffset to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdHstpSetOffset\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdHstpSetOffset.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdHstpSetOffset;\n    })();\n\n    hdyRpc.RequestCmdHstpGetRtd = (function() {\n\n        /**\n         * Properties of a RequestCmdHstpGetRtd.\n         * @memberof hdyRpc\n         * @interface IRequestCmdHstpGetRtd\n         */\n\n        /**\n         * Constructs a new RequestCmdHstpGetRtd.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdHstpGetRtd.\n         * @implements IRequestCmdHstpGetRtd\n         * @constructor\n         * @param {hdyRpc.IRequestCmdHstpGetRtd=} [properties] Properties to set\n         */\n        function RequestCmdHstpGetRtd(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new RequestCmdHstpGetRtd instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdHstpGetRtd\n         * @static\n         * @param {hdyRpc.IRequestCmdHstpGetRtd=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdHstpGetRtd} RequestCmdHstpGetRtd instance\n         */\n        RequestCmdHstpGetRtd.create = function create(properties) {\n            return new RequestCmdHstpGetRtd(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdHstpGetRtd message. Does not implicitly {@link hdyRpc.RequestCmdHstpGetRtd.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdHstpGetRtd\n         * @static\n         * @param {hdyRpc.RequestCmdHstpGetRtd} message RequestCmdHstpGetRtd message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHstpGetRtd.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdHstpGetRtd message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdHstpGetRtd.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdHstpGetRtd\n         * @static\n         * @param {hdyRpc.RequestCmdHstpGetRtd} message RequestCmdHstpGetRtd message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHstpGetRtd.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdHstpGetRtd message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdHstpGetRtd\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdHstpGetRtd} RequestCmdHstpGetRtd\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHstpGetRtd.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdHstpGetRtd();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdHstpGetRtd message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdHstpGetRtd\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdHstpGetRtd} RequestCmdHstpGetRtd\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHstpGetRtd.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdHstpGetRtd message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdHstpGetRtd\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdHstpGetRtd.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdHstpGetRtd message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdHstpGetRtd\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdHstpGetRtd} RequestCmdHstpGetRtd\n         */\n        RequestCmdHstpGetRtd.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdHstpGetRtd)\n                return object;\n            return new $root.hdyRpc.RequestCmdHstpGetRtd();\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdHstpGetRtd message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdHstpGetRtd\n         * @static\n         * @param {hdyRpc.RequestCmdHstpGetRtd} message RequestCmdHstpGetRtd\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdHstpGetRtd.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this RequestCmdHstpGetRtd to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdHstpGetRtd\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdHstpGetRtd.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdHstpGetRtd;\n    })();\n\n    hdyRpc.ResponseCmdHstpGetRtd = (function() {\n\n        /**\n         * Properties of a ResponseCmdHstpGetRtd.\n         * @memberof hdyRpc\n         * @interface IResponseCmdHstpGetRtd\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdHstpGetRtd result\n         * @property {number|null} [rtd] ResponseCmdHstpGetRtd rtd\n         */\n\n        /**\n         * Constructs a new ResponseCmdHstpGetRtd.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdHstpGetRtd.\n         * @implements IResponseCmdHstpGetRtd\n         * @constructor\n         * @param {hdyRpc.IResponseCmdHstpGetRtd=} [properties] Properties to set\n         */\n        function ResponseCmdHstpGetRtd(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdHstpGetRtd result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdHstpGetRtd\n         * @instance\n         */\n        ResponseCmdHstpGetRtd.prototype.result = 0;\n\n        /**\n         * ResponseCmdHstpGetRtd rtd.\n         * @member {number} rtd\n         * @memberof hdyRpc.ResponseCmdHstpGetRtd\n         * @instance\n         */\n        ResponseCmdHstpGetRtd.prototype.rtd = 0;\n\n        /**\n         * Creates a new ResponseCmdHstpGetRtd instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdHstpGetRtd\n         * @static\n         * @param {hdyRpc.IResponseCmdHstpGetRtd=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdHstpGetRtd} ResponseCmdHstpGetRtd instance\n         */\n        ResponseCmdHstpGetRtd.create = function create(properties) {\n            return new ResponseCmdHstpGetRtd(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHstpGetRtd message. Does not implicitly {@link hdyRpc.ResponseCmdHstpGetRtd.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdHstpGetRtd\n         * @static\n         * @param {hdyRpc.ResponseCmdHstpGetRtd} message ResponseCmdHstpGetRtd message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHstpGetRtd.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            if (message.rtd != null && Object.hasOwnProperty.call(message, \"rtd\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.rtd);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHstpGetRtd message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdHstpGetRtd.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdHstpGetRtd\n         * @static\n         * @param {hdyRpc.ResponseCmdHstpGetRtd} message ResponseCmdHstpGetRtd message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHstpGetRtd.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdHstpGetRtd message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdHstpGetRtd\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdHstpGetRtd} ResponseCmdHstpGetRtd\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHstpGetRtd.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdHstpGetRtd();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                case 2:\n                    message.rtd = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdHstpGetRtd message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdHstpGetRtd\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdHstpGetRtd} ResponseCmdHstpGetRtd\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHstpGetRtd.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdHstpGetRtd message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdHstpGetRtd\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdHstpGetRtd.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            if (message.rtd != null && message.hasOwnProperty(\"rtd\"))\n                if (!$util.isInteger(message.rtd))\n                    return \"rtd: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdHstpGetRtd message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdHstpGetRtd\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdHstpGetRtd} ResponseCmdHstpGetRtd\n         */\n        ResponseCmdHstpGetRtd.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdHstpGetRtd)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdHstpGetRtd();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            if (object.rtd != null)\n                message.rtd = object.rtd >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdHstpGetRtd message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdHstpGetRtd\n         * @static\n         * @param {hdyRpc.ResponseCmdHstpGetRtd} message ResponseCmdHstpGetRtd\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdHstpGetRtd.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n                object.rtd = 0;\n            }\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            if (message.rtd != null && message.hasOwnProperty(\"rtd\"))\n                object.rtd = message.rtd;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdHstpGetRtd to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdHstpGetRtd\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdHstpGetRtd.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdHstpGetRtd;\n    })();\n\n    hdyRpc.RequestCmdHstpSetSync = (function() {\n\n        /**\n         * Properties of a RequestCmdHstpSetSync.\n         * @memberof hdyRpc\n         * @interface IRequestCmdHstpSetSync\n         * @property {number|null} [syncCount] RequestCmdHstpSetSync syncCount\n         * @property {number|null} [outliers] RequestCmdHstpSetSync outliers\n         */\n\n        /**\n         * Constructs a new RequestCmdHstpSetSync.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdHstpSetSync.\n         * @implements IRequestCmdHstpSetSync\n         * @constructor\n         * @param {hdyRpc.IRequestCmdHstpSetSync=} [properties] Properties to set\n         */\n        function RequestCmdHstpSetSync(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RequestCmdHstpSetSync syncCount.\n         * @member {number} syncCount\n         * @memberof hdyRpc.RequestCmdHstpSetSync\n         * @instance\n         */\n        RequestCmdHstpSetSync.prototype.syncCount = 0;\n\n        /**\n         * RequestCmdHstpSetSync outliers.\n         * @member {number} outliers\n         * @memberof hdyRpc.RequestCmdHstpSetSync\n         * @instance\n         */\n        RequestCmdHstpSetSync.prototype.outliers = 0;\n\n        /**\n         * Creates a new RequestCmdHstpSetSync instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdHstpSetSync\n         * @static\n         * @param {hdyRpc.IRequestCmdHstpSetSync=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdHstpSetSync} RequestCmdHstpSetSync instance\n         */\n        RequestCmdHstpSetSync.create = function create(properties) {\n            return new RequestCmdHstpSetSync(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdHstpSetSync message. Does not implicitly {@link hdyRpc.RequestCmdHstpSetSync.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdHstpSetSync\n         * @static\n         * @param {hdyRpc.RequestCmdHstpSetSync} message RequestCmdHstpSetSync message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHstpSetSync.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.syncCount != null && Object.hasOwnProperty.call(message, \"syncCount\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.syncCount);\n            if (message.outliers != null && Object.hasOwnProperty.call(message, \"outliers\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.outliers);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdHstpSetSync message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdHstpSetSync.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdHstpSetSync\n         * @static\n         * @param {hdyRpc.RequestCmdHstpSetSync} message RequestCmdHstpSetSync message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdHstpSetSync.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdHstpSetSync message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdHstpSetSync\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdHstpSetSync} RequestCmdHstpSetSync\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHstpSetSync.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdHstpSetSync();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.syncCount = reader.uint32();\n                    break;\n                case 2:\n                    message.outliers = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdHstpSetSync message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdHstpSetSync\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdHstpSetSync} RequestCmdHstpSetSync\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdHstpSetSync.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdHstpSetSync message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdHstpSetSync\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdHstpSetSync.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.syncCount != null && message.hasOwnProperty(\"syncCount\"))\n                if (!$util.isInteger(message.syncCount))\n                    return \"syncCount: integer expected\";\n            if (message.outliers != null && message.hasOwnProperty(\"outliers\"))\n                if (!$util.isInteger(message.outliers))\n                    return \"outliers: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdHstpSetSync message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdHstpSetSync\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdHstpSetSync} RequestCmdHstpSetSync\n         */\n        RequestCmdHstpSetSync.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdHstpSetSync)\n                return object;\n            let message = new $root.hdyRpc.RequestCmdHstpSetSync();\n            if (object.syncCount != null)\n                message.syncCount = object.syncCount >>> 0;\n            if (object.outliers != null)\n                message.outliers = object.outliers >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdHstpSetSync message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdHstpSetSync\n         * @static\n         * @param {hdyRpc.RequestCmdHstpSetSync} message RequestCmdHstpSetSync\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdHstpSetSync.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.syncCount = 0;\n                object.outliers = 0;\n            }\n            if (message.syncCount != null && message.hasOwnProperty(\"syncCount\"))\n                object.syncCount = message.syncCount;\n            if (message.outliers != null && message.hasOwnProperty(\"outliers\"))\n                object.outliers = message.outliers;\n            return object;\n        };\n\n        /**\n         * Converts this RequestCmdHstpSetSync to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdHstpSetSync\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdHstpSetSync.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdHstpSetSync;\n    })();\n\n    hdyRpc.ResponseCmdHstpSetSync = (function() {\n\n        /**\n         * Properties of a ResponseCmdHstpSetSync.\n         * @memberof hdyRpc\n         * @interface IResponseCmdHstpSetSync\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdHstpSetSync result\n         * @property {number|Long|null} [time] ResponseCmdHstpSetSync time\n         * @property {number|null} [rtd] ResponseCmdHstpSetSync rtd\n         */\n\n        /**\n         * Constructs a new ResponseCmdHstpSetSync.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdHstpSetSync.\n         * @implements IResponseCmdHstpSetSync\n         * @constructor\n         * @param {hdyRpc.IResponseCmdHstpSetSync=} [properties] Properties to set\n         */\n        function ResponseCmdHstpSetSync(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdHstpSetSync result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdHstpSetSync\n         * @instance\n         */\n        ResponseCmdHstpSetSync.prototype.result = 0;\n\n        /**\n         * ResponseCmdHstpSetSync time.\n         * @member {number|Long} time\n         * @memberof hdyRpc.ResponseCmdHstpSetSync\n         * @instance\n         */\n        ResponseCmdHstpSetSync.prototype.time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * ResponseCmdHstpSetSync rtd.\n         * @member {number} rtd\n         * @memberof hdyRpc.ResponseCmdHstpSetSync\n         * @instance\n         */\n        ResponseCmdHstpSetSync.prototype.rtd = 0;\n\n        /**\n         * Creates a new ResponseCmdHstpSetSync instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdHstpSetSync\n         * @static\n         * @param {hdyRpc.IResponseCmdHstpSetSync=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdHstpSetSync} ResponseCmdHstpSetSync instance\n         */\n        ResponseCmdHstpSetSync.create = function create(properties) {\n            return new ResponseCmdHstpSetSync(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHstpSetSync message. Does not implicitly {@link hdyRpc.ResponseCmdHstpSetSync.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdHstpSetSync\n         * @static\n         * @param {hdyRpc.ResponseCmdHstpSetSync} message ResponseCmdHstpSetSync message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHstpSetSync.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            if (message.time != null && Object.hasOwnProperty.call(message, \"time\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.time);\n            if (message.rtd != null && Object.hasOwnProperty.call(message, \"rtd\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.rtd);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdHstpSetSync message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdHstpSetSync.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdHstpSetSync\n         * @static\n         * @param {hdyRpc.ResponseCmdHstpSetSync} message ResponseCmdHstpSetSync message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdHstpSetSync.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdHstpSetSync message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdHstpSetSync\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdHstpSetSync} ResponseCmdHstpSetSync\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHstpSetSync.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdHstpSetSync();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                case 2:\n                    message.time = reader.uint64();\n                    break;\n                case 3:\n                    message.rtd = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdHstpSetSync message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdHstpSetSync\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdHstpSetSync} ResponseCmdHstpSetSync\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdHstpSetSync.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdHstpSetSync message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdHstpSetSync\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdHstpSetSync.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            if (message.time != null && message.hasOwnProperty(\"time\"))\n                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))\n                    return \"time: integer|Long expected\";\n            if (message.rtd != null && message.hasOwnProperty(\"rtd\"))\n                if (!$util.isInteger(message.rtd))\n                    return \"rtd: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdHstpSetSync message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdHstpSetSync\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdHstpSetSync} ResponseCmdHstpSetSync\n         */\n        ResponseCmdHstpSetSync.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdHstpSetSync)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdHstpSetSync();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            if (object.time != null)\n                if ($util.Long)\n                    (message.time = $util.Long.fromValue(object.time)).unsigned = true;\n                else if (typeof object.time === \"string\")\n                    message.time = parseInt(object.time, 10);\n                else if (typeof object.time === \"number\")\n                    message.time = object.time;\n                else if (typeof object.time === \"object\")\n                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber(true);\n            if (object.rtd != null)\n                message.rtd = object.rtd >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdHstpSetSync message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdHstpSetSync\n         * @static\n         * @param {hdyRpc.ResponseCmdHstpSetSync} message ResponseCmdHstpSetSync\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdHstpSetSync.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, true);\n                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.time = options.longs === String ? \"0\" : 0;\n                object.rtd = 0;\n            }\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            if (message.time != null && message.hasOwnProperty(\"time\"))\n                if (typeof message.time === \"number\")\n                    object.time = options.longs === String ? String(message.time) : message.time;\n                else\n                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber(true) : message.time;\n            if (message.rtd != null && message.hasOwnProperty(\"rtd\"))\n                object.rtd = message.rtd;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdHstpSetSync to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdHstpSetSync\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdHstpSetSync.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdHstpSetSync;\n    })();\n\n    hdyRpc.RequestCmdMaintanceSetRestart = (function() {\n\n        /**\n         * Properties of a RequestCmdMaintanceSetRestart.\n         * @memberof hdyRpc\n         * @interface IRequestCmdMaintanceSetRestart\n         * @property {boolean|null} [reconnect] RequestCmdMaintanceSetRestart reconnect\n         */\n\n        /**\n         * Constructs a new RequestCmdMaintanceSetRestart.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdMaintanceSetRestart.\n         * @implements IRequestCmdMaintanceSetRestart\n         * @constructor\n         * @param {hdyRpc.IRequestCmdMaintanceSetRestart=} [properties] Properties to set\n         */\n        function RequestCmdMaintanceSetRestart(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RequestCmdMaintanceSetRestart reconnect.\n         * @member {boolean} reconnect\n         * @memberof hdyRpc.RequestCmdMaintanceSetRestart\n         * @instance\n         */\n        RequestCmdMaintanceSetRestart.prototype.reconnect = false;\n\n        /**\n         * Creates a new RequestCmdMaintanceSetRestart instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdMaintanceSetRestart\n         * @static\n         * @param {hdyRpc.IRequestCmdMaintanceSetRestart=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdMaintanceSetRestart} RequestCmdMaintanceSetRestart instance\n         */\n        RequestCmdMaintanceSetRestart.create = function create(properties) {\n            return new RequestCmdMaintanceSetRestart(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdMaintanceSetRestart message. Does not implicitly {@link hdyRpc.RequestCmdMaintanceSetRestart.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdMaintanceSetRestart\n         * @static\n         * @param {hdyRpc.RequestCmdMaintanceSetRestart} message RequestCmdMaintanceSetRestart message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdMaintanceSetRestart.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.reconnect != null && Object.hasOwnProperty.call(message, \"reconnect\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.reconnect);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdMaintanceSetRestart message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdMaintanceSetRestart.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdMaintanceSetRestart\n         * @static\n         * @param {hdyRpc.RequestCmdMaintanceSetRestart} message RequestCmdMaintanceSetRestart message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdMaintanceSetRestart.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdMaintanceSetRestart message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdMaintanceSetRestart\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdMaintanceSetRestart} RequestCmdMaintanceSetRestart\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdMaintanceSetRestart.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdMaintanceSetRestart();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.reconnect = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdMaintanceSetRestart message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdMaintanceSetRestart\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdMaintanceSetRestart} RequestCmdMaintanceSetRestart\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdMaintanceSetRestart.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdMaintanceSetRestart message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdMaintanceSetRestart\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdMaintanceSetRestart.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.reconnect != null && message.hasOwnProperty(\"reconnect\"))\n                if (typeof message.reconnect !== \"boolean\")\n                    return \"reconnect: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdMaintanceSetRestart message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdMaintanceSetRestart\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdMaintanceSetRestart} RequestCmdMaintanceSetRestart\n         */\n        RequestCmdMaintanceSetRestart.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdMaintanceSetRestart)\n                return object;\n            let message = new $root.hdyRpc.RequestCmdMaintanceSetRestart();\n            if (object.reconnect != null)\n                message.reconnect = Boolean(object.reconnect);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdMaintanceSetRestart message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdMaintanceSetRestart\n         * @static\n         * @param {hdyRpc.RequestCmdMaintanceSetRestart} message RequestCmdMaintanceSetRestart\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdMaintanceSetRestart.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.reconnect = false;\n            if (message.reconnect != null && message.hasOwnProperty(\"reconnect\"))\n                object.reconnect = message.reconnect;\n            return object;\n        };\n\n        /**\n         * Converts this RequestCmdMaintanceSetRestart to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdMaintanceSetRestart\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdMaintanceSetRestart.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdMaintanceSetRestart;\n    })();\n\n    hdyRpc.ResponseCmdMaintanceSetRestart = (function() {\n\n        /**\n         * Properties of a ResponseCmdMaintanceSetRestart.\n         * @memberof hdyRpc\n         * @interface IResponseCmdMaintanceSetRestart\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdMaintanceSetRestart result\n         */\n\n        /**\n         * Constructs a new ResponseCmdMaintanceSetRestart.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdMaintanceSetRestart.\n         * @implements IResponseCmdMaintanceSetRestart\n         * @constructor\n         * @param {hdyRpc.IResponseCmdMaintanceSetRestart=} [properties] Properties to set\n         */\n        function ResponseCmdMaintanceSetRestart(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdMaintanceSetRestart result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdMaintanceSetRestart\n         * @instance\n         */\n        ResponseCmdMaintanceSetRestart.prototype.result = 0;\n\n        /**\n         * Creates a new ResponseCmdMaintanceSetRestart instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdMaintanceSetRestart\n         * @static\n         * @param {hdyRpc.IResponseCmdMaintanceSetRestart=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdMaintanceSetRestart} ResponseCmdMaintanceSetRestart instance\n         */\n        ResponseCmdMaintanceSetRestart.create = function create(properties) {\n            return new ResponseCmdMaintanceSetRestart(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdMaintanceSetRestart message. Does not implicitly {@link hdyRpc.ResponseCmdMaintanceSetRestart.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdMaintanceSetRestart\n         * @static\n         * @param {hdyRpc.ResponseCmdMaintanceSetRestart} message ResponseCmdMaintanceSetRestart message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdMaintanceSetRestart.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdMaintanceSetRestart message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdMaintanceSetRestart.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdMaintanceSetRestart\n         * @static\n         * @param {hdyRpc.ResponseCmdMaintanceSetRestart} message ResponseCmdMaintanceSetRestart message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdMaintanceSetRestart.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdMaintanceSetRestart message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdMaintanceSetRestart\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdMaintanceSetRestart} ResponseCmdMaintanceSetRestart\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdMaintanceSetRestart.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdMaintanceSetRestart();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdMaintanceSetRestart message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdMaintanceSetRestart\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdMaintanceSetRestart} ResponseCmdMaintanceSetRestart\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdMaintanceSetRestart.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdMaintanceSetRestart message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdMaintanceSetRestart\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdMaintanceSetRestart.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdMaintanceSetRestart message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdMaintanceSetRestart\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdMaintanceSetRestart} ResponseCmdMaintanceSetRestart\n         */\n        ResponseCmdMaintanceSetRestart.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdMaintanceSetRestart)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdMaintanceSetRestart();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdMaintanceSetRestart message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdMaintanceSetRestart\n         * @static\n         * @param {hdyRpc.ResponseCmdMaintanceSetRestart} message ResponseCmdMaintanceSetRestart\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdMaintanceSetRestart.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdMaintanceSetRestart to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdMaintanceSetRestart\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdMaintanceSetRestart.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdMaintanceSetRestart;\n    })();\n\n    hdyRpc.RequestCmdMaintanceSetUpdatePerform = (function() {\n\n        /**\n         * Properties of a RequestCmdMaintanceSetUpdatePerform.\n         * @memberof hdyRpc\n         * @interface IRequestCmdMaintanceSetUpdatePerform\n         * @property {string|null} [fwVersion] RequestCmdMaintanceSetUpdatePerform fwVersion\n         */\n\n        /**\n         * Constructs a new RequestCmdMaintanceSetUpdatePerform.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdMaintanceSetUpdatePerform.\n         * @implements IRequestCmdMaintanceSetUpdatePerform\n         * @constructor\n         * @param {hdyRpc.IRequestCmdMaintanceSetUpdatePerform=} [properties] Properties to set\n         */\n        function RequestCmdMaintanceSetUpdatePerform(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RequestCmdMaintanceSetUpdatePerform fwVersion.\n         * @member {string} fwVersion\n         * @memberof hdyRpc.RequestCmdMaintanceSetUpdatePerform\n         * @instance\n         */\n        RequestCmdMaintanceSetUpdatePerform.prototype.fwVersion = \"\";\n\n        /**\n         * Creates a new RequestCmdMaintanceSetUpdatePerform instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdMaintanceSetUpdatePerform\n         * @static\n         * @param {hdyRpc.IRequestCmdMaintanceSetUpdatePerform=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdMaintanceSetUpdatePerform} RequestCmdMaintanceSetUpdatePerform instance\n         */\n        RequestCmdMaintanceSetUpdatePerform.create = function create(properties) {\n            return new RequestCmdMaintanceSetUpdatePerform(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdMaintanceSetUpdatePerform message. Does not implicitly {@link hdyRpc.RequestCmdMaintanceSetUpdatePerform.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdMaintanceSetUpdatePerform\n         * @static\n         * @param {hdyRpc.RequestCmdMaintanceSetUpdatePerform} message RequestCmdMaintanceSetUpdatePerform message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdMaintanceSetUpdatePerform.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.fwVersion != null && Object.hasOwnProperty.call(message, \"fwVersion\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.fwVersion);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdMaintanceSetUpdatePerform message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdMaintanceSetUpdatePerform.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdMaintanceSetUpdatePerform\n         * @static\n         * @param {hdyRpc.RequestCmdMaintanceSetUpdatePerform} message RequestCmdMaintanceSetUpdatePerform message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdMaintanceSetUpdatePerform.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdMaintanceSetUpdatePerform message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdMaintanceSetUpdatePerform\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdMaintanceSetUpdatePerform} RequestCmdMaintanceSetUpdatePerform\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdMaintanceSetUpdatePerform.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdMaintanceSetUpdatePerform();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.fwVersion = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdMaintanceSetUpdatePerform message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdMaintanceSetUpdatePerform\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdMaintanceSetUpdatePerform} RequestCmdMaintanceSetUpdatePerform\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdMaintanceSetUpdatePerform.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdMaintanceSetUpdatePerform message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdMaintanceSetUpdatePerform\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdMaintanceSetUpdatePerform.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.fwVersion != null && message.hasOwnProperty(\"fwVersion\"))\n                if (!$util.isString(message.fwVersion))\n                    return \"fwVersion: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdMaintanceSetUpdatePerform message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdMaintanceSetUpdatePerform\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdMaintanceSetUpdatePerform} RequestCmdMaintanceSetUpdatePerform\n         */\n        RequestCmdMaintanceSetUpdatePerform.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdMaintanceSetUpdatePerform)\n                return object;\n            let message = new $root.hdyRpc.RequestCmdMaintanceSetUpdatePerform();\n            if (object.fwVersion != null)\n                message.fwVersion = String(object.fwVersion);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdMaintanceSetUpdatePerform message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdMaintanceSetUpdatePerform\n         * @static\n         * @param {hdyRpc.RequestCmdMaintanceSetUpdatePerform} message RequestCmdMaintanceSetUpdatePerform\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdMaintanceSetUpdatePerform.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.fwVersion = \"\";\n            if (message.fwVersion != null && message.hasOwnProperty(\"fwVersion\"))\n                object.fwVersion = message.fwVersion;\n            return object;\n        };\n\n        /**\n         * Converts this RequestCmdMaintanceSetUpdatePerform to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdMaintanceSetUpdatePerform\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdMaintanceSetUpdatePerform.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdMaintanceSetUpdatePerform;\n    })();\n\n    hdyRpc.ResponseCmdMaintanceSetUpdatePerform = (function() {\n\n        /**\n         * Properties of a ResponseCmdMaintanceSetUpdatePerform.\n         * @memberof hdyRpc\n         * @interface IResponseCmdMaintanceSetUpdatePerform\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdMaintanceSetUpdatePerform result\n         */\n\n        /**\n         * Constructs a new ResponseCmdMaintanceSetUpdatePerform.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdMaintanceSetUpdatePerform.\n         * @implements IResponseCmdMaintanceSetUpdatePerform\n         * @constructor\n         * @param {hdyRpc.IResponseCmdMaintanceSetUpdatePerform=} [properties] Properties to set\n         */\n        function ResponseCmdMaintanceSetUpdatePerform(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdMaintanceSetUpdatePerform result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdMaintanceSetUpdatePerform\n         * @instance\n         */\n        ResponseCmdMaintanceSetUpdatePerform.prototype.result = 0;\n\n        /**\n         * Creates a new ResponseCmdMaintanceSetUpdatePerform instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdMaintanceSetUpdatePerform\n         * @static\n         * @param {hdyRpc.IResponseCmdMaintanceSetUpdatePerform=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdMaintanceSetUpdatePerform} ResponseCmdMaintanceSetUpdatePerform instance\n         */\n        ResponseCmdMaintanceSetUpdatePerform.create = function create(properties) {\n            return new ResponseCmdMaintanceSetUpdatePerform(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdMaintanceSetUpdatePerform message. Does not implicitly {@link hdyRpc.ResponseCmdMaintanceSetUpdatePerform.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdMaintanceSetUpdatePerform\n         * @static\n         * @param {hdyRpc.ResponseCmdMaintanceSetUpdatePerform} message ResponseCmdMaintanceSetUpdatePerform message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdMaintanceSetUpdatePerform.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdMaintanceSetUpdatePerform message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdMaintanceSetUpdatePerform.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdMaintanceSetUpdatePerform\n         * @static\n         * @param {hdyRpc.ResponseCmdMaintanceSetUpdatePerform} message ResponseCmdMaintanceSetUpdatePerform message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdMaintanceSetUpdatePerform.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdMaintanceSetUpdatePerform message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdMaintanceSetUpdatePerform\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdMaintanceSetUpdatePerform} ResponseCmdMaintanceSetUpdatePerform\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdMaintanceSetUpdatePerform.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdMaintanceSetUpdatePerform();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdMaintanceSetUpdatePerform message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdMaintanceSetUpdatePerform\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdMaintanceSetUpdatePerform} ResponseCmdMaintanceSetUpdatePerform\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdMaintanceSetUpdatePerform.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdMaintanceSetUpdatePerform message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdMaintanceSetUpdatePerform\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdMaintanceSetUpdatePerform.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdMaintanceSetUpdatePerform message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdMaintanceSetUpdatePerform\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdMaintanceSetUpdatePerform} ResponseCmdMaintanceSetUpdatePerform\n         */\n        ResponseCmdMaintanceSetUpdatePerform.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdMaintanceSetUpdatePerform)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdMaintanceSetUpdatePerform();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdMaintanceSetUpdatePerform message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdMaintanceSetUpdatePerform\n         * @static\n         * @param {hdyRpc.ResponseCmdMaintanceSetUpdatePerform} message ResponseCmdMaintanceSetUpdatePerform\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdMaintanceSetUpdatePerform.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdMaintanceSetUpdatePerform to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdMaintanceSetUpdatePerform\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdMaintanceSetUpdatePerform.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdMaintanceSetUpdatePerform;\n    })();\n\n    hdyRpc.RequestCmdMaintanceGetUpdateStatus = (function() {\n\n        /**\n         * Properties of a RequestCmdMaintanceGetUpdateStatus.\n         * @memberof hdyRpc\n         * @interface IRequestCmdMaintanceGetUpdateStatus\n         */\n\n        /**\n         * Constructs a new RequestCmdMaintanceGetUpdateStatus.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdMaintanceGetUpdateStatus.\n         * @implements IRequestCmdMaintanceGetUpdateStatus\n         * @constructor\n         * @param {hdyRpc.IRequestCmdMaintanceGetUpdateStatus=} [properties] Properties to set\n         */\n        function RequestCmdMaintanceGetUpdateStatus(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new RequestCmdMaintanceGetUpdateStatus instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdMaintanceGetUpdateStatus\n         * @static\n         * @param {hdyRpc.IRequestCmdMaintanceGetUpdateStatus=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdMaintanceGetUpdateStatus} RequestCmdMaintanceGetUpdateStatus instance\n         */\n        RequestCmdMaintanceGetUpdateStatus.create = function create(properties) {\n            return new RequestCmdMaintanceGetUpdateStatus(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdMaintanceGetUpdateStatus message. Does not implicitly {@link hdyRpc.RequestCmdMaintanceGetUpdateStatus.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdMaintanceGetUpdateStatus\n         * @static\n         * @param {hdyRpc.RequestCmdMaintanceGetUpdateStatus} message RequestCmdMaintanceGetUpdateStatus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdMaintanceGetUpdateStatus.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdMaintanceGetUpdateStatus message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdMaintanceGetUpdateStatus.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdMaintanceGetUpdateStatus\n         * @static\n         * @param {hdyRpc.RequestCmdMaintanceGetUpdateStatus} message RequestCmdMaintanceGetUpdateStatus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdMaintanceGetUpdateStatus.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdMaintanceGetUpdateStatus message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdMaintanceGetUpdateStatus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdMaintanceGetUpdateStatus} RequestCmdMaintanceGetUpdateStatus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdMaintanceGetUpdateStatus.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdMaintanceGetUpdateStatus();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdMaintanceGetUpdateStatus message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdMaintanceGetUpdateStatus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdMaintanceGetUpdateStatus} RequestCmdMaintanceGetUpdateStatus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdMaintanceGetUpdateStatus.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdMaintanceGetUpdateStatus message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdMaintanceGetUpdateStatus\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdMaintanceGetUpdateStatus.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdMaintanceGetUpdateStatus message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdMaintanceGetUpdateStatus\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdMaintanceGetUpdateStatus} RequestCmdMaintanceGetUpdateStatus\n         */\n        RequestCmdMaintanceGetUpdateStatus.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdMaintanceGetUpdateStatus)\n                return object;\n            return new $root.hdyRpc.RequestCmdMaintanceGetUpdateStatus();\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdMaintanceGetUpdateStatus message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdMaintanceGetUpdateStatus\n         * @static\n         * @param {hdyRpc.RequestCmdMaintanceGetUpdateStatus} message RequestCmdMaintanceGetUpdateStatus\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdMaintanceGetUpdateStatus.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this RequestCmdMaintanceGetUpdateStatus to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdMaintanceGetUpdateStatus\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdMaintanceGetUpdateStatus.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdMaintanceGetUpdateStatus;\n    })();\n\n    hdyRpc.ResponseCmdMaintanceGetUpdateStatus = (function() {\n\n        /**\n         * Properties of a ResponseCmdMaintanceGetUpdateStatus.\n         * @memberof hdyRpc\n         * @interface IResponseCmdMaintanceGetUpdateStatus\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdMaintanceGetUpdateStatus result\n         * @property {number|null} [percentComplete] ResponseCmdMaintanceGetUpdateStatus percentComplete\n         */\n\n        /**\n         * Constructs a new ResponseCmdMaintanceGetUpdateStatus.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdMaintanceGetUpdateStatus.\n         * @implements IResponseCmdMaintanceGetUpdateStatus\n         * @constructor\n         * @param {hdyRpc.IResponseCmdMaintanceGetUpdateStatus=} [properties] Properties to set\n         */\n        function ResponseCmdMaintanceGetUpdateStatus(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdMaintanceGetUpdateStatus result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdMaintanceGetUpdateStatus\n         * @instance\n         */\n        ResponseCmdMaintanceGetUpdateStatus.prototype.result = 0;\n\n        /**\n         * ResponseCmdMaintanceGetUpdateStatus percentComplete.\n         * @member {number} percentComplete\n         * @memberof hdyRpc.ResponseCmdMaintanceGetUpdateStatus\n         * @instance\n         */\n        ResponseCmdMaintanceGetUpdateStatus.prototype.percentComplete = 0;\n\n        /**\n         * Creates a new ResponseCmdMaintanceGetUpdateStatus instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdMaintanceGetUpdateStatus\n         * @static\n         * @param {hdyRpc.IResponseCmdMaintanceGetUpdateStatus=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdMaintanceGetUpdateStatus} ResponseCmdMaintanceGetUpdateStatus instance\n         */\n        ResponseCmdMaintanceGetUpdateStatus.create = function create(properties) {\n            return new ResponseCmdMaintanceGetUpdateStatus(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdMaintanceGetUpdateStatus message. Does not implicitly {@link hdyRpc.ResponseCmdMaintanceGetUpdateStatus.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdMaintanceGetUpdateStatus\n         * @static\n         * @param {hdyRpc.ResponseCmdMaintanceGetUpdateStatus} message ResponseCmdMaintanceGetUpdateStatus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdMaintanceGetUpdateStatus.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            if (message.percentComplete != null && Object.hasOwnProperty.call(message, \"percentComplete\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.percentComplete);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdMaintanceGetUpdateStatus message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdMaintanceGetUpdateStatus.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdMaintanceGetUpdateStatus\n         * @static\n         * @param {hdyRpc.ResponseCmdMaintanceGetUpdateStatus} message ResponseCmdMaintanceGetUpdateStatus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdMaintanceGetUpdateStatus.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdMaintanceGetUpdateStatus message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdMaintanceGetUpdateStatus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdMaintanceGetUpdateStatus} ResponseCmdMaintanceGetUpdateStatus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdMaintanceGetUpdateStatus.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdMaintanceGetUpdateStatus();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                case 2:\n                    message.percentComplete = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdMaintanceGetUpdateStatus message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdMaintanceGetUpdateStatus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdMaintanceGetUpdateStatus} ResponseCmdMaintanceGetUpdateStatus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdMaintanceGetUpdateStatus.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdMaintanceGetUpdateStatus message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdMaintanceGetUpdateStatus\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdMaintanceGetUpdateStatus.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            if (message.percentComplete != null && message.hasOwnProperty(\"percentComplete\"))\n                if (!$util.isInteger(message.percentComplete))\n                    return \"percentComplete: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdMaintanceGetUpdateStatus message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdMaintanceGetUpdateStatus\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdMaintanceGetUpdateStatus} ResponseCmdMaintanceGetUpdateStatus\n         */\n        ResponseCmdMaintanceGetUpdateStatus.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdMaintanceGetUpdateStatus)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdMaintanceGetUpdateStatus();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            if (object.percentComplete != null)\n                message.percentComplete = object.percentComplete >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdMaintanceGetUpdateStatus message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdMaintanceGetUpdateStatus\n         * @static\n         * @param {hdyRpc.ResponseCmdMaintanceGetUpdateStatus} message ResponseCmdMaintanceGetUpdateStatus\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdMaintanceGetUpdateStatus.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n                object.percentComplete = 0;\n            }\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            if (message.percentComplete != null && message.hasOwnProperty(\"percentComplete\"))\n                object.percentComplete = message.percentComplete;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdMaintanceGetUpdateStatus to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdMaintanceGetUpdateStatus\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdMaintanceGetUpdateStatus.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdMaintanceGetUpdateStatus;\n    })();\n\n    hdyRpc.RequestCmdOtaGetLatest = (function() {\n\n        /**\n         * Properties of a RequestCmdOtaGetLatest.\n         * @memberof hdyRpc\n         * @interface IRequestCmdOtaGetLatest\n         */\n\n        /**\n         * Constructs a new RequestCmdOtaGetLatest.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdOtaGetLatest.\n         * @implements IRequestCmdOtaGetLatest\n         * @constructor\n         * @param {hdyRpc.IRequestCmdOtaGetLatest=} [properties] Properties to set\n         */\n        function RequestCmdOtaGetLatest(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new RequestCmdOtaGetLatest instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdOtaGetLatest\n         * @static\n         * @param {hdyRpc.IRequestCmdOtaGetLatest=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdOtaGetLatest} RequestCmdOtaGetLatest instance\n         */\n        RequestCmdOtaGetLatest.create = function create(properties) {\n            return new RequestCmdOtaGetLatest(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdOtaGetLatest message. Does not implicitly {@link hdyRpc.RequestCmdOtaGetLatest.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdOtaGetLatest\n         * @static\n         * @param {hdyRpc.RequestCmdOtaGetLatest} message RequestCmdOtaGetLatest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdOtaGetLatest.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdOtaGetLatest message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdOtaGetLatest.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdOtaGetLatest\n         * @static\n         * @param {hdyRpc.RequestCmdOtaGetLatest} message RequestCmdOtaGetLatest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdOtaGetLatest.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdOtaGetLatest message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdOtaGetLatest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdOtaGetLatest} RequestCmdOtaGetLatest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdOtaGetLatest.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdOtaGetLatest();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdOtaGetLatest message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdOtaGetLatest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdOtaGetLatest} RequestCmdOtaGetLatest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdOtaGetLatest.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdOtaGetLatest message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdOtaGetLatest\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdOtaGetLatest.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdOtaGetLatest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdOtaGetLatest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdOtaGetLatest} RequestCmdOtaGetLatest\n         */\n        RequestCmdOtaGetLatest.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdOtaGetLatest)\n                return object;\n            return new $root.hdyRpc.RequestCmdOtaGetLatest();\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdOtaGetLatest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdOtaGetLatest\n         * @static\n         * @param {hdyRpc.RequestCmdOtaGetLatest} message RequestCmdOtaGetLatest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdOtaGetLatest.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this RequestCmdOtaGetLatest to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdOtaGetLatest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdOtaGetLatest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdOtaGetLatest;\n    })();\n\n    hdyRpc.ResponseCmdOtaGetLatest = (function() {\n\n        /**\n         * Properties of a ResponseCmdOtaGetLatest.\n         * @memberof hdyRpc\n         * @interface IResponseCmdOtaGetLatest\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdOtaGetLatest result\n         * @property {string|null} [version] ResponseCmdOtaGetLatest version\n         */\n\n        /**\n         * Constructs a new ResponseCmdOtaGetLatest.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdOtaGetLatest.\n         * @implements IResponseCmdOtaGetLatest\n         * @constructor\n         * @param {hdyRpc.IResponseCmdOtaGetLatest=} [properties] Properties to set\n         */\n        function ResponseCmdOtaGetLatest(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdOtaGetLatest result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdOtaGetLatest\n         * @instance\n         */\n        ResponseCmdOtaGetLatest.prototype.result = 0;\n\n        /**\n         * ResponseCmdOtaGetLatest version.\n         * @member {string} version\n         * @memberof hdyRpc.ResponseCmdOtaGetLatest\n         * @instance\n         */\n        ResponseCmdOtaGetLatest.prototype.version = \"\";\n\n        /**\n         * Creates a new ResponseCmdOtaGetLatest instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdOtaGetLatest\n         * @static\n         * @param {hdyRpc.IResponseCmdOtaGetLatest=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdOtaGetLatest} ResponseCmdOtaGetLatest instance\n         */\n        ResponseCmdOtaGetLatest.create = function create(properties) {\n            return new ResponseCmdOtaGetLatest(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdOtaGetLatest message. Does not implicitly {@link hdyRpc.ResponseCmdOtaGetLatest.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdOtaGetLatest\n         * @static\n         * @param {hdyRpc.ResponseCmdOtaGetLatest} message ResponseCmdOtaGetLatest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdOtaGetLatest.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdOtaGetLatest message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdOtaGetLatest.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdOtaGetLatest\n         * @static\n         * @param {hdyRpc.ResponseCmdOtaGetLatest} message ResponseCmdOtaGetLatest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdOtaGetLatest.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdOtaGetLatest message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdOtaGetLatest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdOtaGetLatest} ResponseCmdOtaGetLatest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdOtaGetLatest.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdOtaGetLatest();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                case 2:\n                    message.version = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdOtaGetLatest message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdOtaGetLatest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdOtaGetLatest} ResponseCmdOtaGetLatest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdOtaGetLatest.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdOtaGetLatest message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdOtaGetLatest\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdOtaGetLatest.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isString(message.version))\n                    return \"version: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdOtaGetLatest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdOtaGetLatest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdOtaGetLatest} ResponseCmdOtaGetLatest\n         */\n        ResponseCmdOtaGetLatest.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdOtaGetLatest)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdOtaGetLatest();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            if (object.version != null)\n                message.version = String(object.version);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdOtaGetLatest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdOtaGetLatest\n         * @static\n         * @param {hdyRpc.ResponseCmdOtaGetLatest} message ResponseCmdOtaGetLatest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdOtaGetLatest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n                object.version = \"\";\n            }\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                object.version = message.version;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdOtaGetLatest to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdOtaGetLatest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdOtaGetLatest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdOtaGetLatest;\n    })();\n\n    hdyRpc.RequestCmdStrokeGetStroke = (function() {\n\n        /**\n         * Properties of a RequestCmdStrokeGetStroke.\n         * @memberof hdyRpc\n         * @interface IRequestCmdStrokeGetStroke\n         */\n\n        /**\n         * Constructs a new RequestCmdStrokeGetStroke.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdStrokeGetStroke.\n         * @implements IRequestCmdStrokeGetStroke\n         * @constructor\n         * @param {hdyRpc.IRequestCmdStrokeGetStroke=} [properties] Properties to set\n         */\n        function RequestCmdStrokeGetStroke(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new RequestCmdStrokeGetStroke instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdStrokeGetStroke\n         * @static\n         * @param {hdyRpc.IRequestCmdStrokeGetStroke=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdStrokeGetStroke} RequestCmdStrokeGetStroke instance\n         */\n        RequestCmdStrokeGetStroke.create = function create(properties) {\n            return new RequestCmdStrokeGetStroke(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdStrokeGetStroke message. Does not implicitly {@link hdyRpc.RequestCmdStrokeGetStroke.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdStrokeGetStroke\n         * @static\n         * @param {hdyRpc.RequestCmdStrokeGetStroke} message RequestCmdStrokeGetStroke message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdStrokeGetStroke.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdStrokeGetStroke message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdStrokeGetStroke.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdStrokeGetStroke\n         * @static\n         * @param {hdyRpc.RequestCmdStrokeGetStroke} message RequestCmdStrokeGetStroke message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdStrokeGetStroke.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdStrokeGetStroke message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdStrokeGetStroke\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdStrokeGetStroke} RequestCmdStrokeGetStroke\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdStrokeGetStroke.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdStrokeGetStroke();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdStrokeGetStroke message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdStrokeGetStroke\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdStrokeGetStroke} RequestCmdStrokeGetStroke\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdStrokeGetStroke.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdStrokeGetStroke message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdStrokeGetStroke\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdStrokeGetStroke.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdStrokeGetStroke message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdStrokeGetStroke\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdStrokeGetStroke} RequestCmdStrokeGetStroke\n         */\n        RequestCmdStrokeGetStroke.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdStrokeGetStroke)\n                return object;\n            return new $root.hdyRpc.RequestCmdStrokeGetStroke();\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdStrokeGetStroke message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdStrokeGetStroke\n         * @static\n         * @param {hdyRpc.RequestCmdStrokeGetStroke} message RequestCmdStrokeGetStroke\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdStrokeGetStroke.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this RequestCmdStrokeGetStroke to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdStrokeGetStroke\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdStrokeGetStroke.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdStrokeGetStroke;\n    })();\n\n    hdyRpc.ResponseCmdStrokeGetStroke = (function() {\n\n        /**\n         * Properties of a ResponseCmdStrokeGetStroke.\n         * @memberof hdyRpc\n         * @interface IResponseCmdStrokeGetStroke\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdStrokeGetStroke result\n         * @property {number|null} [min] ResponseCmdStrokeGetStroke min\n         * @property {number|null} [max] ResponseCmdStrokeGetStroke max\n         */\n\n        /**\n         * Constructs a new ResponseCmdStrokeGetStroke.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdStrokeGetStroke.\n         * @implements IResponseCmdStrokeGetStroke\n         * @constructor\n         * @param {hdyRpc.IResponseCmdStrokeGetStroke=} [properties] Properties to set\n         */\n        function ResponseCmdStrokeGetStroke(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdStrokeGetStroke result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdStrokeGetStroke\n         * @instance\n         */\n        ResponseCmdStrokeGetStroke.prototype.result = 0;\n\n        /**\n         * ResponseCmdStrokeGetStroke min.\n         * @member {number} min\n         * @memberof hdyRpc.ResponseCmdStrokeGetStroke\n         * @instance\n         */\n        ResponseCmdStrokeGetStroke.prototype.min = 0;\n\n        /**\n         * ResponseCmdStrokeGetStroke max.\n         * @member {number} max\n         * @memberof hdyRpc.ResponseCmdStrokeGetStroke\n         * @instance\n         */\n        ResponseCmdStrokeGetStroke.prototype.max = 0;\n\n        /**\n         * Creates a new ResponseCmdStrokeGetStroke instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdStrokeGetStroke\n         * @static\n         * @param {hdyRpc.IResponseCmdStrokeGetStroke=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdStrokeGetStroke} ResponseCmdStrokeGetStroke instance\n         */\n        ResponseCmdStrokeGetStroke.create = function create(properties) {\n            return new ResponseCmdStrokeGetStroke(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdStrokeGetStroke message. Does not implicitly {@link hdyRpc.ResponseCmdStrokeGetStroke.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdStrokeGetStroke\n         * @static\n         * @param {hdyRpc.ResponseCmdStrokeGetStroke} message ResponseCmdStrokeGetStroke message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdStrokeGetStroke.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            if (message.min != null && Object.hasOwnProperty.call(message, \"min\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.min);\n            if (message.max != null && Object.hasOwnProperty.call(message, \"max\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.max);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdStrokeGetStroke message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdStrokeGetStroke.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdStrokeGetStroke\n         * @static\n         * @param {hdyRpc.ResponseCmdStrokeGetStroke} message ResponseCmdStrokeGetStroke message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdStrokeGetStroke.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdStrokeGetStroke message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdStrokeGetStroke\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdStrokeGetStroke} ResponseCmdStrokeGetStroke\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdStrokeGetStroke.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdStrokeGetStroke();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                case 2:\n                    message.min = reader.uint32();\n                    break;\n                case 3:\n                    message.max = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdStrokeGetStroke message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdStrokeGetStroke\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdStrokeGetStroke} ResponseCmdStrokeGetStroke\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdStrokeGetStroke.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdStrokeGetStroke message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdStrokeGetStroke\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdStrokeGetStroke.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            if (message.min != null && message.hasOwnProperty(\"min\"))\n                if (!$util.isInteger(message.min))\n                    return \"min: integer expected\";\n            if (message.max != null && message.hasOwnProperty(\"max\"))\n                if (!$util.isInteger(message.max))\n                    return \"max: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdStrokeGetStroke message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdStrokeGetStroke\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdStrokeGetStroke} ResponseCmdStrokeGetStroke\n         */\n        ResponseCmdStrokeGetStroke.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdStrokeGetStroke)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdStrokeGetStroke();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            if (object.min != null)\n                message.min = object.min >>> 0;\n            if (object.max != null)\n                message.max = object.max >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdStrokeGetStroke message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdStrokeGetStroke\n         * @static\n         * @param {hdyRpc.ResponseCmdStrokeGetStroke} message ResponseCmdStrokeGetStroke\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdStrokeGetStroke.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n                object.min = 0;\n                object.max = 0;\n            }\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            if (message.min != null && message.hasOwnProperty(\"min\"))\n                object.min = message.min;\n            if (message.max != null && message.hasOwnProperty(\"max\"))\n                object.max = message.max;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdStrokeGetStroke to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdStrokeGetStroke\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdStrokeGetStroke.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdStrokeGetStroke;\n    })();\n\n    hdyRpc.RequestCmdStrokeSetStroke = (function() {\n\n        /**\n         * Properties of a RequestCmdStrokeSetStroke.\n         * @memberof hdyRpc\n         * @interface IRequestCmdStrokeSetStroke\n         * @property {number|null} [min] RequestCmdStrokeSetStroke min\n         * @property {number|null} [max] RequestCmdStrokeSetStroke max\n         */\n\n        /**\n         * Constructs a new RequestCmdStrokeSetStroke.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdStrokeSetStroke.\n         * @implements IRequestCmdStrokeSetStroke\n         * @constructor\n         * @param {hdyRpc.IRequestCmdStrokeSetStroke=} [properties] Properties to set\n         */\n        function RequestCmdStrokeSetStroke(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RequestCmdStrokeSetStroke min.\n         * @member {number} min\n         * @memberof hdyRpc.RequestCmdStrokeSetStroke\n         * @instance\n         */\n        RequestCmdStrokeSetStroke.prototype.min = 0;\n\n        /**\n         * RequestCmdStrokeSetStroke max.\n         * @member {number} max\n         * @memberof hdyRpc.RequestCmdStrokeSetStroke\n         * @instance\n         */\n        RequestCmdStrokeSetStroke.prototype.max = 0;\n\n        /**\n         * Creates a new RequestCmdStrokeSetStroke instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdStrokeSetStroke\n         * @static\n         * @param {hdyRpc.IRequestCmdStrokeSetStroke=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdStrokeSetStroke} RequestCmdStrokeSetStroke instance\n         */\n        RequestCmdStrokeSetStroke.create = function create(properties) {\n            return new RequestCmdStrokeSetStroke(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdStrokeSetStroke message. Does not implicitly {@link hdyRpc.RequestCmdStrokeSetStroke.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdStrokeSetStroke\n         * @static\n         * @param {hdyRpc.RequestCmdStrokeSetStroke} message RequestCmdStrokeSetStroke message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdStrokeSetStroke.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.min != null && Object.hasOwnProperty.call(message, \"min\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.min);\n            if (message.max != null && Object.hasOwnProperty.call(message, \"max\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.max);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdStrokeSetStroke message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdStrokeSetStroke.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdStrokeSetStroke\n         * @static\n         * @param {hdyRpc.RequestCmdStrokeSetStroke} message RequestCmdStrokeSetStroke message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdStrokeSetStroke.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdStrokeSetStroke message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdStrokeSetStroke\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdStrokeSetStroke} RequestCmdStrokeSetStroke\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdStrokeSetStroke.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdStrokeSetStroke();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.min = reader.uint32();\n                    break;\n                case 2:\n                    message.max = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdStrokeSetStroke message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdStrokeSetStroke\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdStrokeSetStroke} RequestCmdStrokeSetStroke\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdStrokeSetStroke.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdStrokeSetStroke message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdStrokeSetStroke\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdStrokeSetStroke.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.min != null && message.hasOwnProperty(\"min\"))\n                if (!$util.isInteger(message.min))\n                    return \"min: integer expected\";\n            if (message.max != null && message.hasOwnProperty(\"max\"))\n                if (!$util.isInteger(message.max))\n                    return \"max: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdStrokeSetStroke message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdStrokeSetStroke\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdStrokeSetStroke} RequestCmdStrokeSetStroke\n         */\n        RequestCmdStrokeSetStroke.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdStrokeSetStroke)\n                return object;\n            let message = new $root.hdyRpc.RequestCmdStrokeSetStroke();\n            if (object.min != null)\n                message.min = object.min >>> 0;\n            if (object.max != null)\n                message.max = object.max >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdStrokeSetStroke message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdStrokeSetStroke\n         * @static\n         * @param {hdyRpc.RequestCmdStrokeSetStroke} message RequestCmdStrokeSetStroke\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdStrokeSetStroke.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.min = 0;\n                object.max = 0;\n            }\n            if (message.min != null && message.hasOwnProperty(\"min\"))\n                object.min = message.min;\n            if (message.max != null && message.hasOwnProperty(\"max\"))\n                object.max = message.max;\n            return object;\n        };\n\n        /**\n         * Converts this RequestCmdStrokeSetStroke to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdStrokeSetStroke\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdStrokeSetStroke.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdStrokeSetStroke;\n    })();\n\n    hdyRpc.ResponseCmdStrokeSetStroke = (function() {\n\n        /**\n         * Properties of a ResponseCmdStrokeSetStroke.\n         * @memberof hdyRpc\n         * @interface IResponseCmdStrokeSetStroke\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdStrokeSetStroke result\n         */\n\n        /**\n         * Constructs a new ResponseCmdStrokeSetStroke.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdStrokeSetStroke.\n         * @implements IResponseCmdStrokeSetStroke\n         * @constructor\n         * @param {hdyRpc.IResponseCmdStrokeSetStroke=} [properties] Properties to set\n         */\n        function ResponseCmdStrokeSetStroke(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdStrokeSetStroke result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdStrokeSetStroke\n         * @instance\n         */\n        ResponseCmdStrokeSetStroke.prototype.result = 0;\n\n        /**\n         * Creates a new ResponseCmdStrokeSetStroke instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdStrokeSetStroke\n         * @static\n         * @param {hdyRpc.IResponseCmdStrokeSetStroke=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdStrokeSetStroke} ResponseCmdStrokeSetStroke instance\n         */\n        ResponseCmdStrokeSetStroke.create = function create(properties) {\n            return new ResponseCmdStrokeSetStroke(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdStrokeSetStroke message. Does not implicitly {@link hdyRpc.ResponseCmdStrokeSetStroke.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdStrokeSetStroke\n         * @static\n         * @param {hdyRpc.ResponseCmdStrokeSetStroke} message ResponseCmdStrokeSetStroke message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdStrokeSetStroke.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdStrokeSetStroke message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdStrokeSetStroke.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdStrokeSetStroke\n         * @static\n         * @param {hdyRpc.ResponseCmdStrokeSetStroke} message ResponseCmdStrokeSetStroke message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdStrokeSetStroke.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdStrokeSetStroke message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdStrokeSetStroke\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdStrokeSetStroke} ResponseCmdStrokeSetStroke\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdStrokeSetStroke.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdStrokeSetStroke();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdStrokeSetStroke message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdStrokeSetStroke\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdStrokeSetStroke} ResponseCmdStrokeSetStroke\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdStrokeSetStroke.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdStrokeSetStroke message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdStrokeSetStroke\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdStrokeSetStroke.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdStrokeSetStroke message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdStrokeSetStroke\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdStrokeSetStroke} ResponseCmdStrokeSetStroke\n         */\n        ResponseCmdStrokeSetStroke.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdStrokeSetStroke)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdStrokeSetStroke();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdStrokeSetStroke message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdStrokeSetStroke\n         * @static\n         * @param {hdyRpc.ResponseCmdStrokeSetStroke} message ResponseCmdStrokeSetStroke\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdStrokeSetStroke.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdStrokeSetStroke to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdStrokeSetStroke\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdStrokeSetStroke.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdStrokeSetStroke;\n    })();\n\n    hdyRpc.RequestCmdStrokeGetPositionAbsolute = (function() {\n\n        /**\n         * Properties of a RequestCmdStrokeGetPositionAbsolute.\n         * @memberof hdyRpc\n         * @interface IRequestCmdStrokeGetPositionAbsolute\n         */\n\n        /**\n         * Constructs a new RequestCmdStrokeGetPositionAbsolute.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdStrokeGetPositionAbsolute.\n         * @implements IRequestCmdStrokeGetPositionAbsolute\n         * @constructor\n         * @param {hdyRpc.IRequestCmdStrokeGetPositionAbsolute=} [properties] Properties to set\n         */\n        function RequestCmdStrokeGetPositionAbsolute(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new RequestCmdStrokeGetPositionAbsolute instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdStrokeGetPositionAbsolute\n         * @static\n         * @param {hdyRpc.IRequestCmdStrokeGetPositionAbsolute=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdStrokeGetPositionAbsolute} RequestCmdStrokeGetPositionAbsolute instance\n         */\n        RequestCmdStrokeGetPositionAbsolute.create = function create(properties) {\n            return new RequestCmdStrokeGetPositionAbsolute(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdStrokeGetPositionAbsolute message. Does not implicitly {@link hdyRpc.RequestCmdStrokeGetPositionAbsolute.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdStrokeGetPositionAbsolute\n         * @static\n         * @param {hdyRpc.RequestCmdStrokeGetPositionAbsolute} message RequestCmdStrokeGetPositionAbsolute message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdStrokeGetPositionAbsolute.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdStrokeGetPositionAbsolute message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdStrokeGetPositionAbsolute.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdStrokeGetPositionAbsolute\n         * @static\n         * @param {hdyRpc.RequestCmdStrokeGetPositionAbsolute} message RequestCmdStrokeGetPositionAbsolute message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdStrokeGetPositionAbsolute.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdStrokeGetPositionAbsolute message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdStrokeGetPositionAbsolute\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdStrokeGetPositionAbsolute} RequestCmdStrokeGetPositionAbsolute\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdStrokeGetPositionAbsolute.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdStrokeGetPositionAbsolute();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdStrokeGetPositionAbsolute message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdStrokeGetPositionAbsolute\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdStrokeGetPositionAbsolute} RequestCmdStrokeGetPositionAbsolute\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdStrokeGetPositionAbsolute.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdStrokeGetPositionAbsolute message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdStrokeGetPositionAbsolute\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdStrokeGetPositionAbsolute.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdStrokeGetPositionAbsolute message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdStrokeGetPositionAbsolute\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdStrokeGetPositionAbsolute} RequestCmdStrokeGetPositionAbsolute\n         */\n        RequestCmdStrokeGetPositionAbsolute.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdStrokeGetPositionAbsolute)\n                return object;\n            return new $root.hdyRpc.RequestCmdStrokeGetPositionAbsolute();\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdStrokeGetPositionAbsolute message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdStrokeGetPositionAbsolute\n         * @static\n         * @param {hdyRpc.RequestCmdStrokeGetPositionAbsolute} message RequestCmdStrokeGetPositionAbsolute\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdStrokeGetPositionAbsolute.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this RequestCmdStrokeGetPositionAbsolute to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdStrokeGetPositionAbsolute\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdStrokeGetPositionAbsolute.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdStrokeGetPositionAbsolute;\n    })();\n\n    hdyRpc.ResponseCmdStrokeGetPositionAbsolute = (function() {\n\n        /**\n         * Properties of a ResponseCmdStrokeGetPositionAbsolute.\n         * @memberof hdyRpc\n         * @interface IResponseCmdStrokeGetPositionAbsolute\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdStrokeGetPositionAbsolute result\n         * @property {number|null} [position] ResponseCmdStrokeGetPositionAbsolute position\n         */\n\n        /**\n         * Constructs a new ResponseCmdStrokeGetPositionAbsolute.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdStrokeGetPositionAbsolute.\n         * @implements IResponseCmdStrokeGetPositionAbsolute\n         * @constructor\n         * @param {hdyRpc.IResponseCmdStrokeGetPositionAbsolute=} [properties] Properties to set\n         */\n        function ResponseCmdStrokeGetPositionAbsolute(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdStrokeGetPositionAbsolute result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionAbsolute\n         * @instance\n         */\n        ResponseCmdStrokeGetPositionAbsolute.prototype.result = 0;\n\n        /**\n         * ResponseCmdStrokeGetPositionAbsolute position.\n         * @member {number} position\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionAbsolute\n         * @instance\n         */\n        ResponseCmdStrokeGetPositionAbsolute.prototype.position = 0;\n\n        /**\n         * Creates a new ResponseCmdStrokeGetPositionAbsolute instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionAbsolute\n         * @static\n         * @param {hdyRpc.IResponseCmdStrokeGetPositionAbsolute=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdStrokeGetPositionAbsolute} ResponseCmdStrokeGetPositionAbsolute instance\n         */\n        ResponseCmdStrokeGetPositionAbsolute.create = function create(properties) {\n            return new ResponseCmdStrokeGetPositionAbsolute(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdStrokeGetPositionAbsolute message. Does not implicitly {@link hdyRpc.ResponseCmdStrokeGetPositionAbsolute.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionAbsolute\n         * @static\n         * @param {hdyRpc.ResponseCmdStrokeGetPositionAbsolute} message ResponseCmdStrokeGetPositionAbsolute message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdStrokeGetPositionAbsolute.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            if (message.position != null && Object.hasOwnProperty.call(message, \"position\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.position);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdStrokeGetPositionAbsolute message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdStrokeGetPositionAbsolute.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionAbsolute\n         * @static\n         * @param {hdyRpc.ResponseCmdStrokeGetPositionAbsolute} message ResponseCmdStrokeGetPositionAbsolute message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdStrokeGetPositionAbsolute.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdStrokeGetPositionAbsolute message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionAbsolute\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdStrokeGetPositionAbsolute} ResponseCmdStrokeGetPositionAbsolute\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdStrokeGetPositionAbsolute.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdStrokeGetPositionAbsolute();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                case 2:\n                    message.position = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdStrokeGetPositionAbsolute message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionAbsolute\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdStrokeGetPositionAbsolute} ResponseCmdStrokeGetPositionAbsolute\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdStrokeGetPositionAbsolute.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdStrokeGetPositionAbsolute message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionAbsolute\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdStrokeGetPositionAbsolute.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            if (message.position != null && message.hasOwnProperty(\"position\"))\n                if (typeof message.position !== \"number\")\n                    return \"position: number expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdStrokeGetPositionAbsolute message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionAbsolute\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdStrokeGetPositionAbsolute} ResponseCmdStrokeGetPositionAbsolute\n         */\n        ResponseCmdStrokeGetPositionAbsolute.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdStrokeGetPositionAbsolute)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdStrokeGetPositionAbsolute();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            if (object.position != null)\n                message.position = Number(object.position);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdStrokeGetPositionAbsolute message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionAbsolute\n         * @static\n         * @param {hdyRpc.ResponseCmdStrokeGetPositionAbsolute} message ResponseCmdStrokeGetPositionAbsolute\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdStrokeGetPositionAbsolute.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n                object.position = 0;\n            }\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            if (message.position != null && message.hasOwnProperty(\"position\"))\n                object.position = options.json && !isFinite(message.position) ? String(message.position) : message.position;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdStrokeGetPositionAbsolute to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionAbsolute\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdStrokeGetPositionAbsolute.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdStrokeGetPositionAbsolute;\n    })();\n\n    hdyRpc.RequestCmdStrokeGetPositionRelative = (function() {\n\n        /**\n         * Properties of a RequestCmdStrokeGetPositionRelative.\n         * @memberof hdyRpc\n         * @interface IRequestCmdStrokeGetPositionRelative\n         */\n\n        /**\n         * Constructs a new RequestCmdStrokeGetPositionRelative.\n         * @memberof hdyRpc\n         * @classdesc Represents a RequestCmdStrokeGetPositionRelative.\n         * @implements IRequestCmdStrokeGetPositionRelative\n         * @constructor\n         * @param {hdyRpc.IRequestCmdStrokeGetPositionRelative=} [properties] Properties to set\n         */\n        function RequestCmdStrokeGetPositionRelative(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new RequestCmdStrokeGetPositionRelative instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RequestCmdStrokeGetPositionRelative\n         * @static\n         * @param {hdyRpc.IRequestCmdStrokeGetPositionRelative=} [properties] Properties to set\n         * @returns {hdyRpc.RequestCmdStrokeGetPositionRelative} RequestCmdStrokeGetPositionRelative instance\n         */\n        RequestCmdStrokeGetPositionRelative.create = function create(properties) {\n            return new RequestCmdStrokeGetPositionRelative(properties);\n        };\n\n        /**\n         * Encodes the specified RequestCmdStrokeGetPositionRelative message. Does not implicitly {@link hdyRpc.RequestCmdStrokeGetPositionRelative.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RequestCmdStrokeGetPositionRelative\n         * @static\n         * @param {hdyRpc.RequestCmdStrokeGetPositionRelative} message RequestCmdStrokeGetPositionRelative message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdStrokeGetPositionRelative.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestCmdStrokeGetPositionRelative message, length delimited. Does not implicitly {@link hdyRpc.RequestCmdStrokeGetPositionRelative.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RequestCmdStrokeGetPositionRelative\n         * @static\n         * @param {hdyRpc.RequestCmdStrokeGetPositionRelative} message RequestCmdStrokeGetPositionRelative message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestCmdStrokeGetPositionRelative.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestCmdStrokeGetPositionRelative message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RequestCmdStrokeGetPositionRelative\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RequestCmdStrokeGetPositionRelative} RequestCmdStrokeGetPositionRelative\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdStrokeGetPositionRelative.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RequestCmdStrokeGetPositionRelative();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestCmdStrokeGetPositionRelative message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RequestCmdStrokeGetPositionRelative\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RequestCmdStrokeGetPositionRelative} RequestCmdStrokeGetPositionRelative\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestCmdStrokeGetPositionRelative.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestCmdStrokeGetPositionRelative message.\n         * @function verify\n         * @memberof hdyRpc.RequestCmdStrokeGetPositionRelative\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestCmdStrokeGetPositionRelative.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestCmdStrokeGetPositionRelative message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RequestCmdStrokeGetPositionRelative\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RequestCmdStrokeGetPositionRelative} RequestCmdStrokeGetPositionRelative\n         */\n        RequestCmdStrokeGetPositionRelative.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RequestCmdStrokeGetPositionRelative)\n                return object;\n            return new $root.hdyRpc.RequestCmdStrokeGetPositionRelative();\n        };\n\n        /**\n         * Creates a plain object from a RequestCmdStrokeGetPositionRelative message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RequestCmdStrokeGetPositionRelative\n         * @static\n         * @param {hdyRpc.RequestCmdStrokeGetPositionRelative} message RequestCmdStrokeGetPositionRelative\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestCmdStrokeGetPositionRelative.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this RequestCmdStrokeGetPositionRelative to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RequestCmdStrokeGetPositionRelative\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestCmdStrokeGetPositionRelative.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestCmdStrokeGetPositionRelative;\n    })();\n\n    hdyRpc.ResponseCmdStrokeGetPositionRelative = (function() {\n\n        /**\n         * Properties of a ResponseCmdStrokeGetPositionRelative.\n         * @memberof hdyRpc\n         * @interface IResponseCmdStrokeGetPositionRelative\n         * @property {hdyRpc.ResultCodes|null} [result] ResponseCmdStrokeGetPositionRelative result\n         * @property {number|null} [position] ResponseCmdStrokeGetPositionRelative position\n         */\n\n        /**\n         * Constructs a new ResponseCmdStrokeGetPositionRelative.\n         * @memberof hdyRpc\n         * @classdesc Represents a ResponseCmdStrokeGetPositionRelative.\n         * @implements IResponseCmdStrokeGetPositionRelative\n         * @constructor\n         * @param {hdyRpc.IResponseCmdStrokeGetPositionRelative=} [properties] Properties to set\n         */\n        function ResponseCmdStrokeGetPositionRelative(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ResponseCmdStrokeGetPositionRelative result.\n         * @member {hdyRpc.ResultCodes} result\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionRelative\n         * @instance\n         */\n        ResponseCmdStrokeGetPositionRelative.prototype.result = 0;\n\n        /**\n         * ResponseCmdStrokeGetPositionRelative position.\n         * @member {number} position\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionRelative\n         * @instance\n         */\n        ResponseCmdStrokeGetPositionRelative.prototype.position = 0;\n\n        /**\n         * Creates a new ResponseCmdStrokeGetPositionRelative instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionRelative\n         * @static\n         * @param {hdyRpc.IResponseCmdStrokeGetPositionRelative=} [properties] Properties to set\n         * @returns {hdyRpc.ResponseCmdStrokeGetPositionRelative} ResponseCmdStrokeGetPositionRelative instance\n         */\n        ResponseCmdStrokeGetPositionRelative.create = function create(properties) {\n            return new ResponseCmdStrokeGetPositionRelative(properties);\n        };\n\n        /**\n         * Encodes the specified ResponseCmdStrokeGetPositionRelative message. Does not implicitly {@link hdyRpc.ResponseCmdStrokeGetPositionRelative.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionRelative\n         * @static\n         * @param {hdyRpc.ResponseCmdStrokeGetPositionRelative} message ResponseCmdStrokeGetPositionRelative message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdStrokeGetPositionRelative.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n            if (message.position != null && Object.hasOwnProperty.call(message, \"position\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.position);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ResponseCmdStrokeGetPositionRelative message, length delimited. Does not implicitly {@link hdyRpc.ResponseCmdStrokeGetPositionRelative.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionRelative\n         * @static\n         * @param {hdyRpc.ResponseCmdStrokeGetPositionRelative} message ResponseCmdStrokeGetPositionRelative message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ResponseCmdStrokeGetPositionRelative.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ResponseCmdStrokeGetPositionRelative message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionRelative\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.ResponseCmdStrokeGetPositionRelative} ResponseCmdStrokeGetPositionRelative\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdStrokeGetPositionRelative.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.ResponseCmdStrokeGetPositionRelative();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.result = reader.int32();\n                    break;\n                case 2:\n                    message.position = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ResponseCmdStrokeGetPositionRelative message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionRelative\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.ResponseCmdStrokeGetPositionRelative} ResponseCmdStrokeGetPositionRelative\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ResponseCmdStrokeGetPositionRelative.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ResponseCmdStrokeGetPositionRelative message.\n         * @function verify\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionRelative\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ResponseCmdStrokeGetPositionRelative.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                switch (message.result) {\n                default:\n                    return \"result: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case -1:\n                case -2:\n                case -3:\n                case -4:\n                case -5:\n                case -6:\n                case -7:\n                case -8:\n                case -9:\n                    break;\n                }\n            if (message.position != null && message.hasOwnProperty(\"position\"))\n                if (typeof message.position !== \"number\")\n                    return \"position: number expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ResponseCmdStrokeGetPositionRelative message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionRelative\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.ResponseCmdStrokeGetPositionRelative} ResponseCmdStrokeGetPositionRelative\n         */\n        ResponseCmdStrokeGetPositionRelative.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.ResponseCmdStrokeGetPositionRelative)\n                return object;\n            let message = new $root.hdyRpc.ResponseCmdStrokeGetPositionRelative();\n            switch (object.result) {\n            case \"RESULT_UNKNOWN\":\n            case 0:\n                message.result = 0;\n                break;\n            case \"RESULT_OK\":\n            case 1:\n                message.result = 1;\n                break;\n            case \"RESULT_OK_ALREADY_SET\":\n            case 2:\n                message.result = 2;\n                break;\n            case \"RESULT_ERR_GENERIC\":\n            case -1:\n                message.result = -1;\n                break;\n            case \"RESULT_ERR_NO_MEMORY\":\n            case -2:\n                message.result = -2;\n                break;\n            case \"RESULT_ERR_INVALID_ARG\":\n            case -3:\n                message.result = -3;\n                break;\n            case \"RESULT_ERR_INVALID_STATE\":\n            case -4:\n                message.result = -4;\n                break;\n            case \"RESULT_ERR_INVALID_SIZE\":\n            case -5:\n                message.result = -5;\n                break;\n            case \"RESULT_ERR_NOT_FOUND\":\n            case -6:\n                message.result = -6;\n                break;\n            case \"RESULT_ERR_NOT_SUPPORTED\":\n            case -7:\n                message.result = -7;\n                break;\n            case \"RESULT_ERR_TIMEOUT\":\n            case -8:\n                message.result = -8;\n                break;\n            case \"RESULT_ERR_INVALID_RESPONSE\":\n            case -9:\n                message.result = -9;\n                break;\n            }\n            if (object.position != null)\n                message.position = Number(object.position);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ResponseCmdStrokeGetPositionRelative message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionRelative\n         * @static\n         * @param {hdyRpc.ResponseCmdStrokeGetPositionRelative} message ResponseCmdStrokeGetPositionRelative\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ResponseCmdStrokeGetPositionRelative.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.result = options.enums === String ? \"RESULT_UNKNOWN\" : 0;\n                object.position = 0;\n            }\n            if (message.result != null && message.hasOwnProperty(\"result\"))\n                object.result = options.enums === String ? $root.hdyRpc.ResultCodes[message.result] : message.result;\n            if (message.position != null && message.hasOwnProperty(\"position\"))\n                object.position = options.json && !isFinite(message.position) ? String(message.position) : message.position;\n            return object;\n        };\n\n        /**\n         * Converts this ResponseCmdStrokeGetPositionRelative to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.ResponseCmdStrokeGetPositionRelative\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ResponseCmdStrokeGetPositionRelative.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ResponseCmdStrokeGetPositionRelative;\n    })();\n\n    /**\n     * RequestMethods enum.\n     * @name hdyRpc.RequestMethods\n     * @enum {number}\n     * @property {number} REQUEST_METHOD_UNKNOWN=0 REQUEST_METHOD_UNKNOWN value\n     * @property {number} REQUEST_METHOD_GET_SERVER_TIME=300 REQUEST_METHOD_GET_SERVER_TIME value\n     * @property {number} REQUEST_METHOD_WS_HANDSHAKE=500 REQUEST_METHOD_WS_HANDSHAKE value\n     * @property {number} REQUEST_METHOD_GENERATE_CONNECTION_KEY=501 REQUEST_METHOD_GENERATE_CONNECTION_KEY value\n     * @property {number} REQUEST_METHOD_SET_CONNECTION_KEY=502 REQUEST_METHOD_SET_CONNECTION_KEY value\n     * @property {number} REQUEST_METHOD_GET_MODE=700 REQUEST_METHOD_GET_MODE value\n     * @property {number} REQUEST_METHOD_SET_MODE=701 REQUEST_METHOD_SET_MODE value\n     * @property {number} REQUEST_METHOD_GET_CONNECTED=702 REQUEST_METHOD_GET_CONNECTED value\n     * @property {number} REQUEST_METHOD_GET_INFO=703 REQUEST_METHOD_GET_INFO value\n     * @property {number} REQUEST_METHOD_GET_SETTINGS=704 REQUEST_METHOD_GET_SETTINGS value\n     * @property {number} REQUEST_METHOD_GET_STATUS=705 REQUEST_METHOD_GET_STATUS value\n     * @property {number} REQUEST_METHOD_HAMP_SET_START=720 REQUEST_METHOD_HAMP_SET_START value\n     * @property {number} REQUEST_METHOD_HAMP_SET_STOP=721 REQUEST_METHOD_HAMP_SET_STOP value\n     * @property {number} REQUEST_METHOD_HAMP_GET_VELOCITY=722 REQUEST_METHOD_HAMP_GET_VELOCITY value\n     * @property {number} REQUEST_METHOD_HAMP_SET_VELOCITY=723 REQUEST_METHOD_HAMP_SET_VELOCITY value\n     * @property {number} REQUEST_METHOD_HAMP_GET_STATE=724 REQUEST_METHOD_HAMP_GET_STATE value\n     * @property {number} REQUEST_METHOD_HDSP_SET_XAVA=740 REQUEST_METHOD_HDSP_SET_XAVA value\n     * @property {number} REQUEST_METHOD_HDSP_SET_XPVA=741 REQUEST_METHOD_HDSP_SET_XPVA value\n     * @property {number} REQUEST_METHOD_HDSP_SET_XPVP=742 REQUEST_METHOD_HDSP_SET_XPVP value\n     * @property {number} REQUEST_METHOD_HDSP_SET_XAT=743 REQUEST_METHOD_HDSP_SET_XAT value\n     * @property {number} REQUEST_METHOD_HDSP_SET_XPT=744 REQUEST_METHOD_HDSP_SET_XPT value\n     * @property {number} REQUEST_METHOD_HDSP_SET_XAVP=745 REQUEST_METHOD_HDSP_SET_XAVP value\n     * @property {number} REQUEST_METHOD_HSTP_GET_TIME=780 REQUEST_METHOD_HSTP_GET_TIME value\n     * @property {number} REQUEST_METHOD_HSTP_GET_OFFSET=781 REQUEST_METHOD_HSTP_GET_OFFSET value\n     * @property {number} REQUEST_METHOD_HSTP_SET_OFFSET=782 REQUEST_METHOD_HSTP_SET_OFFSET value\n     * @property {number} REQUEST_METHOD_HSTP_GET_RTD=783 REQUEST_METHOD_HSTP_GET_RTD value\n     * @property {number} REQUEST_METHOD_HSTP_SET_SYNC=784 REQUEST_METHOD_HSTP_SET_SYNC value\n     * @property {number} REQUEST_METHOD_MAINTENANCE_SET_RESTART=800 REQUEST_METHOD_MAINTENANCE_SET_RESTART value\n     * @property {number} REQUEST_METHOD_MAINTENANCE_SET_UPDATE_PERFORM=801 REQUEST_METHOD_MAINTENANCE_SET_UPDATE_PERFORM value\n     * @property {number} REQUEST_METHOD_MAINTENANCE_SET_UPDATE_STATUS=802 REQUEST_METHOD_MAINTENANCE_SET_UPDATE_STATUS value\n     * @property {number} REQUEST_METHOD_OTA_GET_LATEST=820 REQUEST_METHOD_OTA_GET_LATEST value\n     * @property {number} REQUEST_METHOD_STROKE_GET_STROKE=840 REQUEST_METHOD_STROKE_GET_STROKE value\n     * @property {number} REQUEST_METHOD_STROKE_SET_STROKE=841 REQUEST_METHOD_STROKE_SET_STROKE value\n     * @property {number} REQUEST_METHOD_STROKE_GET_STROKE_POSITION_ABSOLUTE=842 REQUEST_METHOD_STROKE_GET_STROKE_POSITION_ABSOLUTE value\n     * @property {number} REQUEST_METHOD_STROKE_GET_STROKE_POSITION_RELATIVE=843 REQUEST_METHOD_STROKE_GET_STROKE_POSITION_RELATIVE value\n     */\n    hdyRpc.RequestMethods = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"REQUEST_METHOD_UNKNOWN\"] = 0;\n        values[valuesById[300] = \"REQUEST_METHOD_GET_SERVER_TIME\"] = 300;\n        values[valuesById[500] = \"REQUEST_METHOD_WS_HANDSHAKE\"] = 500;\n        values[valuesById[501] = \"REQUEST_METHOD_GENERATE_CONNECTION_KEY\"] = 501;\n        values[valuesById[502] = \"REQUEST_METHOD_SET_CONNECTION_KEY\"] = 502;\n        values[valuesById[700] = \"REQUEST_METHOD_GET_MODE\"] = 700;\n        values[valuesById[701] = \"REQUEST_METHOD_SET_MODE\"] = 701;\n        values[valuesById[702] = \"REQUEST_METHOD_GET_CONNECTED\"] = 702;\n        values[valuesById[703] = \"REQUEST_METHOD_GET_INFO\"] = 703;\n        values[valuesById[704] = \"REQUEST_METHOD_GET_SETTINGS\"] = 704;\n        values[valuesById[705] = \"REQUEST_METHOD_GET_STATUS\"] = 705;\n        values[valuesById[720] = \"REQUEST_METHOD_HAMP_SET_START\"] = 720;\n        values[valuesById[721] = \"REQUEST_METHOD_HAMP_SET_STOP\"] = 721;\n        values[valuesById[722] = \"REQUEST_METHOD_HAMP_GET_VELOCITY\"] = 722;\n        values[valuesById[723] = \"REQUEST_METHOD_HAMP_SET_VELOCITY\"] = 723;\n        values[valuesById[724] = \"REQUEST_METHOD_HAMP_GET_STATE\"] = 724;\n        values[valuesById[740] = \"REQUEST_METHOD_HDSP_SET_XAVA\"] = 740;\n        values[valuesById[741] = \"REQUEST_METHOD_HDSP_SET_XPVA\"] = 741;\n        values[valuesById[742] = \"REQUEST_METHOD_HDSP_SET_XPVP\"] = 742;\n        values[valuesById[743] = \"REQUEST_METHOD_HDSP_SET_XAT\"] = 743;\n        values[valuesById[744] = \"REQUEST_METHOD_HDSP_SET_XPT\"] = 744;\n        values[valuesById[745] = \"REQUEST_METHOD_HDSP_SET_XAVP\"] = 745;\n        values[valuesById[780] = \"REQUEST_METHOD_HSTP_GET_TIME\"] = 780;\n        values[valuesById[781] = \"REQUEST_METHOD_HSTP_GET_OFFSET\"] = 781;\n        values[valuesById[782] = \"REQUEST_METHOD_HSTP_SET_OFFSET\"] = 782;\n        values[valuesById[783] = \"REQUEST_METHOD_HSTP_GET_RTD\"] = 783;\n        values[valuesById[784] = \"REQUEST_METHOD_HSTP_SET_SYNC\"] = 784;\n        values[valuesById[800] = \"REQUEST_METHOD_MAINTENANCE_SET_RESTART\"] = 800;\n        values[valuesById[801] = \"REQUEST_METHOD_MAINTENANCE_SET_UPDATE_PERFORM\"] = 801;\n        values[valuesById[802] = \"REQUEST_METHOD_MAINTENANCE_SET_UPDATE_STATUS\"] = 802;\n        values[valuesById[820] = \"REQUEST_METHOD_OTA_GET_LATEST\"] = 820;\n        values[valuesById[840] = \"REQUEST_METHOD_STROKE_GET_STROKE\"] = 840;\n        values[valuesById[841] = \"REQUEST_METHOD_STROKE_SET_STROKE\"] = 841;\n        values[valuesById[842] = \"REQUEST_METHOD_STROKE_GET_STROKE_POSITION_ABSOLUTE\"] = 842;\n        values[valuesById[843] = \"REQUEST_METHOD_STROKE_GET_STROKE_POSITION_RELATIVE\"] = 843;\n        return values;\n    })();\n\n    hdyRpc.Request = (function() {\n\n        /**\n         * Properties of a Request.\n         * @memberof hdyRpc\n         * @interface IRequest\n         * @property {hdyRpc.RequestMethods|null} [method] Request method\n         * @property {hdyRpc.RequestCmdGetServerTime|null} [requestCmdGetServerTime] Request requestCmdGetServerTime\n         * @property {hdyRpc.RequestCmdWsHandshake|null} [requestCmdWsHandshake] Request requestCmdWsHandshake\n         * @property {hdyRpc.RequestCmdGenerateConnectionKey|null} [requestCmdGenerateConnectionKey] Request requestCmdGenerateConnectionKey\n         * @property {hdyRpc.RequestCmdSetConnectionKey|null} [requestCmdSetConnectionKey] Request requestCmdSetConnectionKey\n         * @property {hdyRpc.RequestCmdStrokeGetStroke|null} [requestCmdStrokeGetStroke] Request requestCmdStrokeGetStroke\n         * @property {number|null} [id] Request id\n         */\n\n        /**\n         * Constructs a new Request.\n         * @memberof hdyRpc\n         * @classdesc Represents a Request.\n         * @implements IRequest\n         * @constructor\n         * @param {hdyRpc.IRequest=} [properties] Properties to set\n         */\n        function Request(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Request method.\n         * @member {hdyRpc.RequestMethods} method\n         * @memberof hdyRpc.Request\n         * @instance\n         */\n        Request.prototype.method = 0;\n\n        /**\n         * Request requestCmdGetServerTime.\n         * @member {hdyRpc.RequestCmdGetServerTime|null|undefined} requestCmdGetServerTime\n         * @memberof hdyRpc.Request\n         * @instance\n         */\n        Request.prototype.requestCmdGetServerTime = null;\n\n        /**\n         * Request requestCmdWsHandshake.\n         * @member {hdyRpc.RequestCmdWsHandshake|null|undefined} requestCmdWsHandshake\n         * @memberof hdyRpc.Request\n         * @instance\n         */\n        Request.prototype.requestCmdWsHandshake = null;\n\n        /**\n         * Request requestCmdGenerateConnectionKey.\n         * @member {hdyRpc.RequestCmdGenerateConnectionKey|null|undefined} requestCmdGenerateConnectionKey\n         * @memberof hdyRpc.Request\n         * @instance\n         */\n        Request.prototype.requestCmdGenerateConnectionKey = null;\n\n        /**\n         * Request requestCmdSetConnectionKey.\n         * @member {hdyRpc.RequestCmdSetConnectionKey|null|undefined} requestCmdSetConnectionKey\n         * @memberof hdyRpc.Request\n         * @instance\n         */\n        Request.prototype.requestCmdSetConnectionKey = null;\n\n        /**\n         * Request requestCmdStrokeGetStroke.\n         * @member {hdyRpc.RequestCmdStrokeGetStroke|null|undefined} requestCmdStrokeGetStroke\n         * @memberof hdyRpc.Request\n         * @instance\n         */\n        Request.prototype.requestCmdStrokeGetStroke = null;\n\n        /**\n         * Request id.\n         * @member {number} id\n         * @memberof hdyRpc.Request\n         * @instance\n         */\n        Request.prototype.id = 0;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Request params.\n         * @member {\"requestCmdGetServerTime\"|\"requestCmdWsHandshake\"|\"requestCmdGenerateConnectionKey\"|\"requestCmdSetConnectionKey\"|\"requestCmdStrokeGetStroke\"|undefined} params\n         * @memberof hdyRpc.Request\n         * @instance\n         */\n        Object.defineProperty(Request.prototype, \"params\", {\n            get: $util.oneOfGetter($oneOfFields = [\"requestCmdGetServerTime\", \"requestCmdWsHandshake\", \"requestCmdGenerateConnectionKey\", \"requestCmdSetConnectionKey\", \"requestCmdStrokeGetStroke\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Request instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.Request\n         * @static\n         * @param {hdyRpc.IRequest=} [properties] Properties to set\n         * @returns {hdyRpc.Request} Request instance\n         */\n        Request.create = function create(properties) {\n            return new Request(properties);\n        };\n\n        /**\n         * Encodes the specified Request message. Does not implicitly {@link hdyRpc.Request.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.Request\n         * @static\n         * @param {hdyRpc.Request} message Request message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Request.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.method != null && Object.hasOwnProperty.call(message, \"method\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.method);\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.id);\n            if (message.requestCmdGetServerTime != null && Object.hasOwnProperty.call(message, \"requestCmdGetServerTime\"))\n                $root.hdyRpc.RequestCmdGetServerTime.encode(message.requestCmdGetServerTime, writer.uint32(/* id 300, wireType 2 =*/2402).fork()).ldelim();\n            if (message.requestCmdWsHandshake != null && Object.hasOwnProperty.call(message, \"requestCmdWsHandshake\"))\n                $root.hdyRpc.RequestCmdWsHandshake.encode(message.requestCmdWsHandshake, writer.uint32(/* id 500, wireType 2 =*/4002).fork()).ldelim();\n            if (message.requestCmdGenerateConnectionKey != null && Object.hasOwnProperty.call(message, \"requestCmdGenerateConnectionKey\"))\n                $root.hdyRpc.RequestCmdGenerateConnectionKey.encode(message.requestCmdGenerateConnectionKey, writer.uint32(/* id 501, wireType 2 =*/4010).fork()).ldelim();\n            if (message.requestCmdSetConnectionKey != null && Object.hasOwnProperty.call(message, \"requestCmdSetConnectionKey\"))\n                $root.hdyRpc.RequestCmdSetConnectionKey.encode(message.requestCmdSetConnectionKey, writer.uint32(/* id 502, wireType 2 =*/4018).fork()).ldelim();\n            if (message.requestCmdStrokeGetStroke != null && Object.hasOwnProperty.call(message, \"requestCmdStrokeGetStroke\"))\n                $root.hdyRpc.RequestCmdStrokeGetStroke.encode(message.requestCmdStrokeGetStroke, writer.uint32(/* id 840, wireType 2 =*/6722).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Request message, length delimited. Does not implicitly {@link hdyRpc.Request.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.Request\n         * @static\n         * @param {hdyRpc.Request} message Request message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Request.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Request message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.Request\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.Request} Request\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Request.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.Request();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.method = reader.int32();\n                    break;\n                case 300:\n                    message.requestCmdGetServerTime = $root.hdyRpc.RequestCmdGetServerTime.decode(reader, reader.uint32());\n                    break;\n                case 500:\n                    message.requestCmdWsHandshake = $root.hdyRpc.RequestCmdWsHandshake.decode(reader, reader.uint32());\n                    break;\n                case 501:\n                    message.requestCmdGenerateConnectionKey = $root.hdyRpc.RequestCmdGenerateConnectionKey.decode(reader, reader.uint32());\n                    break;\n                case 502:\n                    message.requestCmdSetConnectionKey = $root.hdyRpc.RequestCmdSetConnectionKey.decode(reader, reader.uint32());\n                    break;\n                case 840:\n                    message.requestCmdStrokeGetStroke = $root.hdyRpc.RequestCmdStrokeGetStroke.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.id = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Request message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.Request\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.Request} Request\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Request.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Request message.\n         * @function verify\n         * @memberof hdyRpc.Request\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Request.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.method != null && message.hasOwnProperty(\"method\"))\n                switch (message.method) {\n                default:\n                    return \"method: enum value expected\";\n                case 0:\n                case 300:\n                case 500:\n                case 501:\n                case 502:\n                case 700:\n                case 701:\n                case 702:\n                case 703:\n                case 704:\n                case 705:\n                case 720:\n                case 721:\n                case 722:\n                case 723:\n                case 724:\n                case 740:\n                case 741:\n                case 742:\n                case 743:\n                case 744:\n                case 745:\n                case 780:\n                case 781:\n                case 782:\n                case 783:\n                case 784:\n                case 800:\n                case 801:\n                case 802:\n                case 820:\n                case 840:\n                case 841:\n                case 842:\n                case 843:\n                    break;\n                }\n            if (message.requestCmdGetServerTime != null && message.hasOwnProperty(\"requestCmdGetServerTime\")) {\n                properties.params = 1;\n                {\n                    let error = $root.hdyRpc.RequestCmdGetServerTime.verify(message.requestCmdGetServerTime);\n                    if (error)\n                        return \"requestCmdGetServerTime.\" + error;\n                }\n            }\n            if (message.requestCmdWsHandshake != null && message.hasOwnProperty(\"requestCmdWsHandshake\")) {\n                if (properties.params === 1)\n                    return \"params: multiple values\";\n                properties.params = 1;\n                {\n                    let error = $root.hdyRpc.RequestCmdWsHandshake.verify(message.requestCmdWsHandshake);\n                    if (error)\n                        return \"requestCmdWsHandshake.\" + error;\n                }\n            }\n            if (message.requestCmdGenerateConnectionKey != null && message.hasOwnProperty(\"requestCmdGenerateConnectionKey\")) {\n                if (properties.params === 1)\n                    return \"params: multiple values\";\n                properties.params = 1;\n                {\n                    let error = $root.hdyRpc.RequestCmdGenerateConnectionKey.verify(message.requestCmdGenerateConnectionKey);\n                    if (error)\n                        return \"requestCmdGenerateConnectionKey.\" + error;\n                }\n            }\n            if (message.requestCmdSetConnectionKey != null && message.hasOwnProperty(\"requestCmdSetConnectionKey\")) {\n                if (properties.params === 1)\n                    return \"params: multiple values\";\n                properties.params = 1;\n                {\n                    let error = $root.hdyRpc.RequestCmdSetConnectionKey.verify(message.requestCmdSetConnectionKey);\n                    if (error)\n                        return \"requestCmdSetConnectionKey.\" + error;\n                }\n            }\n            if (message.requestCmdStrokeGetStroke != null && message.hasOwnProperty(\"requestCmdStrokeGetStroke\")) {\n                if (properties.params === 1)\n                    return \"params: multiple values\";\n                properties.params = 1;\n                {\n                    let error = $root.hdyRpc.RequestCmdStrokeGetStroke.verify(message.requestCmdStrokeGetStroke);\n                    if (error)\n                        return \"requestCmdStrokeGetStroke.\" + error;\n                }\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isInteger(message.id))\n                    return \"id: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Request message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.Request\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.Request} Request\n         */\n        Request.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.Request)\n                return object;\n            let message = new $root.hdyRpc.Request();\n            switch (object.method) {\n            case \"REQUEST_METHOD_UNKNOWN\":\n            case 0:\n                message.method = 0;\n                break;\n            case \"REQUEST_METHOD_GET_SERVER_TIME\":\n            case 300:\n                message.method = 300;\n                break;\n            case \"REQUEST_METHOD_WS_HANDSHAKE\":\n            case 500:\n                message.method = 500;\n                break;\n            case \"REQUEST_METHOD_GENERATE_CONNECTION_KEY\":\n            case 501:\n                message.method = 501;\n                break;\n            case \"REQUEST_METHOD_SET_CONNECTION_KEY\":\n            case 502:\n                message.method = 502;\n                break;\n            case \"REQUEST_METHOD_GET_MODE\":\n            case 700:\n                message.method = 700;\n                break;\n            case \"REQUEST_METHOD_SET_MODE\":\n            case 701:\n                message.method = 701;\n                break;\n            case \"REQUEST_METHOD_GET_CONNECTED\":\n            case 702:\n                message.method = 702;\n                break;\n            case \"REQUEST_METHOD_GET_INFO\":\n            case 703:\n                message.method = 703;\n                break;\n            case \"REQUEST_METHOD_GET_SETTINGS\":\n            case 704:\n                message.method = 704;\n                break;\n            case \"REQUEST_METHOD_GET_STATUS\":\n            case 705:\n                message.method = 705;\n                break;\n            case \"REQUEST_METHOD_HAMP_SET_START\":\n            case 720:\n                message.method = 720;\n                break;\n            case \"REQUEST_METHOD_HAMP_SET_STOP\":\n            case 721:\n                message.method = 721;\n                break;\n            case \"REQUEST_METHOD_HAMP_GET_VELOCITY\":\n            case 722:\n                message.method = 722;\n                break;\n            case \"REQUEST_METHOD_HAMP_SET_VELOCITY\":\n            case 723:\n                message.method = 723;\n                break;\n            case \"REQUEST_METHOD_HAMP_GET_STATE\":\n            case 724:\n                message.method = 724;\n                break;\n            case \"REQUEST_METHOD_HDSP_SET_XAVA\":\n            case 740:\n                message.method = 740;\n                break;\n            case \"REQUEST_METHOD_HDSP_SET_XPVA\":\n            case 741:\n                message.method = 741;\n                break;\n            case \"REQUEST_METHOD_HDSP_SET_XPVP\":\n            case 742:\n                message.method = 742;\n                break;\n            case \"REQUEST_METHOD_HDSP_SET_XAT\":\n            case 743:\n                message.method = 743;\n                break;\n            case \"REQUEST_METHOD_HDSP_SET_XPT\":\n            case 744:\n                message.method = 744;\n                break;\n            case \"REQUEST_METHOD_HDSP_SET_XAVP\":\n            case 745:\n                message.method = 745;\n                break;\n            case \"REQUEST_METHOD_HSTP_GET_TIME\":\n            case 780:\n                message.method = 780;\n                break;\n            case \"REQUEST_METHOD_HSTP_GET_OFFSET\":\n            case 781:\n                message.method = 781;\n                break;\n            case \"REQUEST_METHOD_HSTP_SET_OFFSET\":\n            case 782:\n                message.method = 782;\n                break;\n            case \"REQUEST_METHOD_HSTP_GET_RTD\":\n            case 783:\n                message.method = 783;\n                break;\n            case \"REQUEST_METHOD_HSTP_SET_SYNC\":\n            case 784:\n                message.method = 784;\n                break;\n            case \"REQUEST_METHOD_MAINTENANCE_SET_RESTART\":\n            case 800:\n                message.method = 800;\n                break;\n            case \"REQUEST_METHOD_MAINTENANCE_SET_UPDATE_PERFORM\":\n            case 801:\n                message.method = 801;\n                break;\n            case \"REQUEST_METHOD_MAINTENANCE_SET_UPDATE_STATUS\":\n            case 802:\n                message.method = 802;\n                break;\n            case \"REQUEST_METHOD_OTA_GET_LATEST\":\n            case 820:\n                message.method = 820;\n                break;\n            case \"REQUEST_METHOD_STROKE_GET_STROKE\":\n            case 840:\n                message.method = 840;\n                break;\n            case \"REQUEST_METHOD_STROKE_SET_STROKE\":\n            case 841:\n                message.method = 841;\n                break;\n            case \"REQUEST_METHOD_STROKE_GET_STROKE_POSITION_ABSOLUTE\":\n            case 842:\n                message.method = 842;\n                break;\n            case \"REQUEST_METHOD_STROKE_GET_STROKE_POSITION_RELATIVE\":\n            case 843:\n                message.method = 843;\n                break;\n            }\n            if (object.requestCmdGetServerTime != null) {\n                if (typeof object.requestCmdGetServerTime !== \"object\")\n                    throw TypeError(\".hdyRpc.Request.requestCmdGetServerTime: object expected\");\n                message.requestCmdGetServerTime = $root.hdyRpc.RequestCmdGetServerTime.fromObject(object.requestCmdGetServerTime);\n            }\n            if (object.requestCmdWsHandshake != null) {\n                if (typeof object.requestCmdWsHandshake !== \"object\")\n                    throw TypeError(\".hdyRpc.Request.requestCmdWsHandshake: object expected\");\n                message.requestCmdWsHandshake = $root.hdyRpc.RequestCmdWsHandshake.fromObject(object.requestCmdWsHandshake);\n            }\n            if (object.requestCmdGenerateConnectionKey != null) {\n                if (typeof object.requestCmdGenerateConnectionKey !== \"object\")\n                    throw TypeError(\".hdyRpc.Request.requestCmdGenerateConnectionKey: object expected\");\n                message.requestCmdGenerateConnectionKey = $root.hdyRpc.RequestCmdGenerateConnectionKey.fromObject(object.requestCmdGenerateConnectionKey);\n            }\n            if (object.requestCmdSetConnectionKey != null) {\n                if (typeof object.requestCmdSetConnectionKey !== \"object\")\n                    throw TypeError(\".hdyRpc.Request.requestCmdSetConnectionKey: object expected\");\n                message.requestCmdSetConnectionKey = $root.hdyRpc.RequestCmdSetConnectionKey.fromObject(object.requestCmdSetConnectionKey);\n            }\n            if (object.requestCmdStrokeGetStroke != null) {\n                if (typeof object.requestCmdStrokeGetStroke !== \"object\")\n                    throw TypeError(\".hdyRpc.Request.requestCmdStrokeGetStroke: object expected\");\n                message.requestCmdStrokeGetStroke = $root.hdyRpc.RequestCmdStrokeGetStroke.fromObject(object.requestCmdStrokeGetStroke);\n            }\n            if (object.id != null)\n                message.id = object.id >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Request message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.Request\n         * @static\n         * @param {hdyRpc.Request} message Request\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Request.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.method = options.enums === String ? \"REQUEST_METHOD_UNKNOWN\" : 0;\n                object.id = 0;\n            }\n            if (message.method != null && message.hasOwnProperty(\"method\"))\n                object.method = options.enums === String ? $root.hdyRpc.RequestMethods[message.method] : message.method;\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.requestCmdGetServerTime != null && message.hasOwnProperty(\"requestCmdGetServerTime\")) {\n                object.requestCmdGetServerTime = $root.hdyRpc.RequestCmdGetServerTime.toObject(message.requestCmdGetServerTime, options);\n                if (options.oneofs)\n                    object.params = \"requestCmdGetServerTime\";\n            }\n            if (message.requestCmdWsHandshake != null && message.hasOwnProperty(\"requestCmdWsHandshake\")) {\n                object.requestCmdWsHandshake = $root.hdyRpc.RequestCmdWsHandshake.toObject(message.requestCmdWsHandshake, options);\n                if (options.oneofs)\n                    object.params = \"requestCmdWsHandshake\";\n            }\n            if (message.requestCmdGenerateConnectionKey != null && message.hasOwnProperty(\"requestCmdGenerateConnectionKey\")) {\n                object.requestCmdGenerateConnectionKey = $root.hdyRpc.RequestCmdGenerateConnectionKey.toObject(message.requestCmdGenerateConnectionKey, options);\n                if (options.oneofs)\n                    object.params = \"requestCmdGenerateConnectionKey\";\n            }\n            if (message.requestCmdSetConnectionKey != null && message.hasOwnProperty(\"requestCmdSetConnectionKey\")) {\n                object.requestCmdSetConnectionKey = $root.hdyRpc.RequestCmdSetConnectionKey.toObject(message.requestCmdSetConnectionKey, options);\n                if (options.oneofs)\n                    object.params = \"requestCmdSetConnectionKey\";\n            }\n            if (message.requestCmdStrokeGetStroke != null && message.hasOwnProperty(\"requestCmdStrokeGetStroke\")) {\n                object.requestCmdStrokeGetStroke = $root.hdyRpc.RequestCmdStrokeGetStroke.toObject(message.requestCmdStrokeGetStroke, options);\n                if (options.oneofs)\n                    object.params = \"requestCmdStrokeGetStroke\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Request to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.Request\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Request.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return Request;\n    })();\n\n    hdyRpc.Error = (function() {\n\n        /**\n         * Properties of an Error.\n         * @memberof hdyRpc\n         * @interface IError\n         * @property {number|null} [code] Error code\n         * @property {string|null} [message] Error message\n         * @property {string|null} [data] Error data\n         */\n\n        /**\n         * Constructs a new Error.\n         * @memberof hdyRpc\n         * @classdesc Represents an Error.\n         * @implements IError\n         * @constructor\n         * @param {hdyRpc.IError=} [properties] Properties to set\n         */\n        function Error(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Error code.\n         * @member {number} code\n         * @memberof hdyRpc.Error\n         * @instance\n         */\n        Error.prototype.code = 0;\n\n        /**\n         * Error message.\n         * @member {string} message\n         * @memberof hdyRpc.Error\n         * @instance\n         */\n        Error.prototype.message = \"\";\n\n        /**\n         * Error data.\n         * @member {string} data\n         * @memberof hdyRpc.Error\n         * @instance\n         */\n        Error.prototype.data = \"\";\n\n        /**\n         * Creates a new Error instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.Error\n         * @static\n         * @param {hdyRpc.IError=} [properties] Properties to set\n         * @returns {hdyRpc.Error} Error instance\n         */\n        Error.create = function create(properties) {\n            return new Error(properties);\n        };\n\n        /**\n         * Encodes the specified Error message. Does not implicitly {@link hdyRpc.Error.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.Error\n         * @static\n         * @param {hdyRpc.Error} message Error message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Error.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.code != null && Object.hasOwnProperty.call(message, \"code\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);\n            if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);\n            if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.data);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Error message, length delimited. Does not implicitly {@link hdyRpc.Error.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.Error\n         * @static\n         * @param {hdyRpc.Error} message Error message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Error.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Error message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.Error\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.Error} Error\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Error.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.Error();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.code = reader.uint32();\n                    break;\n                case 2:\n                    message.message = reader.string();\n                    break;\n                case 3:\n                    message.data = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Error message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.Error\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.Error} Error\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Error.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Error message.\n         * @function verify\n         * @memberof hdyRpc.Error\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Error.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.code != null && message.hasOwnProperty(\"code\"))\n                if (!$util.isInteger(message.code))\n                    return \"code: integer expected\";\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                if (!$util.isString(message.message))\n                    return \"message: string expected\";\n            if (message.data != null && message.hasOwnProperty(\"data\"))\n                if (!$util.isString(message.data))\n                    return \"data: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates an Error message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.Error\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.Error} Error\n         */\n        Error.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.Error)\n                return object;\n            let message = new $root.hdyRpc.Error();\n            if (object.code != null)\n                message.code = object.code >>> 0;\n            if (object.message != null)\n                message.message = String(object.message);\n            if (object.data != null)\n                message.data = String(object.data);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Error message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.Error\n         * @static\n         * @param {hdyRpc.Error} message Error\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Error.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.code = 0;\n                object.message = \"\";\n                object.data = \"\";\n            }\n            if (message.code != null && message.hasOwnProperty(\"code\"))\n                object.code = message.code;\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                object.message = message.message;\n            if (message.data != null && message.hasOwnProperty(\"data\"))\n                object.data = message.data;\n            return object;\n        };\n\n        /**\n         * Converts this Error to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.Error\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Error.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return Error;\n    })();\n\n    hdyRpc.Response = (function() {\n\n        /**\n         * Properties of a Response.\n         * @memberof hdyRpc\n         * @interface IResponse\n         * @property {number|null} [id] Response id\n         * @property {hdyRpc.ResponseCmdGetServerTime|null} [responseCmdGetServerTime] Response responseCmdGetServerTime\n         * @property {hdyRpc.ResponseCmdWsHandshake|null} [responseCmdWsHandshake] Response responseCmdWsHandshake\n         * @property {hdyRpc.ResponseCmdGenerateConnectionKey|null} [responseCmdGenerateConnectionKey] Response responseCmdGenerateConnectionKey\n         * @property {hdyRpc.ResponseCmdSetConnectionKey|null} [responseCmdSetConnectionKey] Response responseCmdSetConnectionKey\n         * @property {hdyRpc.ResponseCmdStrokeGetStroke|null} [responseCmdStrokeGetStroke] Response responseCmdStrokeGetStroke\n         * @property {hdyRpc.Error|null} [error] Response error\n         */\n\n        /**\n         * Constructs a new Response.\n         * @memberof hdyRpc\n         * @classdesc Represents a Response.\n         * @implements IResponse\n         * @constructor\n         * @param {hdyRpc.IResponse=} [properties] Properties to set\n         */\n        function Response(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Response id.\n         * @member {number} id\n         * @memberof hdyRpc.Response\n         * @instance\n         */\n        Response.prototype.id = 0;\n\n        /**\n         * Response responseCmdGetServerTime.\n         * @member {hdyRpc.ResponseCmdGetServerTime|null|undefined} responseCmdGetServerTime\n         * @memberof hdyRpc.Response\n         * @instance\n         */\n        Response.prototype.responseCmdGetServerTime = null;\n\n        /**\n         * Response responseCmdWsHandshake.\n         * @member {hdyRpc.ResponseCmdWsHandshake|null|undefined} responseCmdWsHandshake\n         * @memberof hdyRpc.Response\n         * @instance\n         */\n        Response.prototype.responseCmdWsHandshake = null;\n\n        /**\n         * Response responseCmdGenerateConnectionKey.\n         * @member {hdyRpc.ResponseCmdGenerateConnectionKey|null|undefined} responseCmdGenerateConnectionKey\n         * @memberof hdyRpc.Response\n         * @instance\n         */\n        Response.prototype.responseCmdGenerateConnectionKey = null;\n\n        /**\n         * Response responseCmdSetConnectionKey.\n         * @member {hdyRpc.ResponseCmdSetConnectionKey|null|undefined} responseCmdSetConnectionKey\n         * @memberof hdyRpc.Response\n         * @instance\n         */\n        Response.prototype.responseCmdSetConnectionKey = null;\n\n        /**\n         * Response responseCmdStrokeGetStroke.\n         * @member {hdyRpc.ResponseCmdStrokeGetStroke|null|undefined} responseCmdStrokeGetStroke\n         * @memberof hdyRpc.Response\n         * @instance\n         */\n        Response.prototype.responseCmdStrokeGetStroke = null;\n\n        /**\n         * Response error.\n         * @member {hdyRpc.Error|null|undefined} error\n         * @memberof hdyRpc.Response\n         * @instance\n         */\n        Response.prototype.error = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Response result.\n         * @member {\"responseCmdGetServerTime\"|\"responseCmdWsHandshake\"|\"responseCmdGenerateConnectionKey\"|\"responseCmdSetConnectionKey\"|\"responseCmdStrokeGetStroke\"|undefined} result\n         * @memberof hdyRpc.Response\n         * @instance\n         */\n        Object.defineProperty(Response.prototype, \"result\", {\n            get: $util.oneOfGetter($oneOfFields = [\"responseCmdGetServerTime\", \"responseCmdWsHandshake\", \"responseCmdGenerateConnectionKey\", \"responseCmdSetConnectionKey\", \"responseCmdStrokeGetStroke\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Response instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.Response\n         * @static\n         * @param {hdyRpc.IResponse=} [properties] Properties to set\n         * @returns {hdyRpc.Response} Response instance\n         */\n        Response.create = function create(properties) {\n            return new Response(properties);\n        };\n\n        /**\n         * Encodes the specified Response message. Does not implicitly {@link hdyRpc.Response.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.Response\n         * @static\n         * @param {hdyRpc.Response} message Response message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Response.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);\n            if (message.error != null && Object.hasOwnProperty.call(message, \"error\"))\n                $root.hdyRpc.Error.encode(message.error, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.responseCmdGetServerTime != null && Object.hasOwnProperty.call(message, \"responseCmdGetServerTime\"))\n                $root.hdyRpc.ResponseCmdGetServerTime.encode(message.responseCmdGetServerTime, writer.uint32(/* id 300, wireType 2 =*/2402).fork()).ldelim();\n            if (message.responseCmdWsHandshake != null && Object.hasOwnProperty.call(message, \"responseCmdWsHandshake\"))\n                $root.hdyRpc.ResponseCmdWsHandshake.encode(message.responseCmdWsHandshake, writer.uint32(/* id 500, wireType 2 =*/4002).fork()).ldelim();\n            if (message.responseCmdGenerateConnectionKey != null && Object.hasOwnProperty.call(message, \"responseCmdGenerateConnectionKey\"))\n                $root.hdyRpc.ResponseCmdGenerateConnectionKey.encode(message.responseCmdGenerateConnectionKey, writer.uint32(/* id 501, wireType 2 =*/4010).fork()).ldelim();\n            if (message.responseCmdSetConnectionKey != null && Object.hasOwnProperty.call(message, \"responseCmdSetConnectionKey\"))\n                $root.hdyRpc.ResponseCmdSetConnectionKey.encode(message.responseCmdSetConnectionKey, writer.uint32(/* id 502, wireType 2 =*/4018).fork()).ldelim();\n            if (message.responseCmdStrokeGetStroke != null && Object.hasOwnProperty.call(message, \"responseCmdStrokeGetStroke\"))\n                $root.hdyRpc.ResponseCmdStrokeGetStroke.encode(message.responseCmdStrokeGetStroke, writer.uint32(/* id 840, wireType 2 =*/6722).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Response message, length delimited. Does not implicitly {@link hdyRpc.Response.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.Response\n         * @static\n         * @param {hdyRpc.Response} message Response message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Response.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Response message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.Response\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.Response} Response\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Response.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.Response();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.uint32();\n                    break;\n                case 300:\n                    message.responseCmdGetServerTime = $root.hdyRpc.ResponseCmdGetServerTime.decode(reader, reader.uint32());\n                    break;\n                case 500:\n                    message.responseCmdWsHandshake = $root.hdyRpc.ResponseCmdWsHandshake.decode(reader, reader.uint32());\n                    break;\n                case 501:\n                    message.responseCmdGenerateConnectionKey = $root.hdyRpc.ResponseCmdGenerateConnectionKey.decode(reader, reader.uint32());\n                    break;\n                case 502:\n                    message.responseCmdSetConnectionKey = $root.hdyRpc.ResponseCmdSetConnectionKey.decode(reader, reader.uint32());\n                    break;\n                case 840:\n                    message.responseCmdStrokeGetStroke = $root.hdyRpc.ResponseCmdStrokeGetStroke.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.error = $root.hdyRpc.Error.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Response message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.Response\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.Response} Response\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Response.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Response message.\n         * @function verify\n         * @memberof hdyRpc.Response\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Response.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isInteger(message.id))\n                    return \"id: integer expected\";\n            if (message.responseCmdGetServerTime != null && message.hasOwnProperty(\"responseCmdGetServerTime\")) {\n                properties.result = 1;\n                {\n                    let error = $root.hdyRpc.ResponseCmdGetServerTime.verify(message.responseCmdGetServerTime);\n                    if (error)\n                        return \"responseCmdGetServerTime.\" + error;\n                }\n            }\n            if (message.responseCmdWsHandshake != null && message.hasOwnProperty(\"responseCmdWsHandshake\")) {\n                if (properties.result === 1)\n                    return \"result: multiple values\";\n                properties.result = 1;\n                {\n                    let error = $root.hdyRpc.ResponseCmdWsHandshake.verify(message.responseCmdWsHandshake);\n                    if (error)\n                        return \"responseCmdWsHandshake.\" + error;\n                }\n            }\n            if (message.responseCmdGenerateConnectionKey != null && message.hasOwnProperty(\"responseCmdGenerateConnectionKey\")) {\n                if (properties.result === 1)\n                    return \"result: multiple values\";\n                properties.result = 1;\n                {\n                    let error = $root.hdyRpc.ResponseCmdGenerateConnectionKey.verify(message.responseCmdGenerateConnectionKey);\n                    if (error)\n                        return \"responseCmdGenerateConnectionKey.\" + error;\n                }\n            }\n            if (message.responseCmdSetConnectionKey != null && message.hasOwnProperty(\"responseCmdSetConnectionKey\")) {\n                if (properties.result === 1)\n                    return \"result: multiple values\";\n                properties.result = 1;\n                {\n                    let error = $root.hdyRpc.ResponseCmdSetConnectionKey.verify(message.responseCmdSetConnectionKey);\n                    if (error)\n                        return \"responseCmdSetConnectionKey.\" + error;\n                }\n            }\n            if (message.responseCmdStrokeGetStroke != null && message.hasOwnProperty(\"responseCmdStrokeGetStroke\")) {\n                if (properties.result === 1)\n                    return \"result: multiple values\";\n                properties.result = 1;\n                {\n                    let error = $root.hdyRpc.ResponseCmdStrokeGetStroke.verify(message.responseCmdStrokeGetStroke);\n                    if (error)\n                        return \"responseCmdStrokeGetStroke.\" + error;\n                }\n            }\n            if (message.error != null && message.hasOwnProperty(\"error\")) {\n                let error = $root.hdyRpc.Error.verify(message.error);\n                if (error)\n                    return \"error.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Response message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.Response\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.Response} Response\n         */\n        Response.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.Response)\n                return object;\n            let message = new $root.hdyRpc.Response();\n            if (object.id != null)\n                message.id = object.id >>> 0;\n            if (object.responseCmdGetServerTime != null) {\n                if (typeof object.responseCmdGetServerTime !== \"object\")\n                    throw TypeError(\".hdyRpc.Response.responseCmdGetServerTime: object expected\");\n                message.responseCmdGetServerTime = $root.hdyRpc.ResponseCmdGetServerTime.fromObject(object.responseCmdGetServerTime);\n            }\n            if (object.responseCmdWsHandshake != null) {\n                if (typeof object.responseCmdWsHandshake !== \"object\")\n                    throw TypeError(\".hdyRpc.Response.responseCmdWsHandshake: object expected\");\n                message.responseCmdWsHandshake = $root.hdyRpc.ResponseCmdWsHandshake.fromObject(object.responseCmdWsHandshake);\n            }\n            if (object.responseCmdGenerateConnectionKey != null) {\n                if (typeof object.responseCmdGenerateConnectionKey !== \"object\")\n                    throw TypeError(\".hdyRpc.Response.responseCmdGenerateConnectionKey: object expected\");\n                message.responseCmdGenerateConnectionKey = $root.hdyRpc.ResponseCmdGenerateConnectionKey.fromObject(object.responseCmdGenerateConnectionKey);\n            }\n            if (object.responseCmdSetConnectionKey != null) {\n                if (typeof object.responseCmdSetConnectionKey !== \"object\")\n                    throw TypeError(\".hdyRpc.Response.responseCmdSetConnectionKey: object expected\");\n                message.responseCmdSetConnectionKey = $root.hdyRpc.ResponseCmdSetConnectionKey.fromObject(object.responseCmdSetConnectionKey);\n            }\n            if (object.responseCmdStrokeGetStroke != null) {\n                if (typeof object.responseCmdStrokeGetStroke !== \"object\")\n                    throw TypeError(\".hdyRpc.Response.responseCmdStrokeGetStroke: object expected\");\n                message.responseCmdStrokeGetStroke = $root.hdyRpc.ResponseCmdStrokeGetStroke.fromObject(object.responseCmdStrokeGetStroke);\n            }\n            if (object.error != null) {\n                if (typeof object.error !== \"object\")\n                    throw TypeError(\".hdyRpc.Response.error: object expected\");\n                message.error = $root.hdyRpc.Error.fromObject(object.error);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Response message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.Response\n         * @static\n         * @param {hdyRpc.Response} message Response\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Response.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.id = 0;\n                object.error = null;\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.error != null && message.hasOwnProperty(\"error\"))\n                object.error = $root.hdyRpc.Error.toObject(message.error, options);\n            if (message.responseCmdGetServerTime != null && message.hasOwnProperty(\"responseCmdGetServerTime\")) {\n                object.responseCmdGetServerTime = $root.hdyRpc.ResponseCmdGetServerTime.toObject(message.responseCmdGetServerTime, options);\n                if (options.oneofs)\n                    object.result = \"responseCmdGetServerTime\";\n            }\n            if (message.responseCmdWsHandshake != null && message.hasOwnProperty(\"responseCmdWsHandshake\")) {\n                object.responseCmdWsHandshake = $root.hdyRpc.ResponseCmdWsHandshake.toObject(message.responseCmdWsHandshake, options);\n                if (options.oneofs)\n                    object.result = \"responseCmdWsHandshake\";\n            }\n            if (message.responseCmdGenerateConnectionKey != null && message.hasOwnProperty(\"responseCmdGenerateConnectionKey\")) {\n                object.responseCmdGenerateConnectionKey = $root.hdyRpc.ResponseCmdGenerateConnectionKey.toObject(message.responseCmdGenerateConnectionKey, options);\n                if (options.oneofs)\n                    object.result = \"responseCmdGenerateConnectionKey\";\n            }\n            if (message.responseCmdSetConnectionKey != null && message.hasOwnProperty(\"responseCmdSetConnectionKey\")) {\n                object.responseCmdSetConnectionKey = $root.hdyRpc.ResponseCmdSetConnectionKey.toObject(message.responseCmdSetConnectionKey, options);\n                if (options.oneofs)\n                    object.result = \"responseCmdSetConnectionKey\";\n            }\n            if (message.responseCmdStrokeGetStroke != null && message.hasOwnProperty(\"responseCmdStrokeGetStroke\")) {\n                object.responseCmdStrokeGetStroke = $root.hdyRpc.ResponseCmdStrokeGetStroke.toObject(message.responseCmdStrokeGetStroke, options);\n                if (options.oneofs)\n                    object.result = \"responseCmdStrokeGetStroke\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Response to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.Response\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Response.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return Response;\n    })();\n\n    /**\n     * MessageType enum.\n     * @name hdyRpc.MessageType\n     * @enum {number}\n     * @property {number} MESSAGE_TYPE_UNKNOWN=0 MESSAGE_TYPE_UNKNOWN value\n     * @property {number} MESSAGE_TYPE_REQUEST=1 MESSAGE_TYPE_REQUEST value\n     * @property {number} MESSAGE_TYPE_RESPONSE=2 MESSAGE_TYPE_RESPONSE value\n     */\n    hdyRpc.MessageType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"MESSAGE_TYPE_UNKNOWN\"] = 0;\n        values[valuesById[1] = \"MESSAGE_TYPE_REQUEST\"] = 1;\n        values[valuesById[2] = \"MESSAGE_TYPE_RESPONSE\"] = 2;\n        return values;\n    })();\n\n    hdyRpc.RpcMessage = (function() {\n\n        /**\n         * Properties of a RpcMessage.\n         * @memberof hdyRpc\n         * @interface IRpcMessage\n         * @property {hdyRpc.MessageType|null} [type] RpcMessage type\n         * @property {hdyRpc.Request|null} [request] RpcMessage request\n         * @property {hdyRpc.Response|null} [response] RpcMessage response\n         */\n\n        /**\n         * Constructs a new RpcMessage.\n         * @memberof hdyRpc\n         * @classdesc Represents a RpcMessage.\n         * @implements IRpcMessage\n         * @constructor\n         * @param {hdyRpc.IRpcMessage=} [properties] Properties to set\n         */\n        function RpcMessage(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RpcMessage type.\n         * @member {hdyRpc.MessageType} type\n         * @memberof hdyRpc.RpcMessage\n         * @instance\n         */\n        RpcMessage.prototype.type = 0;\n\n        /**\n         * RpcMessage request.\n         * @member {hdyRpc.Request|null|undefined} request\n         * @memberof hdyRpc.RpcMessage\n         * @instance\n         */\n        RpcMessage.prototype.request = null;\n\n        /**\n         * RpcMessage response.\n         * @member {hdyRpc.Response|null|undefined} response\n         * @memberof hdyRpc.RpcMessage\n         * @instance\n         */\n        RpcMessage.prototype.response = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * RpcMessage message.\n         * @member {\"request\"|\"response\"|undefined} message\n         * @memberof hdyRpc.RpcMessage\n         * @instance\n         */\n        Object.defineProperty(RpcMessage.prototype, \"message\", {\n            get: $util.oneOfGetter($oneOfFields = [\"request\", \"response\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new RpcMessage instance using the specified properties.\n         * @function create\n         * @memberof hdyRpc.RpcMessage\n         * @static\n         * @param {hdyRpc.IRpcMessage=} [properties] Properties to set\n         * @returns {hdyRpc.RpcMessage} RpcMessage instance\n         */\n        RpcMessage.create = function create(properties) {\n            return new RpcMessage(properties);\n        };\n\n        /**\n         * Encodes the specified RpcMessage message. Does not implicitly {@link hdyRpc.RpcMessage.verify|verify} messages.\n         * @function encode\n         * @memberof hdyRpc.RpcMessage\n         * @static\n         * @param {hdyRpc.RpcMessage} message RpcMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RpcMessage.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);\n            if (message.request != null && Object.hasOwnProperty.call(message, \"request\"))\n                $root.hdyRpc.Request.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.response != null && Object.hasOwnProperty.call(message, \"response\"))\n                $root.hdyRpc.Response.encode(message.response, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RpcMessage message, length delimited. Does not implicitly {@link hdyRpc.RpcMessage.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof hdyRpc.RpcMessage\n         * @static\n         * @param {hdyRpc.RpcMessage} message RpcMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RpcMessage.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RpcMessage message from the specified reader or buffer.\n         * @function decode\n         * @memberof hdyRpc.RpcMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {hdyRpc.RpcMessage} RpcMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RpcMessage.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.hdyRpc.RpcMessage();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.request = $root.hdyRpc.Request.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.response = $root.hdyRpc.Response.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RpcMessage message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof hdyRpc.RpcMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {hdyRpc.RpcMessage} RpcMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RpcMessage.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RpcMessage message.\n         * @function verify\n         * @memberof hdyRpc.RpcMessage\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RpcMessage.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                    break;\n                }\n            if (message.request != null && message.hasOwnProperty(\"request\")) {\n                properties.message = 1;\n                {\n                    let error = $root.hdyRpc.Request.verify(message.request);\n                    if (error)\n                        return \"request.\" + error;\n                }\n            }\n            if (message.response != null && message.hasOwnProperty(\"response\")) {\n                if (properties.message === 1)\n                    return \"message: multiple values\";\n                properties.message = 1;\n                {\n                    let error = $root.hdyRpc.Response.verify(message.response);\n                    if (error)\n                        return \"response.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a RpcMessage message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof hdyRpc.RpcMessage\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {hdyRpc.RpcMessage} RpcMessage\n         */\n        RpcMessage.fromObject = function fromObject(object) {\n            if (object instanceof $root.hdyRpc.RpcMessage)\n                return object;\n            let message = new $root.hdyRpc.RpcMessage();\n            switch (object.type) {\n            case \"MESSAGE_TYPE_UNKNOWN\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"MESSAGE_TYPE_REQUEST\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"MESSAGE_TYPE_RESPONSE\":\n            case 2:\n                message.type = 2;\n                break;\n            }\n            if (object.request != null) {\n                if (typeof object.request !== \"object\")\n                    throw TypeError(\".hdyRpc.RpcMessage.request: object expected\");\n                message.request = $root.hdyRpc.Request.fromObject(object.request);\n            }\n            if (object.response != null) {\n                if (typeof object.response !== \"object\")\n                    throw TypeError(\".hdyRpc.RpcMessage.response: object expected\");\n                message.response = $root.hdyRpc.Response.fromObject(object.response);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RpcMessage message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof hdyRpc.RpcMessage\n         * @static\n         * @param {hdyRpc.RpcMessage} message RpcMessage\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RpcMessage.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.type = options.enums === String ? \"MESSAGE_TYPE_UNKNOWN\" : 0;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.hdyRpc.MessageType[message.type] : message.type;\n            if (message.request != null && message.hasOwnProperty(\"request\")) {\n                object.request = $root.hdyRpc.Request.toObject(message.request, options);\n                if (options.oneofs)\n                    object.message = \"request\";\n            }\n            if (message.response != null && message.hasOwnProperty(\"response\")) {\n                object.response = $root.hdyRpc.Response.toObject(message.response, options);\n                if (options.oneofs)\n                    object.message = \"response\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this RpcMessage to JSON.\n         * @function toJSON\n         * @memberof hdyRpc.RpcMessage\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RpcMessage.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RpcMessage;\n    })();\n\n    return hdyRpc;\n})();\n\nconst handyplug = $root.handyplug = (() => {\n\n    /**\n     * Namespace handyplug.\n     * @exports handyplug\n     * @namespace\n     */\n    const handyplug = {};\n\n    handyplug.Ok = (function() {\n\n        /**\n         * Properties of an Ok.\n         * @memberof handyplug\n         * @interface IOk\n         * @property {number|null} [Id] Ok Id\n         */\n\n        /**\n         * Constructs a new Ok.\n         * @memberof handyplug\n         * @classdesc Represents an Ok.\n         * @implements IOk\n         * @constructor\n         * @param {handyplug.IOk=} [properties] Properties to set\n         */\n        function Ok(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Ok Id.\n         * @member {number} Id\n         * @memberof handyplug.Ok\n         * @instance\n         */\n        Ok.prototype.Id = 0;\n\n        /**\n         * Creates a new Ok instance using the specified properties.\n         * @function create\n         * @memberof handyplug.Ok\n         * @static\n         * @param {handyplug.IOk=} [properties] Properties to set\n         * @returns {handyplug.Ok} Ok instance\n         */\n        Ok.create = function create(properties) {\n            return new Ok(properties);\n        };\n\n        /**\n         * Encodes the specified Ok message. Does not implicitly {@link handyplug.Ok.verify|verify} messages.\n         * @function encode\n         * @memberof handyplug.Ok\n         * @static\n         * @param {handyplug.Ok} message Ok message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Ok.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.Id != null && Object.hasOwnProperty.call(message, \"Id\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Ok message, length delimited. Does not implicitly {@link handyplug.Ok.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof handyplug.Ok\n         * @static\n         * @param {handyplug.Ok} message Ok message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Ok.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Ok message from the specified reader or buffer.\n         * @function decode\n         * @memberof handyplug.Ok\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {handyplug.Ok} Ok\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Ok.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.handyplug.Ok();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.Id = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Ok message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof handyplug.Ok\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {handyplug.Ok} Ok\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Ok.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Ok message.\n         * @function verify\n         * @memberof handyplug.Ok\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Ok.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.Id != null && message.hasOwnProperty(\"Id\"))\n                if (!$util.isInteger(message.Id))\n                    return \"Id: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates an Ok message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof handyplug.Ok\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {handyplug.Ok} Ok\n         */\n        Ok.fromObject = function fromObject(object) {\n            if (object instanceof $root.handyplug.Ok)\n                return object;\n            let message = new $root.handyplug.Ok();\n            if (object.Id != null)\n                message.Id = object.Id >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Ok message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof handyplug.Ok\n         * @static\n         * @param {handyplug.Ok} message Ok\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Ok.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.Id = 0;\n            if (message.Id != null && message.hasOwnProperty(\"Id\"))\n                object.Id = message.Id;\n            return object;\n        };\n\n        /**\n         * Converts this Ok to JSON.\n         * @function toJSON\n         * @memberof handyplug.Ok\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Ok.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return Ok;\n    })();\n\n    handyplug.Error = (function() {\n\n        /**\n         * Properties of an Error.\n         * @memberof handyplug\n         * @interface IError\n         * @property {number|null} [Id] Error Id\n         * @property {string|null} [ErrorMessage] Error ErrorMessage\n         * @property {number|null} [ErrorCode] Error ErrorCode\n         */\n\n        /**\n         * Constructs a new Error.\n         * @memberof handyplug\n         * @classdesc Represents an Error.\n         * @implements IError\n         * @constructor\n         * @param {handyplug.IError=} [properties] Properties to set\n         */\n        function Error(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Error Id.\n         * @member {number} Id\n         * @memberof handyplug.Error\n         * @instance\n         */\n        Error.prototype.Id = 0;\n\n        /**\n         * Error ErrorMessage.\n         * @member {string} ErrorMessage\n         * @memberof handyplug.Error\n         * @instance\n         */\n        Error.prototype.ErrorMessage = \"\";\n\n        /**\n         * Error ErrorCode.\n         * @member {number} ErrorCode\n         * @memberof handyplug.Error\n         * @instance\n         */\n        Error.prototype.ErrorCode = 0;\n\n        /**\n         * Creates a new Error instance using the specified properties.\n         * @function create\n         * @memberof handyplug.Error\n         * @static\n         * @param {handyplug.IError=} [properties] Properties to set\n         * @returns {handyplug.Error} Error instance\n         */\n        Error.create = function create(properties) {\n            return new Error(properties);\n        };\n\n        /**\n         * Encodes the specified Error message. Does not implicitly {@link handyplug.Error.verify|verify} messages.\n         * @function encode\n         * @memberof handyplug.Error\n         * @static\n         * @param {handyplug.Error} message Error message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Error.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.Id != null && Object.hasOwnProperty.call(message, \"Id\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);\n            if (message.ErrorMessage != null && Object.hasOwnProperty.call(message, \"ErrorMessage\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.ErrorMessage);\n            if (message.ErrorCode != null && Object.hasOwnProperty.call(message, \"ErrorCode\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.ErrorCode);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Error message, length delimited. Does not implicitly {@link handyplug.Error.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof handyplug.Error\n         * @static\n         * @param {handyplug.Error} message Error message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Error.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Error message from the specified reader or buffer.\n         * @function decode\n         * @memberof handyplug.Error\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {handyplug.Error} Error\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Error.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.handyplug.Error();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.Id = reader.uint32();\n                    break;\n                case 2:\n                    message.ErrorMessage = reader.string();\n                    break;\n                case 3:\n                    message.ErrorCode = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Error message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof handyplug.Error\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {handyplug.Error} Error\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Error.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Error message.\n         * @function verify\n         * @memberof handyplug.Error\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Error.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.Id != null && message.hasOwnProperty(\"Id\"))\n                if (!$util.isInteger(message.Id))\n                    return \"Id: integer expected\";\n            if (message.ErrorMessage != null && message.hasOwnProperty(\"ErrorMessage\"))\n                if (!$util.isString(message.ErrorMessage))\n                    return \"ErrorMessage: string expected\";\n            if (message.ErrorCode != null && message.hasOwnProperty(\"ErrorCode\"))\n                if (!$util.isInteger(message.ErrorCode))\n                    return \"ErrorCode: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates an Error message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof handyplug.Error\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {handyplug.Error} Error\n         */\n        Error.fromObject = function fromObject(object) {\n            if (object instanceof $root.handyplug.Error)\n                return object;\n            let message = new $root.handyplug.Error();\n            if (object.Id != null)\n                message.Id = object.Id >>> 0;\n            if (object.ErrorMessage != null)\n                message.ErrorMessage = String(object.ErrorMessage);\n            if (object.ErrorCode != null)\n                message.ErrorCode = object.ErrorCode | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Error message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof handyplug.Error\n         * @static\n         * @param {handyplug.Error} message Error\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Error.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.Id = 0;\n                object.ErrorMessage = \"\";\n                object.ErrorCode = 0;\n            }\n            if (message.Id != null && message.hasOwnProperty(\"Id\"))\n                object.Id = message.Id;\n            if (message.ErrorMessage != null && message.hasOwnProperty(\"ErrorMessage\"))\n                object.ErrorMessage = message.ErrorMessage;\n            if (message.ErrorCode != null && message.hasOwnProperty(\"ErrorCode\"))\n                object.ErrorCode = message.ErrorCode;\n            return object;\n        };\n\n        /**\n         * Converts this Error to JSON.\n         * @function toJSON\n         * @memberof handyplug.Error\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Error.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return Error;\n    })();\n\n    handyplug.Ping = (function() {\n\n        /**\n         * Properties of a Ping.\n         * @memberof handyplug\n         * @interface IPing\n         * @property {number|null} [Id] Ping Id\n         */\n\n        /**\n         * Constructs a new Ping.\n         * @memberof handyplug\n         * @classdesc Represents a Ping.\n         * @implements IPing\n         * @constructor\n         * @param {handyplug.IPing=} [properties] Properties to set\n         */\n        function Ping(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Ping Id.\n         * @member {number} Id\n         * @memberof handyplug.Ping\n         * @instance\n         */\n        Ping.prototype.Id = 0;\n\n        /**\n         * Creates a new Ping instance using the specified properties.\n         * @function create\n         * @memberof handyplug.Ping\n         * @static\n         * @param {handyplug.IPing=} [properties] Properties to set\n         * @returns {handyplug.Ping} Ping instance\n         */\n        Ping.create = function create(properties) {\n            return new Ping(properties);\n        };\n\n        /**\n         * Encodes the specified Ping message. Does not implicitly {@link handyplug.Ping.verify|verify} messages.\n         * @function encode\n         * @memberof handyplug.Ping\n         * @static\n         * @param {handyplug.Ping} message Ping message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Ping.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.Id != null && Object.hasOwnProperty.call(message, \"Id\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Ping message, length delimited. Does not implicitly {@link handyplug.Ping.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof handyplug.Ping\n         * @static\n         * @param {handyplug.Ping} message Ping message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Ping.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Ping message from the specified reader or buffer.\n         * @function decode\n         * @memberof handyplug.Ping\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {handyplug.Ping} Ping\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Ping.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.handyplug.Ping();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.Id = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Ping message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof handyplug.Ping\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {handyplug.Ping} Ping\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Ping.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Ping message.\n         * @function verify\n         * @memberof handyplug.Ping\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Ping.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.Id != null && message.hasOwnProperty(\"Id\"))\n                if (!$util.isInteger(message.Id))\n                    return \"Id: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Ping message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof handyplug.Ping\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {handyplug.Ping} Ping\n         */\n        Ping.fromObject = function fromObject(object) {\n            if (object instanceof $root.handyplug.Ping)\n                return object;\n            let message = new $root.handyplug.Ping();\n            if (object.Id != null)\n                message.Id = object.Id >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Ping message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof handyplug.Ping\n         * @static\n         * @param {handyplug.Ping} message Ping\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Ping.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.Id = 0;\n            if (message.Id != null && message.hasOwnProperty(\"Id\"))\n                object.Id = message.Id;\n            return object;\n        };\n\n        /**\n         * Converts this Ping to JSON.\n         * @function toJSON\n         * @memberof handyplug.Ping\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Ping.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return Ping;\n    })();\n\n    handyplug.RequestServerInfo = (function() {\n\n        /**\n         * Properties of a RequestServerInfo.\n         * @memberof handyplug\n         * @interface IRequestServerInfo\n         * @property {number|null} [Id] RequestServerInfo Id\n         * @property {string|null} [ClientName] RequestServerInfo ClientName\n         * @property {number|null} [MessageVersion] RequestServerInfo MessageVersion\n         */\n\n        /**\n         * Constructs a new RequestServerInfo.\n         * @memberof handyplug\n         * @classdesc Represents a RequestServerInfo.\n         * @implements IRequestServerInfo\n         * @constructor\n         * @param {handyplug.IRequestServerInfo=} [properties] Properties to set\n         */\n        function RequestServerInfo(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RequestServerInfo Id.\n         * @member {number} Id\n         * @memberof handyplug.RequestServerInfo\n         * @instance\n         */\n        RequestServerInfo.prototype.Id = 0;\n\n        /**\n         * RequestServerInfo ClientName.\n         * @member {string} ClientName\n         * @memberof handyplug.RequestServerInfo\n         * @instance\n         */\n        RequestServerInfo.prototype.ClientName = \"\";\n\n        /**\n         * RequestServerInfo MessageVersion.\n         * @member {number} MessageVersion\n         * @memberof handyplug.RequestServerInfo\n         * @instance\n         */\n        RequestServerInfo.prototype.MessageVersion = 0;\n\n        /**\n         * Creates a new RequestServerInfo instance using the specified properties.\n         * @function create\n         * @memberof handyplug.RequestServerInfo\n         * @static\n         * @param {handyplug.IRequestServerInfo=} [properties] Properties to set\n         * @returns {handyplug.RequestServerInfo} RequestServerInfo instance\n         */\n        RequestServerInfo.create = function create(properties) {\n            return new RequestServerInfo(properties);\n        };\n\n        /**\n         * Encodes the specified RequestServerInfo message. Does not implicitly {@link handyplug.RequestServerInfo.verify|verify} messages.\n         * @function encode\n         * @memberof handyplug.RequestServerInfo\n         * @static\n         * @param {handyplug.RequestServerInfo} message RequestServerInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestServerInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.Id != null && Object.hasOwnProperty.call(message, \"Id\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);\n            if (message.ClientName != null && Object.hasOwnProperty.call(message, \"ClientName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.ClientName);\n            if (message.MessageVersion != null && Object.hasOwnProperty.call(message, \"MessageVersion\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.MessageVersion);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RequestServerInfo message, length delimited. Does not implicitly {@link handyplug.RequestServerInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof handyplug.RequestServerInfo\n         * @static\n         * @param {handyplug.RequestServerInfo} message RequestServerInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RequestServerInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RequestServerInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof handyplug.RequestServerInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {handyplug.RequestServerInfo} RequestServerInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestServerInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.handyplug.RequestServerInfo();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.Id = reader.uint32();\n                    break;\n                case 2:\n                    message.ClientName = reader.string();\n                    break;\n                case 3:\n                    message.MessageVersion = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RequestServerInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof handyplug.RequestServerInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {handyplug.RequestServerInfo} RequestServerInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RequestServerInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RequestServerInfo message.\n         * @function verify\n         * @memberof handyplug.RequestServerInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RequestServerInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.Id != null && message.hasOwnProperty(\"Id\"))\n                if (!$util.isInteger(message.Id))\n                    return \"Id: integer expected\";\n            if (message.ClientName != null && message.hasOwnProperty(\"ClientName\"))\n                if (!$util.isString(message.ClientName))\n                    return \"ClientName: string expected\";\n            if (message.MessageVersion != null && message.hasOwnProperty(\"MessageVersion\"))\n                if (!$util.isInteger(message.MessageVersion))\n                    return \"MessageVersion: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RequestServerInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof handyplug.RequestServerInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {handyplug.RequestServerInfo} RequestServerInfo\n         */\n        RequestServerInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.handyplug.RequestServerInfo)\n                return object;\n            let message = new $root.handyplug.RequestServerInfo();\n            if (object.Id != null)\n                message.Id = object.Id >>> 0;\n            if (object.ClientName != null)\n                message.ClientName = String(object.ClientName);\n            if (object.MessageVersion != null)\n                message.MessageVersion = object.MessageVersion >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RequestServerInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof handyplug.RequestServerInfo\n         * @static\n         * @param {handyplug.RequestServerInfo} message RequestServerInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RequestServerInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.Id = 0;\n                object.ClientName = \"\";\n                object.MessageVersion = 0;\n            }\n            if (message.Id != null && message.hasOwnProperty(\"Id\"))\n                object.Id = message.Id;\n            if (message.ClientName != null && message.hasOwnProperty(\"ClientName\"))\n                object.ClientName = message.ClientName;\n            if (message.MessageVersion != null && message.hasOwnProperty(\"MessageVersion\"))\n                object.MessageVersion = message.MessageVersion;\n            return object;\n        };\n\n        /**\n         * Converts this RequestServerInfo to JSON.\n         * @function toJSON\n         * @memberof handyplug.RequestServerInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RequestServerInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return RequestServerInfo;\n    })();\n\n    handyplug.ServerInfo = (function() {\n\n        /**\n         * Properties of a ServerInfo.\n         * @memberof handyplug\n         * @interface IServerInfo\n         * @property {number|null} [Id] ServerInfo Id\n         * @property {string|null} [ServerName] ServerInfo ServerName\n         * @property {number|null} [MessageVersion] ServerInfo MessageVersion\n         * @property {number|null} [MaxPingTime] ServerInfo MaxPingTime\n         */\n\n        /**\n         * Constructs a new ServerInfo.\n         * @memberof handyplug\n         * @classdesc Represents a ServerInfo.\n         * @implements IServerInfo\n         * @constructor\n         * @param {handyplug.IServerInfo=} [properties] Properties to set\n         */\n        function ServerInfo(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerInfo Id.\n         * @member {number} Id\n         * @memberof handyplug.ServerInfo\n         * @instance\n         */\n        ServerInfo.prototype.Id = 0;\n\n        /**\n         * ServerInfo ServerName.\n         * @member {string} ServerName\n         * @memberof handyplug.ServerInfo\n         * @instance\n         */\n        ServerInfo.prototype.ServerName = \"\";\n\n        /**\n         * ServerInfo MessageVersion.\n         * @member {number} MessageVersion\n         * @memberof handyplug.ServerInfo\n         * @instance\n         */\n        ServerInfo.prototype.MessageVersion = 0;\n\n        /**\n         * ServerInfo MaxPingTime.\n         * @member {number} MaxPingTime\n         * @memberof handyplug.ServerInfo\n         * @instance\n         */\n        ServerInfo.prototype.MaxPingTime = 0;\n\n        /**\n         * Creates a new ServerInfo instance using the specified properties.\n         * @function create\n         * @memberof handyplug.ServerInfo\n         * @static\n         * @param {handyplug.IServerInfo=} [properties] Properties to set\n         * @returns {handyplug.ServerInfo} ServerInfo instance\n         */\n        ServerInfo.create = function create(properties) {\n            return new ServerInfo(properties);\n        };\n\n        /**\n         * Encodes the specified ServerInfo message. Does not implicitly {@link handyplug.ServerInfo.verify|verify} messages.\n         * @function encode\n         * @memberof handyplug.ServerInfo\n         * @static\n         * @param {handyplug.ServerInfo} message ServerInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.Id != null && Object.hasOwnProperty.call(message, \"Id\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);\n            if (message.ServerName != null && Object.hasOwnProperty.call(message, \"ServerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.ServerName);\n            if (message.MessageVersion != null && Object.hasOwnProperty.call(message, \"MessageVersion\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.MessageVersion);\n            if (message.MaxPingTime != null && Object.hasOwnProperty.call(message, \"MaxPingTime\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.MaxPingTime);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerInfo message, length delimited. Does not implicitly {@link handyplug.ServerInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof handyplug.ServerInfo\n         * @static\n         * @param {handyplug.ServerInfo} message ServerInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof handyplug.ServerInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {handyplug.ServerInfo} ServerInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.handyplug.ServerInfo();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.Id = reader.uint32();\n                    break;\n                case 2:\n                    message.ServerName = reader.string();\n                    break;\n                case 3:\n                    message.MessageVersion = reader.uint32();\n                    break;\n                case 4:\n                    message.MaxPingTime = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof handyplug.ServerInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {handyplug.ServerInfo} ServerInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerInfo message.\n         * @function verify\n         * @memberof handyplug.ServerInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.Id != null && message.hasOwnProperty(\"Id\"))\n                if (!$util.isInteger(message.Id))\n                    return \"Id: integer expected\";\n            if (message.ServerName != null && message.hasOwnProperty(\"ServerName\"))\n                if (!$util.isString(message.ServerName))\n                    return \"ServerName: string expected\";\n            if (message.MessageVersion != null && message.hasOwnProperty(\"MessageVersion\"))\n                if (!$util.isInteger(message.MessageVersion))\n                    return \"MessageVersion: integer expected\";\n            if (message.MaxPingTime != null && message.hasOwnProperty(\"MaxPingTime\"))\n                if (!$util.isInteger(message.MaxPingTime))\n                    return \"MaxPingTime: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof handyplug.ServerInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {handyplug.ServerInfo} ServerInfo\n         */\n        ServerInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.handyplug.ServerInfo)\n                return object;\n            let message = new $root.handyplug.ServerInfo();\n            if (object.Id != null)\n                message.Id = object.Id >>> 0;\n            if (object.ServerName != null)\n                message.ServerName = String(object.ServerName);\n            if (object.MessageVersion != null)\n                message.MessageVersion = object.MessageVersion >>> 0;\n            if (object.MaxPingTime != null)\n                message.MaxPingTime = object.MaxPingTime >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof handyplug.ServerInfo\n         * @static\n         * @param {handyplug.ServerInfo} message ServerInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.Id = 0;\n                object.ServerName = \"\";\n                object.MessageVersion = 0;\n                object.MaxPingTime = 0;\n            }\n            if (message.Id != null && message.hasOwnProperty(\"Id\"))\n                object.Id = message.Id;\n            if (message.ServerName != null && message.hasOwnProperty(\"ServerName\"))\n                object.ServerName = message.ServerName;\n            if (message.MessageVersion != null && message.hasOwnProperty(\"MessageVersion\"))\n                object.MessageVersion = message.MessageVersion;\n            if (message.MaxPingTime != null && message.hasOwnProperty(\"MaxPingTime\"))\n                object.MaxPingTime = message.MaxPingTime;\n            return object;\n        };\n\n        /**\n         * Converts this ServerInfo to JSON.\n         * @function toJSON\n         * @memberof handyplug.ServerInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return ServerInfo;\n    })();\n\n    handyplug.LinearCmd = (function() {\n\n        /**\n         * Properties of a LinearCmd.\n         * @memberof handyplug\n         * @interface ILinearCmd\n         * @property {number|null} [Id] LinearCmd Id\n         * @property {number|null} [DeviceIndex] LinearCmd DeviceIndex\n         * @property {Array.<handyplug.LinearCmd.Vector>|null} [Vectors] LinearCmd Vectors\n         */\n\n        /**\n         * Constructs a new LinearCmd.\n         * @memberof handyplug\n         * @classdesc Represents a LinearCmd.\n         * @implements ILinearCmd\n         * @constructor\n         * @param {handyplug.ILinearCmd=} [properties] Properties to set\n         */\n        function LinearCmd(properties) {\n            this.Vectors = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * LinearCmd Id.\n         * @member {number} Id\n         * @memberof handyplug.LinearCmd\n         * @instance\n         */\n        LinearCmd.prototype.Id = 0;\n\n        /**\n         * LinearCmd DeviceIndex.\n         * @member {number} DeviceIndex\n         * @memberof handyplug.LinearCmd\n         * @instance\n         */\n        LinearCmd.prototype.DeviceIndex = 0;\n\n        /**\n         * LinearCmd Vectors.\n         * @member {Array.<handyplug.LinearCmd.Vector>} Vectors\n         * @memberof handyplug.LinearCmd\n         * @instance\n         */\n        LinearCmd.prototype.Vectors = $util.emptyArray;\n\n        /**\n         * Creates a new LinearCmd instance using the specified properties.\n         * @function create\n         * @memberof handyplug.LinearCmd\n         * @static\n         * @param {handyplug.ILinearCmd=} [properties] Properties to set\n         * @returns {handyplug.LinearCmd} LinearCmd instance\n         */\n        LinearCmd.create = function create(properties) {\n            return new LinearCmd(properties);\n        };\n\n        /**\n         * Encodes the specified LinearCmd message. Does not implicitly {@link handyplug.LinearCmd.verify|verify} messages.\n         * @function encode\n         * @memberof handyplug.LinearCmd\n         * @static\n         * @param {handyplug.LinearCmd} message LinearCmd message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LinearCmd.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.Id != null && Object.hasOwnProperty.call(message, \"Id\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Id);\n            if (message.DeviceIndex != null && Object.hasOwnProperty.call(message, \"DeviceIndex\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.DeviceIndex);\n            if (message.Vectors != null && message.Vectors.length)\n                for (let i = 0; i < message.Vectors.length; ++i)\n                    $root.handyplug.LinearCmd.Vector.encode(message.Vectors[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified LinearCmd message, length delimited. Does not implicitly {@link handyplug.LinearCmd.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof handyplug.LinearCmd\n         * @static\n         * @param {handyplug.LinearCmd} message LinearCmd message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LinearCmd.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a LinearCmd message from the specified reader or buffer.\n         * @function decode\n         * @memberof handyplug.LinearCmd\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {handyplug.LinearCmd} LinearCmd\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LinearCmd.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.handyplug.LinearCmd();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.Id = reader.uint32();\n                    break;\n                case 2:\n                    message.DeviceIndex = reader.uint32();\n                    break;\n                case 3:\n                    if (!(message.Vectors && message.Vectors.length))\n                        message.Vectors = [];\n                    message.Vectors.push($root.handyplug.LinearCmd.Vector.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a LinearCmd message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof handyplug.LinearCmd\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {handyplug.LinearCmd} LinearCmd\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LinearCmd.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a LinearCmd message.\n         * @function verify\n         * @memberof handyplug.LinearCmd\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        LinearCmd.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.Id != null && message.hasOwnProperty(\"Id\"))\n                if (!$util.isInteger(message.Id))\n                    return \"Id: integer expected\";\n            if (message.DeviceIndex != null && message.hasOwnProperty(\"DeviceIndex\"))\n                if (!$util.isInteger(message.DeviceIndex))\n                    return \"DeviceIndex: integer expected\";\n            if (message.Vectors != null && message.hasOwnProperty(\"Vectors\")) {\n                if (!Array.isArray(message.Vectors))\n                    return \"Vectors: array expected\";\n                for (let i = 0; i < message.Vectors.length; ++i) {\n                    let error = $root.handyplug.LinearCmd.Vector.verify(message.Vectors[i]);\n                    if (error)\n                        return \"Vectors.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a LinearCmd message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof handyplug.LinearCmd\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {handyplug.LinearCmd} LinearCmd\n         */\n        LinearCmd.fromObject = function fromObject(object) {\n            if (object instanceof $root.handyplug.LinearCmd)\n                return object;\n            let message = new $root.handyplug.LinearCmd();\n            if (object.Id != null)\n                message.Id = object.Id >>> 0;\n            if (object.DeviceIndex != null)\n                message.DeviceIndex = object.DeviceIndex >>> 0;\n            if (object.Vectors) {\n                if (!Array.isArray(object.Vectors))\n                    throw TypeError(\".handyplug.LinearCmd.Vectors: array expected\");\n                message.Vectors = [];\n                for (let i = 0; i < object.Vectors.length; ++i) {\n                    if (typeof object.Vectors[i] !== \"object\")\n                        throw TypeError(\".handyplug.LinearCmd.Vectors: object expected\");\n                    message.Vectors[i] = $root.handyplug.LinearCmd.Vector.fromObject(object.Vectors[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a LinearCmd message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof handyplug.LinearCmd\n         * @static\n         * @param {handyplug.LinearCmd} message LinearCmd\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        LinearCmd.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.Vectors = [];\n            if (options.defaults) {\n                object.Id = 0;\n                object.DeviceIndex = 0;\n            }\n            if (message.Id != null && message.hasOwnProperty(\"Id\"))\n                object.Id = message.Id;\n            if (message.DeviceIndex != null && message.hasOwnProperty(\"DeviceIndex\"))\n                object.DeviceIndex = message.DeviceIndex;\n            if (message.Vectors && message.Vectors.length) {\n                object.Vectors = [];\n                for (let j = 0; j < message.Vectors.length; ++j)\n                    object.Vectors[j] = $root.handyplug.LinearCmd.Vector.toObject(message.Vectors[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this LinearCmd to JSON.\n         * @function toJSON\n         * @memberof handyplug.LinearCmd\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        LinearCmd.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        LinearCmd.Vector = (function() {\n\n            /**\n             * Properties of a Vector.\n             * @memberof handyplug.LinearCmd\n             * @interface IVector\n             * @property {number|null} [Index] Vector Index\n             * @property {number|null} [Duration] Vector Duration\n             * @property {number|null} [Position] Vector Position\n             */\n\n            /**\n             * Constructs a new Vector.\n             * @memberof handyplug.LinearCmd\n             * @classdesc Represents a Vector.\n             * @implements IVector\n             * @constructor\n             * @param {handyplug.LinearCmd.IVector=} [properties] Properties to set\n             */\n            function Vector(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Vector Index.\n             * @member {number} Index\n             * @memberof handyplug.LinearCmd.Vector\n             * @instance\n             */\n            Vector.prototype.Index = 0;\n\n            /**\n             * Vector Duration.\n             * @member {number} Duration\n             * @memberof handyplug.LinearCmd.Vector\n             * @instance\n             */\n            Vector.prototype.Duration = 0;\n\n            /**\n             * Vector Position.\n             * @member {number} Position\n             * @memberof handyplug.LinearCmd.Vector\n             * @instance\n             */\n            Vector.prototype.Position = 0;\n\n            /**\n             * Creates a new Vector instance using the specified properties.\n             * @function create\n             * @memberof handyplug.LinearCmd.Vector\n             * @static\n             * @param {handyplug.LinearCmd.IVector=} [properties] Properties to set\n             * @returns {handyplug.LinearCmd.Vector} Vector instance\n             */\n            Vector.create = function create(properties) {\n                return new Vector(properties);\n            };\n\n            /**\n             * Encodes the specified Vector message. Does not implicitly {@link handyplug.LinearCmd.Vector.verify|verify} messages.\n             * @function encode\n             * @memberof handyplug.LinearCmd.Vector\n             * @static\n             * @param {handyplug.LinearCmd.Vector} message Vector message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Vector.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.Index != null && Object.hasOwnProperty.call(message, \"Index\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.Index);\n                if (message.Duration != null && Object.hasOwnProperty.call(message, \"Duration\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.Duration);\n                if (message.Position != null && Object.hasOwnProperty.call(message, \"Position\"))\n                    writer.uint32(/* id 3, wireType 1 =*/25).double(message.Position);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Vector message, length delimited. Does not implicitly {@link handyplug.LinearCmd.Vector.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof handyplug.LinearCmd.Vector\n             * @static\n             * @param {handyplug.LinearCmd.Vector} message Vector message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Vector.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Vector message from the specified reader or buffer.\n             * @function decode\n             * @memberof handyplug.LinearCmd.Vector\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {handyplug.LinearCmd.Vector} Vector\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Vector.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.handyplug.LinearCmd.Vector();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.Index = reader.uint32();\n                        break;\n                    case 2:\n                        message.Duration = reader.uint32();\n                        break;\n                    case 3:\n                        message.Position = reader.double();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Vector message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof handyplug.LinearCmd.Vector\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {handyplug.LinearCmd.Vector} Vector\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Vector.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Vector message.\n             * @function verify\n             * @memberof handyplug.LinearCmd.Vector\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Vector.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.Index != null && message.hasOwnProperty(\"Index\"))\n                    if (!$util.isInteger(message.Index))\n                        return \"Index: integer expected\";\n                if (message.Duration != null && message.hasOwnProperty(\"Duration\"))\n                    if (!$util.isInteger(message.Duration))\n                        return \"Duration: integer expected\";\n                if (message.Position != null && message.hasOwnProperty(\"Position\"))\n                    if (typeof message.Position !== \"number\")\n                        return \"Position: number expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Vector message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof handyplug.LinearCmd.Vector\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {handyplug.LinearCmd.Vector} Vector\n             */\n            Vector.fromObject = function fromObject(object) {\n                if (object instanceof $root.handyplug.LinearCmd.Vector)\n                    return object;\n                let message = new $root.handyplug.LinearCmd.Vector();\n                if (object.Index != null)\n                    message.Index = object.Index >>> 0;\n                if (object.Duration != null)\n                    message.Duration = object.Duration >>> 0;\n                if (object.Position != null)\n                    message.Position = Number(object.Position);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Vector message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof handyplug.LinearCmd.Vector\n             * @static\n             * @param {handyplug.LinearCmd.Vector} message Vector\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Vector.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.Index = 0;\n                    object.Duration = 0;\n                    object.Position = 0;\n                }\n                if (message.Index != null && message.hasOwnProperty(\"Index\"))\n                    object.Index = message.Index;\n                if (message.Duration != null && message.hasOwnProperty(\"Duration\"))\n                    object.Duration = message.Duration;\n                if (message.Position != null && message.hasOwnProperty(\"Position\"))\n                    object.Position = options.json && !isFinite(message.Position) ? String(message.Position) : message.Position;\n                return object;\n            };\n\n            /**\n             * Converts this Vector to JSON.\n             * @function toJSON\n             * @memberof handyplug.LinearCmd.Vector\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Vector.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n            };\n\n            return Vector;\n        })();\n\n        return LinearCmd;\n    })();\n\n    handyplug.Message = (function() {\n\n        /**\n         * Properties of a Message.\n         * @memberof handyplug\n         * @interface IMessage\n         * @property {handyplug.Ok|null} [Ok] Message Ok\n         * @property {handyplug.Error|null} [Error] Message Error\n         * @property {handyplug.Ping|null} [Ping] Message Ping\n         * @property {handyplug.RequestServerInfo|null} [RequestServerInfo] Message RequestServerInfo\n         * @property {handyplug.ServerInfo|null} [ServerInfo] Message ServerInfo\n         * @property {handyplug.LinearCmd|null} [LinearCmd] Message LinearCmd\n         */\n\n        /**\n         * Constructs a new Message.\n         * @memberof handyplug\n         * @classdesc Represents a Message.\n         * @implements IMessage\n         * @constructor\n         * @param {handyplug.IMessage=} [properties] Properties to set\n         */\n        function Message(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Message Ok.\n         * @member {handyplug.Ok|null|undefined} Ok\n         * @memberof handyplug.Message\n         * @instance\n         */\n        Message.prototype.Ok = null;\n\n        /**\n         * Message Error.\n         * @member {handyplug.Error|null|undefined} Error\n         * @memberof handyplug.Message\n         * @instance\n         */\n        Message.prototype.Error = null;\n\n        /**\n         * Message Ping.\n         * @member {handyplug.Ping|null|undefined} Ping\n         * @memberof handyplug.Message\n         * @instance\n         */\n        Message.prototype.Ping = null;\n\n        /**\n         * Message RequestServerInfo.\n         * @member {handyplug.RequestServerInfo|null|undefined} RequestServerInfo\n         * @memberof handyplug.Message\n         * @instance\n         */\n        Message.prototype.RequestServerInfo = null;\n\n        /**\n         * Message ServerInfo.\n         * @member {handyplug.ServerInfo|null|undefined} ServerInfo\n         * @memberof handyplug.Message\n         * @instance\n         */\n        Message.prototype.ServerInfo = null;\n\n        /**\n         * Message LinearCmd.\n         * @member {handyplug.LinearCmd|null|undefined} LinearCmd\n         * @memberof handyplug.Message\n         * @instance\n         */\n        Message.prototype.LinearCmd = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Message Message.\n         * @member {\"Ok\"|\"Error\"|\"Ping\"|\"RequestServerInfo\"|\"ServerInfo\"|\"LinearCmd\"|undefined} Message\n         * @memberof handyplug.Message\n         * @instance\n         */\n        Object.defineProperty(Message.prototype, \"Message\", {\n            get: $util.oneOfGetter($oneOfFields = [\"Ok\", \"Error\", \"Ping\", \"RequestServerInfo\", \"ServerInfo\", \"LinearCmd\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Message instance using the specified properties.\n         * @function create\n         * @memberof handyplug.Message\n         * @static\n         * @param {handyplug.IMessage=} [properties] Properties to set\n         * @returns {handyplug.Message} Message instance\n         */\n        Message.create = function create(properties) {\n            return new Message(properties);\n        };\n\n        /**\n         * Encodes the specified Message message. Does not implicitly {@link handyplug.Message.verify|verify} messages.\n         * @function encode\n         * @memberof handyplug.Message\n         * @static\n         * @param {handyplug.Message} message Message message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Message.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.Ok != null && Object.hasOwnProperty.call(message, \"Ok\"))\n                $root.handyplug.Ok.encode(message.Ok, writer.uint32(/* id 100, wireType 2 =*/802).fork()).ldelim();\n            if (message.Error != null && Object.hasOwnProperty.call(message, \"Error\"))\n                $root.handyplug.Error.encode(message.Error, writer.uint32(/* id 101, wireType 2 =*/810).fork()).ldelim();\n            if (message.Ping != null && Object.hasOwnProperty.call(message, \"Ping\"))\n                $root.handyplug.Ping.encode(message.Ping, writer.uint32(/* id 102, wireType 2 =*/818).fork()).ldelim();\n            if (message.RequestServerInfo != null && Object.hasOwnProperty.call(message, \"RequestServerInfo\"))\n                $root.handyplug.RequestServerInfo.encode(message.RequestServerInfo, writer.uint32(/* id 200, wireType 2 =*/1602).fork()).ldelim();\n            if (message.ServerInfo != null && Object.hasOwnProperty.call(message, \"ServerInfo\"))\n                $root.handyplug.ServerInfo.encode(message.ServerInfo, writer.uint32(/* id 201, wireType 2 =*/1610).fork()).ldelim();\n            if (message.LinearCmd != null && Object.hasOwnProperty.call(message, \"LinearCmd\"))\n                $root.handyplug.LinearCmd.encode(message.LinearCmd, writer.uint32(/* id 403, wireType 2 =*/3226).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Message message, length delimited. Does not implicitly {@link handyplug.Message.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof handyplug.Message\n         * @static\n         * @param {handyplug.Message} message Message message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Message.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Message message from the specified reader or buffer.\n         * @function decode\n         * @memberof handyplug.Message\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {handyplug.Message} Message\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Message.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.handyplug.Message();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 100:\n                    message.Ok = $root.handyplug.Ok.decode(reader, reader.uint32());\n                    break;\n                case 101:\n                    message.Error = $root.handyplug.Error.decode(reader, reader.uint32());\n                    break;\n                case 102:\n                    message.Ping = $root.handyplug.Ping.decode(reader, reader.uint32());\n                    break;\n                case 200:\n                    message.RequestServerInfo = $root.handyplug.RequestServerInfo.decode(reader, reader.uint32());\n                    break;\n                case 201:\n                    message.ServerInfo = $root.handyplug.ServerInfo.decode(reader, reader.uint32());\n                    break;\n                case 403:\n                    message.LinearCmd = $root.handyplug.LinearCmd.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Message message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof handyplug.Message\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {handyplug.Message} Message\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Message.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Message message.\n         * @function verify\n         * @memberof handyplug.Message\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Message.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.Ok != null && message.hasOwnProperty(\"Ok\")) {\n                properties.Message = 1;\n                {\n                    let error = $root.handyplug.Ok.verify(message.Ok);\n                    if (error)\n                        return \"Ok.\" + error;\n                }\n            }\n            if (message.Error != null && message.hasOwnProperty(\"Error\")) {\n                if (properties.Message === 1)\n                    return \"Message: multiple values\";\n                properties.Message = 1;\n                {\n                    let error = $root.handyplug.Error.verify(message.Error);\n                    if (error)\n                        return \"Error.\" + error;\n                }\n            }\n            if (message.Ping != null && message.hasOwnProperty(\"Ping\")) {\n                if (properties.Message === 1)\n                    return \"Message: multiple values\";\n                properties.Message = 1;\n                {\n                    let error = $root.handyplug.Ping.verify(message.Ping);\n                    if (error)\n                        return \"Ping.\" + error;\n                }\n            }\n            if (message.RequestServerInfo != null && message.hasOwnProperty(\"RequestServerInfo\")) {\n                if (properties.Message === 1)\n                    return \"Message: multiple values\";\n                properties.Message = 1;\n                {\n                    let error = $root.handyplug.RequestServerInfo.verify(message.RequestServerInfo);\n                    if (error)\n                        return \"RequestServerInfo.\" + error;\n                }\n            }\n            if (message.ServerInfo != null && message.hasOwnProperty(\"ServerInfo\")) {\n                if (properties.Message === 1)\n                    return \"Message: multiple values\";\n                properties.Message = 1;\n                {\n                    let error = $root.handyplug.ServerInfo.verify(message.ServerInfo);\n                    if (error)\n                        return \"ServerInfo.\" + error;\n                }\n            }\n            if (message.LinearCmd != null && message.hasOwnProperty(\"LinearCmd\")) {\n                if (properties.Message === 1)\n                    return \"Message: multiple values\";\n                properties.Message = 1;\n                {\n                    let error = $root.handyplug.LinearCmd.verify(message.LinearCmd);\n                    if (error)\n                        return \"LinearCmd.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Message message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof handyplug.Message\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {handyplug.Message} Message\n         */\n        Message.fromObject = function fromObject(object) {\n            if (object instanceof $root.handyplug.Message)\n                return object;\n            let message = new $root.handyplug.Message();\n            if (object.Ok != null) {\n                if (typeof object.Ok !== \"object\")\n                    throw TypeError(\".handyplug.Message.Ok: object expected\");\n                message.Ok = $root.handyplug.Ok.fromObject(object.Ok);\n            }\n            if (object.Error != null) {\n                if (typeof object.Error !== \"object\")\n                    throw TypeError(\".handyplug.Message.Error: object expected\");\n                message.Error = $root.handyplug.Error.fromObject(object.Error);\n            }\n            if (object.Ping != null) {\n                if (typeof object.Ping !== \"object\")\n                    throw TypeError(\".handyplug.Message.Ping: object expected\");\n                message.Ping = $root.handyplug.Ping.fromObject(object.Ping);\n            }\n            if (object.RequestServerInfo != null) {\n                if (typeof object.RequestServerInfo !== \"object\")\n                    throw TypeError(\".handyplug.Message.RequestServerInfo: object expected\");\n                message.RequestServerInfo = $root.handyplug.RequestServerInfo.fromObject(object.RequestServerInfo);\n            }\n            if (object.ServerInfo != null) {\n                if (typeof object.ServerInfo !== \"object\")\n                    throw TypeError(\".handyplug.Message.ServerInfo: object expected\");\n                message.ServerInfo = $root.handyplug.ServerInfo.fromObject(object.ServerInfo);\n            }\n            if (object.LinearCmd != null) {\n                if (typeof object.LinearCmd !== \"object\")\n                    throw TypeError(\".handyplug.Message.LinearCmd: object expected\");\n                message.LinearCmd = $root.handyplug.LinearCmd.fromObject(object.LinearCmd);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Message message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof handyplug.Message\n         * @static\n         * @param {handyplug.Message} message Message\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Message.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (message.Ok != null && message.hasOwnProperty(\"Ok\")) {\n                object.Ok = $root.handyplug.Ok.toObject(message.Ok, options);\n                if (options.oneofs)\n                    object.Message = \"Ok\";\n            }\n            if (message.Error != null && message.hasOwnProperty(\"Error\")) {\n                object.Error = $root.handyplug.Error.toObject(message.Error, options);\n                if (options.oneofs)\n                    object.Message = \"Error\";\n            }\n            if (message.Ping != null && message.hasOwnProperty(\"Ping\")) {\n                object.Ping = $root.handyplug.Ping.toObject(message.Ping, options);\n                if (options.oneofs)\n                    object.Message = \"Ping\";\n            }\n            if (message.RequestServerInfo != null && message.hasOwnProperty(\"RequestServerInfo\")) {\n                object.RequestServerInfo = $root.handyplug.RequestServerInfo.toObject(message.RequestServerInfo, options);\n                if (options.oneofs)\n                    object.Message = \"RequestServerInfo\";\n            }\n            if (message.ServerInfo != null && message.hasOwnProperty(\"ServerInfo\")) {\n                object.ServerInfo = $root.handyplug.ServerInfo.toObject(message.ServerInfo, options);\n                if (options.oneofs)\n                    object.Message = \"ServerInfo\";\n            }\n            if (message.LinearCmd != null && message.hasOwnProperty(\"LinearCmd\")) {\n                object.LinearCmd = $root.handyplug.LinearCmd.toObject(message.LinearCmd, options);\n                if (options.oneofs)\n                    object.Message = \"LinearCmd\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Message to JSON.\n         * @function toJSON\n         * @memberof handyplug.Message\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Message.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return Message;\n    })();\n\n    handyplug.Payload = (function() {\n\n        /**\n         * Properties of a Payload.\n         * @memberof handyplug\n         * @interface IPayload\n         * @property {Array.<handyplug.Message>|null} [Messages] Payload Messages\n         */\n\n        /**\n         * Constructs a new Payload.\n         * @memberof handyplug\n         * @classdesc Represents a Payload.\n         * @implements IPayload\n         * @constructor\n         * @param {handyplug.IPayload=} [properties] Properties to set\n         */\n        function Payload(properties) {\n            this.Messages = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Payload Messages.\n         * @member {Array.<handyplug.Message>} Messages\n         * @memberof handyplug.Payload\n         * @instance\n         */\n        Payload.prototype.Messages = $util.emptyArray;\n\n        /**\n         * Creates a new Payload instance using the specified properties.\n         * @function create\n         * @memberof handyplug.Payload\n         * @static\n         * @param {handyplug.IPayload=} [properties] Properties to set\n         * @returns {handyplug.Payload} Payload instance\n         */\n        Payload.create = function create(properties) {\n            return new Payload(properties);\n        };\n\n        /**\n         * Encodes the specified Payload message. Does not implicitly {@link handyplug.Payload.verify|verify} messages.\n         * @function encode\n         * @memberof handyplug.Payload\n         * @static\n         * @param {handyplug.Payload} message Payload message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Payload.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.Messages != null && message.Messages.length)\n                for (let i = 0; i < message.Messages.length; ++i)\n                    $root.handyplug.Message.encode(message.Messages[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Payload message, length delimited. Does not implicitly {@link handyplug.Payload.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof handyplug.Payload\n         * @static\n         * @param {handyplug.Payload} message Payload message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Payload.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Payload message from the specified reader or buffer.\n         * @function decode\n         * @memberof handyplug.Payload\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {handyplug.Payload} Payload\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Payload.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.handyplug.Payload();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.Messages && message.Messages.length))\n                        message.Messages = [];\n                    message.Messages.push($root.handyplug.Message.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Payload message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof handyplug.Payload\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {handyplug.Payload} Payload\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Payload.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Payload message.\n         * @function verify\n         * @memberof handyplug.Payload\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Payload.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.Messages != null && message.hasOwnProperty(\"Messages\")) {\n                if (!Array.isArray(message.Messages))\n                    return \"Messages: array expected\";\n                for (let i = 0; i < message.Messages.length; ++i) {\n                    let error = $root.handyplug.Message.verify(message.Messages[i]);\n                    if (error)\n                        return \"Messages.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Payload message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof handyplug.Payload\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {handyplug.Payload} Payload\n         */\n        Payload.fromObject = function fromObject(object) {\n            if (object instanceof $root.handyplug.Payload)\n                return object;\n            let message = new $root.handyplug.Payload();\n            if (object.Messages) {\n                if (!Array.isArray(object.Messages))\n                    throw TypeError(\".handyplug.Payload.Messages: array expected\");\n                message.Messages = [];\n                for (let i = 0; i < object.Messages.length; ++i) {\n                    if (typeof object.Messages[i] !== \"object\")\n                        throw TypeError(\".handyplug.Payload.Messages: object expected\");\n                    message.Messages[i] = $root.handyplug.Message.fromObject(object.Messages[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Payload message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof handyplug.Payload\n         * @static\n         * @param {handyplug.Payload} message Payload\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Payload.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.Messages = [];\n            if (message.Messages && message.Messages.length) {\n                object.Messages = [];\n                for (let j = 0; j < message.Messages.length; ++j)\n                    object.Messages[j] = $root.handyplug.Message.toObject(message.Messages[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Payload to JSON.\n         * @function toJSON\n         * @memberof handyplug.Payload\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Payload.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return Payload;\n    })();\n\n    return handyplug;\n})();\n\nconst CmdProtocolVersionGet = $root.CmdProtocolVersionGet = (() => {\n\n    /**\n     * Properties of a CmdProtocolVersionGet.\n     * @exports ICmdProtocolVersionGet\n     * @interface ICmdProtocolVersionGet\n     */\n\n    /**\n     * Constructs a new CmdProtocolVersionGet.\n     * @exports CmdProtocolVersionGet\n     * @classdesc Represents a CmdProtocolVersionGet.\n     * @implements ICmdProtocolVersionGet\n     * @constructor\n     * @param {ICmdProtocolVersionGet=} [properties] Properties to set\n     */\n    function CmdProtocolVersionGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new CmdProtocolVersionGet instance using the specified properties.\n     * @function create\n     * @memberof CmdProtocolVersionGet\n     * @static\n     * @param {ICmdProtocolVersionGet=} [properties] Properties to set\n     * @returns {CmdProtocolVersionGet} CmdProtocolVersionGet instance\n     */\n    CmdProtocolVersionGet.create = function create(properties) {\n        return new CmdProtocolVersionGet(properties);\n    };\n\n    /**\n     * Encodes the specified CmdProtocolVersionGet message. Does not implicitly {@link CmdProtocolVersionGet.verify|verify} messages.\n     * @function encode\n     * @memberof CmdProtocolVersionGet\n     * @static\n     * @param {CmdProtocolVersionGet} message CmdProtocolVersionGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdProtocolVersionGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CmdProtocolVersionGet message, length delimited. Does not implicitly {@link CmdProtocolVersionGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CmdProtocolVersionGet\n     * @static\n     * @param {CmdProtocolVersionGet} message CmdProtocolVersionGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdProtocolVersionGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CmdProtocolVersionGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof CmdProtocolVersionGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CmdProtocolVersionGet} CmdProtocolVersionGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdProtocolVersionGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.CmdProtocolVersionGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CmdProtocolVersionGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CmdProtocolVersionGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CmdProtocolVersionGet} CmdProtocolVersionGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdProtocolVersionGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CmdProtocolVersionGet message.\n     * @function verify\n     * @memberof CmdProtocolVersionGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CmdProtocolVersionGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CmdProtocolVersionGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CmdProtocolVersionGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CmdProtocolVersionGet} CmdProtocolVersionGet\n     */\n    CmdProtocolVersionGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.CmdProtocolVersionGet)\n            return object;\n        return new $root.CmdProtocolVersionGet();\n    };\n\n    /**\n     * Creates a plain object from a CmdProtocolVersionGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CmdProtocolVersionGet\n     * @static\n     * @param {CmdProtocolVersionGet} message CmdProtocolVersionGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CmdProtocolVersionGet.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this CmdProtocolVersionGet to JSON.\n     * @function toJSON\n     * @memberof CmdProtocolVersionGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CmdProtocolVersionGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return CmdProtocolVersionGet;\n})();\n\nconst RespProtocolVersionGet = $root.RespProtocolVersionGet = (() => {\n\n    /**\n     * Properties of a RespProtocolVersionGet.\n     * @exports IRespProtocolVersionGet\n     * @interface IRespProtocolVersionGet\n     * @property {number|null} [result] RespProtocolVersionGet result\n     * @property {string|null} [semver] RespProtocolVersionGet semver\n     */\n\n    /**\n     * Constructs a new RespProtocolVersionGet.\n     * @exports RespProtocolVersionGet\n     * @classdesc Represents a RespProtocolVersionGet.\n     * @implements IRespProtocolVersionGet\n     * @constructor\n     * @param {IRespProtocolVersionGet=} [properties] Properties to set\n     */\n    function RespProtocolVersionGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RespProtocolVersionGet result.\n     * @member {number} result\n     * @memberof RespProtocolVersionGet\n     * @instance\n     */\n    RespProtocolVersionGet.prototype.result = 0;\n\n    /**\n     * RespProtocolVersionGet semver.\n     * @member {string} semver\n     * @memberof RespProtocolVersionGet\n     * @instance\n     */\n    RespProtocolVersionGet.prototype.semver = \"\";\n\n    /**\n     * Creates a new RespProtocolVersionGet instance using the specified properties.\n     * @function create\n     * @memberof RespProtocolVersionGet\n     * @static\n     * @param {IRespProtocolVersionGet=} [properties] Properties to set\n     * @returns {RespProtocolVersionGet} RespProtocolVersionGet instance\n     */\n    RespProtocolVersionGet.create = function create(properties) {\n        return new RespProtocolVersionGet(properties);\n    };\n\n    /**\n     * Encodes the specified RespProtocolVersionGet message. Does not implicitly {@link RespProtocolVersionGet.verify|verify} messages.\n     * @function encode\n     * @memberof RespProtocolVersionGet\n     * @static\n     * @param {RespProtocolVersionGet} message RespProtocolVersionGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespProtocolVersionGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n        if (message.semver != null && Object.hasOwnProperty.call(message, \"semver\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.semver);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RespProtocolVersionGet message, length delimited. Does not implicitly {@link RespProtocolVersionGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RespProtocolVersionGet\n     * @static\n     * @param {RespProtocolVersionGet} message RespProtocolVersionGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespProtocolVersionGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RespProtocolVersionGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof RespProtocolVersionGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RespProtocolVersionGet} RespProtocolVersionGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespProtocolVersionGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.RespProtocolVersionGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.result = reader.int32();\n                break;\n            case 2:\n                message.semver = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RespProtocolVersionGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RespProtocolVersionGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RespProtocolVersionGet} RespProtocolVersionGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespProtocolVersionGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RespProtocolVersionGet message.\n     * @function verify\n     * @memberof RespProtocolVersionGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RespProtocolVersionGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            if (!$util.isInteger(message.result))\n                return \"result: integer expected\";\n        if (message.semver != null && message.hasOwnProperty(\"semver\"))\n            if (!$util.isString(message.semver))\n                return \"semver: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a RespProtocolVersionGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RespProtocolVersionGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RespProtocolVersionGet} RespProtocolVersionGet\n     */\n    RespProtocolVersionGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.RespProtocolVersionGet)\n            return object;\n        let message = new $root.RespProtocolVersionGet();\n        if (object.result != null)\n            message.result = object.result | 0;\n        if (object.semver != null)\n            message.semver = String(object.semver);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a RespProtocolVersionGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RespProtocolVersionGet\n     * @static\n     * @param {RespProtocolVersionGet} message RespProtocolVersionGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RespProtocolVersionGet.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.result = 0;\n            object.semver = \"\";\n        }\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            object.result = message.result;\n        if (message.semver != null && message.hasOwnProperty(\"semver\"))\n            object.semver = message.semver;\n        return object;\n    };\n\n    /**\n     * Converts this RespProtocolVersionGet to JSON.\n     * @function toJSON\n     * @memberof RespProtocolVersionGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RespProtocolVersionGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return RespProtocolVersionGet;\n})();\n\nconst CmdConnectionKeyGet = $root.CmdConnectionKeyGet = (() => {\n\n    /**\n     * Properties of a CmdConnectionKeyGet.\n     * @exports ICmdConnectionKeyGet\n     * @interface ICmdConnectionKeyGet\n     */\n\n    /**\n     * Constructs a new CmdConnectionKeyGet.\n     * @exports CmdConnectionKeyGet\n     * @classdesc Represents a CmdConnectionKeyGet.\n     * @implements ICmdConnectionKeyGet\n     * @constructor\n     * @param {ICmdConnectionKeyGet=} [properties] Properties to set\n     */\n    function CmdConnectionKeyGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new CmdConnectionKeyGet instance using the specified properties.\n     * @function create\n     * @memberof CmdConnectionKeyGet\n     * @static\n     * @param {ICmdConnectionKeyGet=} [properties] Properties to set\n     * @returns {CmdConnectionKeyGet} CmdConnectionKeyGet instance\n     */\n    CmdConnectionKeyGet.create = function create(properties) {\n        return new CmdConnectionKeyGet(properties);\n    };\n\n    /**\n     * Encodes the specified CmdConnectionKeyGet message. Does not implicitly {@link CmdConnectionKeyGet.verify|verify} messages.\n     * @function encode\n     * @memberof CmdConnectionKeyGet\n     * @static\n     * @param {CmdConnectionKeyGet} message CmdConnectionKeyGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdConnectionKeyGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CmdConnectionKeyGet message, length delimited. Does not implicitly {@link CmdConnectionKeyGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CmdConnectionKeyGet\n     * @static\n     * @param {CmdConnectionKeyGet} message CmdConnectionKeyGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdConnectionKeyGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CmdConnectionKeyGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof CmdConnectionKeyGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CmdConnectionKeyGet} CmdConnectionKeyGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdConnectionKeyGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.CmdConnectionKeyGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CmdConnectionKeyGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CmdConnectionKeyGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CmdConnectionKeyGet} CmdConnectionKeyGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdConnectionKeyGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CmdConnectionKeyGet message.\n     * @function verify\n     * @memberof CmdConnectionKeyGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CmdConnectionKeyGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CmdConnectionKeyGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CmdConnectionKeyGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CmdConnectionKeyGet} CmdConnectionKeyGet\n     */\n    CmdConnectionKeyGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.CmdConnectionKeyGet)\n            return object;\n        return new $root.CmdConnectionKeyGet();\n    };\n\n    /**\n     * Creates a plain object from a CmdConnectionKeyGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CmdConnectionKeyGet\n     * @static\n     * @param {CmdConnectionKeyGet} message CmdConnectionKeyGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CmdConnectionKeyGet.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this CmdConnectionKeyGet to JSON.\n     * @function toJSON\n     * @memberof CmdConnectionKeyGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CmdConnectionKeyGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return CmdConnectionKeyGet;\n})();\n\nconst RespConnectionKeyGet = $root.RespConnectionKeyGet = (() => {\n\n    /**\n     * Properties of a RespConnectionKeyGet.\n     * @exports IRespConnectionKeyGet\n     * @interface IRespConnectionKeyGet\n     * @property {number|null} [result] RespConnectionKeyGet result\n     * @property {string|null} [key] RespConnectionKeyGet key\n     */\n\n    /**\n     * Constructs a new RespConnectionKeyGet.\n     * @exports RespConnectionKeyGet\n     * @classdesc Represents a RespConnectionKeyGet.\n     * @implements IRespConnectionKeyGet\n     * @constructor\n     * @param {IRespConnectionKeyGet=} [properties] Properties to set\n     */\n    function RespConnectionKeyGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RespConnectionKeyGet result.\n     * @member {number} result\n     * @memberof RespConnectionKeyGet\n     * @instance\n     */\n    RespConnectionKeyGet.prototype.result = 0;\n\n    /**\n     * RespConnectionKeyGet key.\n     * @member {string} key\n     * @memberof RespConnectionKeyGet\n     * @instance\n     */\n    RespConnectionKeyGet.prototype.key = \"\";\n\n    /**\n     * Creates a new RespConnectionKeyGet instance using the specified properties.\n     * @function create\n     * @memberof RespConnectionKeyGet\n     * @static\n     * @param {IRespConnectionKeyGet=} [properties] Properties to set\n     * @returns {RespConnectionKeyGet} RespConnectionKeyGet instance\n     */\n    RespConnectionKeyGet.create = function create(properties) {\n        return new RespConnectionKeyGet(properties);\n    };\n\n    /**\n     * Encodes the specified RespConnectionKeyGet message. Does not implicitly {@link RespConnectionKeyGet.verify|verify} messages.\n     * @function encode\n     * @memberof RespConnectionKeyGet\n     * @static\n     * @param {RespConnectionKeyGet} message RespConnectionKeyGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespConnectionKeyGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n        if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.key);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RespConnectionKeyGet message, length delimited. Does not implicitly {@link RespConnectionKeyGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RespConnectionKeyGet\n     * @static\n     * @param {RespConnectionKeyGet} message RespConnectionKeyGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespConnectionKeyGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RespConnectionKeyGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof RespConnectionKeyGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RespConnectionKeyGet} RespConnectionKeyGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespConnectionKeyGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.RespConnectionKeyGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.result = reader.int32();\n                break;\n            case 2:\n                message.key = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RespConnectionKeyGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RespConnectionKeyGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RespConnectionKeyGet} RespConnectionKeyGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespConnectionKeyGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RespConnectionKeyGet message.\n     * @function verify\n     * @memberof RespConnectionKeyGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RespConnectionKeyGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            if (!$util.isInteger(message.result))\n                return \"result: integer expected\";\n        if (message.key != null && message.hasOwnProperty(\"key\"))\n            if (!$util.isString(message.key))\n                return \"key: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a RespConnectionKeyGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RespConnectionKeyGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RespConnectionKeyGet} RespConnectionKeyGet\n     */\n    RespConnectionKeyGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.RespConnectionKeyGet)\n            return object;\n        let message = new $root.RespConnectionKeyGet();\n        if (object.result != null)\n            message.result = object.result | 0;\n        if (object.key != null)\n            message.key = String(object.key);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a RespConnectionKeyGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RespConnectionKeyGet\n     * @static\n     * @param {RespConnectionKeyGet} message RespConnectionKeyGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RespConnectionKeyGet.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.result = 0;\n            object.key = \"\";\n        }\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            object.result = message.result;\n        if (message.key != null && message.hasOwnProperty(\"key\"))\n            object.key = message.key;\n        return object;\n    };\n\n    /**\n     * Converts this RespConnectionKeyGet to JSON.\n     * @function toJSON\n     * @memberof RespConnectionKeyGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RespConnectionKeyGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return RespConnectionKeyGet;\n})();\n\nconst CmdConnectionKeyGen = $root.CmdConnectionKeyGen = (() => {\n\n    /**\n     * Properties of a CmdConnectionKeyGen.\n     * @exports ICmdConnectionKeyGen\n     * @interface ICmdConnectionKeyGen\n     * @property {number|null} [length] CmdConnectionKeyGen length\n     */\n\n    /**\n     * Constructs a new CmdConnectionKeyGen.\n     * @exports CmdConnectionKeyGen\n     * @classdesc Represents a CmdConnectionKeyGen.\n     * @implements ICmdConnectionKeyGen\n     * @constructor\n     * @param {ICmdConnectionKeyGen=} [properties] Properties to set\n     */\n    function CmdConnectionKeyGen(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CmdConnectionKeyGen length.\n     * @member {number} length\n     * @memberof CmdConnectionKeyGen\n     * @instance\n     */\n    CmdConnectionKeyGen.prototype.length = 0;\n\n    /**\n     * Creates a new CmdConnectionKeyGen instance using the specified properties.\n     * @function create\n     * @memberof CmdConnectionKeyGen\n     * @static\n     * @param {ICmdConnectionKeyGen=} [properties] Properties to set\n     * @returns {CmdConnectionKeyGen} CmdConnectionKeyGen instance\n     */\n    CmdConnectionKeyGen.create = function create(properties) {\n        return new CmdConnectionKeyGen(properties);\n    };\n\n    /**\n     * Encodes the specified CmdConnectionKeyGen message. Does not implicitly {@link CmdConnectionKeyGen.verify|verify} messages.\n     * @function encode\n     * @memberof CmdConnectionKeyGen\n     * @static\n     * @param {CmdConnectionKeyGen} message CmdConnectionKeyGen message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdConnectionKeyGen.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.length != null && Object.hasOwnProperty.call(message, \"length\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.length);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CmdConnectionKeyGen message, length delimited. Does not implicitly {@link CmdConnectionKeyGen.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CmdConnectionKeyGen\n     * @static\n     * @param {CmdConnectionKeyGen} message CmdConnectionKeyGen message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdConnectionKeyGen.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CmdConnectionKeyGen message from the specified reader or buffer.\n     * @function decode\n     * @memberof CmdConnectionKeyGen\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CmdConnectionKeyGen} CmdConnectionKeyGen\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdConnectionKeyGen.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.CmdConnectionKeyGen();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.length = reader.uint32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CmdConnectionKeyGen message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CmdConnectionKeyGen\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CmdConnectionKeyGen} CmdConnectionKeyGen\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdConnectionKeyGen.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CmdConnectionKeyGen message.\n     * @function verify\n     * @memberof CmdConnectionKeyGen\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CmdConnectionKeyGen.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.length != null && message.hasOwnProperty(\"length\"))\n            if (!$util.isInteger(message.length))\n                return \"length: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CmdConnectionKeyGen message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CmdConnectionKeyGen\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CmdConnectionKeyGen} CmdConnectionKeyGen\n     */\n    CmdConnectionKeyGen.fromObject = function fromObject(object) {\n        if (object instanceof $root.CmdConnectionKeyGen)\n            return object;\n        let message = new $root.CmdConnectionKeyGen();\n        if (object.length != null)\n            message.length = object.length >>> 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CmdConnectionKeyGen message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CmdConnectionKeyGen\n     * @static\n     * @param {CmdConnectionKeyGen} message CmdConnectionKeyGen\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CmdConnectionKeyGen.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults)\n            object.length = 0;\n        if (message.length != null && message.hasOwnProperty(\"length\"))\n            object.length = message.length;\n        return object;\n    };\n\n    /**\n     * Converts this CmdConnectionKeyGen to JSON.\n     * @function toJSON\n     * @memberof CmdConnectionKeyGen\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CmdConnectionKeyGen.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return CmdConnectionKeyGen;\n})();\n\nconst RespConnectionKeyGen = $root.RespConnectionKeyGen = (() => {\n\n    /**\n     * Properties of a RespConnectionKeyGen.\n     * @exports IRespConnectionKeyGen\n     * @interface IRespConnectionKeyGen\n     * @property {number|null} [result] RespConnectionKeyGen result\n     * @property {string|null} [key] RespConnectionKeyGen key\n     */\n\n    /**\n     * Constructs a new RespConnectionKeyGen.\n     * @exports RespConnectionKeyGen\n     * @classdesc Represents a RespConnectionKeyGen.\n     * @implements IRespConnectionKeyGen\n     * @constructor\n     * @param {IRespConnectionKeyGen=} [properties] Properties to set\n     */\n    function RespConnectionKeyGen(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RespConnectionKeyGen result.\n     * @member {number} result\n     * @memberof RespConnectionKeyGen\n     * @instance\n     */\n    RespConnectionKeyGen.prototype.result = 0;\n\n    /**\n     * RespConnectionKeyGen key.\n     * @member {string} key\n     * @memberof RespConnectionKeyGen\n     * @instance\n     */\n    RespConnectionKeyGen.prototype.key = \"\";\n\n    /**\n     * Creates a new RespConnectionKeyGen instance using the specified properties.\n     * @function create\n     * @memberof RespConnectionKeyGen\n     * @static\n     * @param {IRespConnectionKeyGen=} [properties] Properties to set\n     * @returns {RespConnectionKeyGen} RespConnectionKeyGen instance\n     */\n    RespConnectionKeyGen.create = function create(properties) {\n        return new RespConnectionKeyGen(properties);\n    };\n\n    /**\n     * Encodes the specified RespConnectionKeyGen message. Does not implicitly {@link RespConnectionKeyGen.verify|verify} messages.\n     * @function encode\n     * @memberof RespConnectionKeyGen\n     * @static\n     * @param {RespConnectionKeyGen} message RespConnectionKeyGen message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespConnectionKeyGen.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n        if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.key);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RespConnectionKeyGen message, length delimited. Does not implicitly {@link RespConnectionKeyGen.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RespConnectionKeyGen\n     * @static\n     * @param {RespConnectionKeyGen} message RespConnectionKeyGen message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespConnectionKeyGen.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RespConnectionKeyGen message from the specified reader or buffer.\n     * @function decode\n     * @memberof RespConnectionKeyGen\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RespConnectionKeyGen} RespConnectionKeyGen\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespConnectionKeyGen.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.RespConnectionKeyGen();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.result = reader.int32();\n                break;\n            case 2:\n                message.key = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RespConnectionKeyGen message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RespConnectionKeyGen\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RespConnectionKeyGen} RespConnectionKeyGen\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespConnectionKeyGen.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RespConnectionKeyGen message.\n     * @function verify\n     * @memberof RespConnectionKeyGen\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RespConnectionKeyGen.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            if (!$util.isInteger(message.result))\n                return \"result: integer expected\";\n        if (message.key != null && message.hasOwnProperty(\"key\"))\n            if (!$util.isString(message.key))\n                return \"key: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a RespConnectionKeyGen message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RespConnectionKeyGen\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RespConnectionKeyGen} RespConnectionKeyGen\n     */\n    RespConnectionKeyGen.fromObject = function fromObject(object) {\n        if (object instanceof $root.RespConnectionKeyGen)\n            return object;\n        let message = new $root.RespConnectionKeyGen();\n        if (object.result != null)\n            message.result = object.result | 0;\n        if (object.key != null)\n            message.key = String(object.key);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a RespConnectionKeyGen message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RespConnectionKeyGen\n     * @static\n     * @param {RespConnectionKeyGen} message RespConnectionKeyGen\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RespConnectionKeyGen.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.result = 0;\n            object.key = \"\";\n        }\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            object.result = message.result;\n        if (message.key != null && message.hasOwnProperty(\"key\"))\n            object.key = message.key;\n        return object;\n    };\n\n    /**\n     * Converts this RespConnectionKeyGen to JSON.\n     * @function toJSON\n     * @memberof RespConnectionKeyGen\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RespConnectionKeyGen.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return RespConnectionKeyGen;\n})();\n\nconst CmdSerialNumberGet = $root.CmdSerialNumberGet = (() => {\n\n    /**\n     * Properties of a CmdSerialNumberGet.\n     * @exports ICmdSerialNumberGet\n     * @interface ICmdSerialNumberGet\n     */\n\n    /**\n     * Constructs a new CmdSerialNumberGet.\n     * @exports CmdSerialNumberGet\n     * @classdesc Represents a CmdSerialNumberGet.\n     * @implements ICmdSerialNumberGet\n     * @constructor\n     * @param {ICmdSerialNumberGet=} [properties] Properties to set\n     */\n    function CmdSerialNumberGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new CmdSerialNumberGet instance using the specified properties.\n     * @function create\n     * @memberof CmdSerialNumberGet\n     * @static\n     * @param {ICmdSerialNumberGet=} [properties] Properties to set\n     * @returns {CmdSerialNumberGet} CmdSerialNumberGet instance\n     */\n    CmdSerialNumberGet.create = function create(properties) {\n        return new CmdSerialNumberGet(properties);\n    };\n\n    /**\n     * Encodes the specified CmdSerialNumberGet message. Does not implicitly {@link CmdSerialNumberGet.verify|verify} messages.\n     * @function encode\n     * @memberof CmdSerialNumberGet\n     * @static\n     * @param {CmdSerialNumberGet} message CmdSerialNumberGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdSerialNumberGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CmdSerialNumberGet message, length delimited. Does not implicitly {@link CmdSerialNumberGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CmdSerialNumberGet\n     * @static\n     * @param {CmdSerialNumberGet} message CmdSerialNumberGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdSerialNumberGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CmdSerialNumberGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof CmdSerialNumberGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CmdSerialNumberGet} CmdSerialNumberGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdSerialNumberGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.CmdSerialNumberGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CmdSerialNumberGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CmdSerialNumberGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CmdSerialNumberGet} CmdSerialNumberGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdSerialNumberGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CmdSerialNumberGet message.\n     * @function verify\n     * @memberof CmdSerialNumberGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CmdSerialNumberGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CmdSerialNumberGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CmdSerialNumberGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CmdSerialNumberGet} CmdSerialNumberGet\n     */\n    CmdSerialNumberGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.CmdSerialNumberGet)\n            return object;\n        return new $root.CmdSerialNumberGet();\n    };\n\n    /**\n     * Creates a plain object from a CmdSerialNumberGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CmdSerialNumberGet\n     * @static\n     * @param {CmdSerialNumberGet} message CmdSerialNumberGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CmdSerialNumberGet.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this CmdSerialNumberGet to JSON.\n     * @function toJSON\n     * @memberof CmdSerialNumberGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CmdSerialNumberGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return CmdSerialNumberGet;\n})();\n\nconst RespSerialNumberGet = $root.RespSerialNumberGet = (() => {\n\n    /**\n     * Properties of a RespSerialNumberGet.\n     * @exports IRespSerialNumberGet\n     * @interface IRespSerialNumberGet\n     * @property {number|null} [result] RespSerialNumberGet result\n     * @property {number|null} [serialNumber] RespSerialNumberGet serialNumber\n     */\n\n    /**\n     * Constructs a new RespSerialNumberGet.\n     * @exports RespSerialNumberGet\n     * @classdesc Represents a RespSerialNumberGet.\n     * @implements IRespSerialNumberGet\n     * @constructor\n     * @param {IRespSerialNumberGet=} [properties] Properties to set\n     */\n    function RespSerialNumberGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RespSerialNumberGet result.\n     * @member {number} result\n     * @memberof RespSerialNumberGet\n     * @instance\n     */\n    RespSerialNumberGet.prototype.result = 0;\n\n    /**\n     * RespSerialNumberGet serialNumber.\n     * @member {number} serialNumber\n     * @memberof RespSerialNumberGet\n     * @instance\n     */\n    RespSerialNumberGet.prototype.serialNumber = 0;\n\n    /**\n     * Creates a new RespSerialNumberGet instance using the specified properties.\n     * @function create\n     * @memberof RespSerialNumberGet\n     * @static\n     * @param {IRespSerialNumberGet=} [properties] Properties to set\n     * @returns {RespSerialNumberGet} RespSerialNumberGet instance\n     */\n    RespSerialNumberGet.create = function create(properties) {\n        return new RespSerialNumberGet(properties);\n    };\n\n    /**\n     * Encodes the specified RespSerialNumberGet message. Does not implicitly {@link RespSerialNumberGet.verify|verify} messages.\n     * @function encode\n     * @memberof RespSerialNumberGet\n     * @static\n     * @param {RespSerialNumberGet} message RespSerialNumberGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespSerialNumberGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n        if (message.serialNumber != null && Object.hasOwnProperty.call(message, \"serialNumber\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.serialNumber);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RespSerialNumberGet message, length delimited. Does not implicitly {@link RespSerialNumberGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RespSerialNumberGet\n     * @static\n     * @param {RespSerialNumberGet} message RespSerialNumberGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespSerialNumberGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RespSerialNumberGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof RespSerialNumberGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RespSerialNumberGet} RespSerialNumberGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespSerialNumberGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.RespSerialNumberGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.result = reader.int32();\n                break;\n            case 2:\n                message.serialNumber = reader.uint32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RespSerialNumberGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RespSerialNumberGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RespSerialNumberGet} RespSerialNumberGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespSerialNumberGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RespSerialNumberGet message.\n     * @function verify\n     * @memberof RespSerialNumberGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RespSerialNumberGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            if (!$util.isInteger(message.result))\n                return \"result: integer expected\";\n        if (message.serialNumber != null && message.hasOwnProperty(\"serialNumber\"))\n            if (!$util.isInteger(message.serialNumber))\n                return \"serialNumber: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a RespSerialNumberGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RespSerialNumberGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RespSerialNumberGet} RespSerialNumberGet\n     */\n    RespSerialNumberGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.RespSerialNumberGet)\n            return object;\n        let message = new $root.RespSerialNumberGet();\n        if (object.result != null)\n            message.result = object.result | 0;\n        if (object.serialNumber != null)\n            message.serialNumber = object.serialNumber >>> 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a RespSerialNumberGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RespSerialNumberGet\n     * @static\n     * @param {RespSerialNumberGet} message RespSerialNumberGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RespSerialNumberGet.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.result = 0;\n            object.serialNumber = 0;\n        }\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            object.result = message.result;\n        if (message.serialNumber != null && message.hasOwnProperty(\"serialNumber\"))\n            object.serialNumber = message.serialNumber;\n        return object;\n    };\n\n    /**\n     * Converts this RespSerialNumberGet to JSON.\n     * @function toJSON\n     * @memberof RespSerialNumberGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RespSerialNumberGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return RespSerialNumberGet;\n})();\n\nconst CmdProductionDateGet = $root.CmdProductionDateGet = (() => {\n\n    /**\n     * Properties of a CmdProductionDateGet.\n     * @exports ICmdProductionDateGet\n     * @interface ICmdProductionDateGet\n     */\n\n    /**\n     * Constructs a new CmdProductionDateGet.\n     * @exports CmdProductionDateGet\n     * @classdesc Represents a CmdProductionDateGet.\n     * @implements ICmdProductionDateGet\n     * @constructor\n     * @param {ICmdProductionDateGet=} [properties] Properties to set\n     */\n    function CmdProductionDateGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new CmdProductionDateGet instance using the specified properties.\n     * @function create\n     * @memberof CmdProductionDateGet\n     * @static\n     * @param {ICmdProductionDateGet=} [properties] Properties to set\n     * @returns {CmdProductionDateGet} CmdProductionDateGet instance\n     */\n    CmdProductionDateGet.create = function create(properties) {\n        return new CmdProductionDateGet(properties);\n    };\n\n    /**\n     * Encodes the specified CmdProductionDateGet message. Does not implicitly {@link CmdProductionDateGet.verify|verify} messages.\n     * @function encode\n     * @memberof CmdProductionDateGet\n     * @static\n     * @param {CmdProductionDateGet} message CmdProductionDateGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdProductionDateGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CmdProductionDateGet message, length delimited. Does not implicitly {@link CmdProductionDateGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CmdProductionDateGet\n     * @static\n     * @param {CmdProductionDateGet} message CmdProductionDateGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdProductionDateGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CmdProductionDateGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof CmdProductionDateGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CmdProductionDateGet} CmdProductionDateGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdProductionDateGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.CmdProductionDateGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CmdProductionDateGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CmdProductionDateGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CmdProductionDateGet} CmdProductionDateGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdProductionDateGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CmdProductionDateGet message.\n     * @function verify\n     * @memberof CmdProductionDateGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CmdProductionDateGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CmdProductionDateGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CmdProductionDateGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CmdProductionDateGet} CmdProductionDateGet\n     */\n    CmdProductionDateGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.CmdProductionDateGet)\n            return object;\n        return new $root.CmdProductionDateGet();\n    };\n\n    /**\n     * Creates a plain object from a CmdProductionDateGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CmdProductionDateGet\n     * @static\n     * @param {CmdProductionDateGet} message CmdProductionDateGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CmdProductionDateGet.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this CmdProductionDateGet to JSON.\n     * @function toJSON\n     * @memberof CmdProductionDateGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CmdProductionDateGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return CmdProductionDateGet;\n})();\n\nconst RespProductionDateGet = $root.RespProductionDateGet = (() => {\n\n    /**\n     * Properties of a RespProductionDateGet.\n     * @exports IRespProductionDateGet\n     * @interface IRespProductionDateGet\n     * @property {number|null} [result] RespProductionDateGet result\n     * @property {string|null} [productionDate] RespProductionDateGet productionDate\n     */\n\n    /**\n     * Constructs a new RespProductionDateGet.\n     * @exports RespProductionDateGet\n     * @classdesc Represents a RespProductionDateGet.\n     * @implements IRespProductionDateGet\n     * @constructor\n     * @param {IRespProductionDateGet=} [properties] Properties to set\n     */\n    function RespProductionDateGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RespProductionDateGet result.\n     * @member {number} result\n     * @memberof RespProductionDateGet\n     * @instance\n     */\n    RespProductionDateGet.prototype.result = 0;\n\n    /**\n     * RespProductionDateGet productionDate.\n     * @member {string} productionDate\n     * @memberof RespProductionDateGet\n     * @instance\n     */\n    RespProductionDateGet.prototype.productionDate = \"\";\n\n    /**\n     * Creates a new RespProductionDateGet instance using the specified properties.\n     * @function create\n     * @memberof RespProductionDateGet\n     * @static\n     * @param {IRespProductionDateGet=} [properties] Properties to set\n     * @returns {RespProductionDateGet} RespProductionDateGet instance\n     */\n    RespProductionDateGet.create = function create(properties) {\n        return new RespProductionDateGet(properties);\n    };\n\n    /**\n     * Encodes the specified RespProductionDateGet message. Does not implicitly {@link RespProductionDateGet.verify|verify} messages.\n     * @function encode\n     * @memberof RespProductionDateGet\n     * @static\n     * @param {RespProductionDateGet} message RespProductionDateGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespProductionDateGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n        if (message.productionDate != null && Object.hasOwnProperty.call(message, \"productionDate\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.productionDate);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RespProductionDateGet message, length delimited. Does not implicitly {@link RespProductionDateGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RespProductionDateGet\n     * @static\n     * @param {RespProductionDateGet} message RespProductionDateGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespProductionDateGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RespProductionDateGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof RespProductionDateGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RespProductionDateGet} RespProductionDateGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespProductionDateGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.RespProductionDateGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.result = reader.int32();\n                break;\n            case 2:\n                message.productionDate = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RespProductionDateGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RespProductionDateGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RespProductionDateGet} RespProductionDateGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespProductionDateGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RespProductionDateGet message.\n     * @function verify\n     * @memberof RespProductionDateGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RespProductionDateGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            if (!$util.isInteger(message.result))\n                return \"result: integer expected\";\n        if (message.productionDate != null && message.hasOwnProperty(\"productionDate\"))\n            if (!$util.isString(message.productionDate))\n                return \"productionDate: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a RespProductionDateGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RespProductionDateGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RespProductionDateGet} RespProductionDateGet\n     */\n    RespProductionDateGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.RespProductionDateGet)\n            return object;\n        let message = new $root.RespProductionDateGet();\n        if (object.result != null)\n            message.result = object.result | 0;\n        if (object.productionDate != null)\n            message.productionDate = String(object.productionDate);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a RespProductionDateGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RespProductionDateGet\n     * @static\n     * @param {RespProductionDateGet} message RespProductionDateGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RespProductionDateGet.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.result = 0;\n            object.productionDate = \"\";\n        }\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            object.result = message.result;\n        if (message.productionDate != null && message.hasOwnProperty(\"productionDate\"))\n            object.productionDate = message.productionDate;\n        return object;\n    };\n\n    /**\n     * Converts this RespProductionDateGet to JSON.\n     * @function toJSON\n     * @memberof RespProductionDateGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RespProductionDateGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return RespProductionDateGet;\n})();\n\nconst CmdHardwareVersionGet = $root.CmdHardwareVersionGet = (() => {\n\n    /**\n     * Properties of a CmdHardwareVersionGet.\n     * @exports ICmdHardwareVersionGet\n     * @interface ICmdHardwareVersionGet\n     */\n\n    /**\n     * Constructs a new CmdHardwareVersionGet.\n     * @exports CmdHardwareVersionGet\n     * @classdesc Represents a CmdHardwareVersionGet.\n     * @implements ICmdHardwareVersionGet\n     * @constructor\n     * @param {ICmdHardwareVersionGet=} [properties] Properties to set\n     */\n    function CmdHardwareVersionGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new CmdHardwareVersionGet instance using the specified properties.\n     * @function create\n     * @memberof CmdHardwareVersionGet\n     * @static\n     * @param {ICmdHardwareVersionGet=} [properties] Properties to set\n     * @returns {CmdHardwareVersionGet} CmdHardwareVersionGet instance\n     */\n    CmdHardwareVersionGet.create = function create(properties) {\n        return new CmdHardwareVersionGet(properties);\n    };\n\n    /**\n     * Encodes the specified CmdHardwareVersionGet message. Does not implicitly {@link CmdHardwareVersionGet.verify|verify} messages.\n     * @function encode\n     * @memberof CmdHardwareVersionGet\n     * @static\n     * @param {CmdHardwareVersionGet} message CmdHardwareVersionGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdHardwareVersionGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CmdHardwareVersionGet message, length delimited. Does not implicitly {@link CmdHardwareVersionGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CmdHardwareVersionGet\n     * @static\n     * @param {CmdHardwareVersionGet} message CmdHardwareVersionGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdHardwareVersionGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CmdHardwareVersionGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof CmdHardwareVersionGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CmdHardwareVersionGet} CmdHardwareVersionGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdHardwareVersionGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.CmdHardwareVersionGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CmdHardwareVersionGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CmdHardwareVersionGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CmdHardwareVersionGet} CmdHardwareVersionGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdHardwareVersionGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CmdHardwareVersionGet message.\n     * @function verify\n     * @memberof CmdHardwareVersionGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CmdHardwareVersionGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CmdHardwareVersionGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CmdHardwareVersionGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CmdHardwareVersionGet} CmdHardwareVersionGet\n     */\n    CmdHardwareVersionGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.CmdHardwareVersionGet)\n            return object;\n        return new $root.CmdHardwareVersionGet();\n    };\n\n    /**\n     * Creates a plain object from a CmdHardwareVersionGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CmdHardwareVersionGet\n     * @static\n     * @param {CmdHardwareVersionGet} message CmdHardwareVersionGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CmdHardwareVersionGet.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this CmdHardwareVersionGet to JSON.\n     * @function toJSON\n     * @memberof CmdHardwareVersionGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CmdHardwareVersionGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return CmdHardwareVersionGet;\n})();\n\nconst RespHardwareVersionGet = $root.RespHardwareVersionGet = (() => {\n\n    /**\n     * Properties of a RespHardwareVersionGet.\n     * @exports IRespHardwareVersionGet\n     * @interface IRespHardwareVersionGet\n     * @property {number|null} [result] RespHardwareVersionGet result\n     * @property {number|null} [hardwareVersion] RespHardwareVersionGet hardwareVersion\n     */\n\n    /**\n     * Constructs a new RespHardwareVersionGet.\n     * @exports RespHardwareVersionGet\n     * @classdesc Represents a RespHardwareVersionGet.\n     * @implements IRespHardwareVersionGet\n     * @constructor\n     * @param {IRespHardwareVersionGet=} [properties] Properties to set\n     */\n    function RespHardwareVersionGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RespHardwareVersionGet result.\n     * @member {number} result\n     * @memberof RespHardwareVersionGet\n     * @instance\n     */\n    RespHardwareVersionGet.prototype.result = 0;\n\n    /**\n     * RespHardwareVersionGet hardwareVersion.\n     * @member {number} hardwareVersion\n     * @memberof RespHardwareVersionGet\n     * @instance\n     */\n    RespHardwareVersionGet.prototype.hardwareVersion = 0;\n\n    /**\n     * Creates a new RespHardwareVersionGet instance using the specified properties.\n     * @function create\n     * @memberof RespHardwareVersionGet\n     * @static\n     * @param {IRespHardwareVersionGet=} [properties] Properties to set\n     * @returns {RespHardwareVersionGet} RespHardwareVersionGet instance\n     */\n    RespHardwareVersionGet.create = function create(properties) {\n        return new RespHardwareVersionGet(properties);\n    };\n\n    /**\n     * Encodes the specified RespHardwareVersionGet message. Does not implicitly {@link RespHardwareVersionGet.verify|verify} messages.\n     * @function encode\n     * @memberof RespHardwareVersionGet\n     * @static\n     * @param {RespHardwareVersionGet} message RespHardwareVersionGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespHardwareVersionGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n        if (message.hardwareVersion != null && Object.hasOwnProperty.call(message, \"hardwareVersion\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.hardwareVersion);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RespHardwareVersionGet message, length delimited. Does not implicitly {@link RespHardwareVersionGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RespHardwareVersionGet\n     * @static\n     * @param {RespHardwareVersionGet} message RespHardwareVersionGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespHardwareVersionGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RespHardwareVersionGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof RespHardwareVersionGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RespHardwareVersionGet} RespHardwareVersionGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespHardwareVersionGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.RespHardwareVersionGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.result = reader.int32();\n                break;\n            case 2:\n                message.hardwareVersion = reader.uint32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RespHardwareVersionGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RespHardwareVersionGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RespHardwareVersionGet} RespHardwareVersionGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespHardwareVersionGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RespHardwareVersionGet message.\n     * @function verify\n     * @memberof RespHardwareVersionGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RespHardwareVersionGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            if (!$util.isInteger(message.result))\n                return \"result: integer expected\";\n        if (message.hardwareVersion != null && message.hasOwnProperty(\"hardwareVersion\"))\n            if (!$util.isInteger(message.hardwareVersion))\n                return \"hardwareVersion: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a RespHardwareVersionGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RespHardwareVersionGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RespHardwareVersionGet} RespHardwareVersionGet\n     */\n    RespHardwareVersionGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.RespHardwareVersionGet)\n            return object;\n        let message = new $root.RespHardwareVersionGet();\n        if (object.result != null)\n            message.result = object.result | 0;\n        if (object.hardwareVersion != null)\n            message.hardwareVersion = object.hardwareVersion >>> 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a RespHardwareVersionGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RespHardwareVersionGet\n     * @static\n     * @param {RespHardwareVersionGet} message RespHardwareVersionGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RespHardwareVersionGet.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.result = 0;\n            object.hardwareVersion = 0;\n        }\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            object.result = message.result;\n        if (message.hardwareVersion != null && message.hasOwnProperty(\"hardwareVersion\"))\n            object.hardwareVersion = message.hardwareVersion;\n        return object;\n    };\n\n    /**\n     * Converts this RespHardwareVersionGet to JSON.\n     * @function toJSON\n     * @memberof RespHardwareVersionGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RespHardwareVersionGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return RespHardwareVersionGet;\n})();\n\nconst CmdPcbaVersionGet = $root.CmdPcbaVersionGet = (() => {\n\n    /**\n     * Properties of a CmdPcbaVersionGet.\n     * @exports ICmdPcbaVersionGet\n     * @interface ICmdPcbaVersionGet\n     */\n\n    /**\n     * Constructs a new CmdPcbaVersionGet.\n     * @exports CmdPcbaVersionGet\n     * @classdesc Represents a CmdPcbaVersionGet.\n     * @implements ICmdPcbaVersionGet\n     * @constructor\n     * @param {ICmdPcbaVersionGet=} [properties] Properties to set\n     */\n    function CmdPcbaVersionGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new CmdPcbaVersionGet instance using the specified properties.\n     * @function create\n     * @memberof CmdPcbaVersionGet\n     * @static\n     * @param {ICmdPcbaVersionGet=} [properties] Properties to set\n     * @returns {CmdPcbaVersionGet} CmdPcbaVersionGet instance\n     */\n    CmdPcbaVersionGet.create = function create(properties) {\n        return new CmdPcbaVersionGet(properties);\n    };\n\n    /**\n     * Encodes the specified CmdPcbaVersionGet message. Does not implicitly {@link CmdPcbaVersionGet.verify|verify} messages.\n     * @function encode\n     * @memberof CmdPcbaVersionGet\n     * @static\n     * @param {CmdPcbaVersionGet} message CmdPcbaVersionGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdPcbaVersionGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CmdPcbaVersionGet message, length delimited. Does not implicitly {@link CmdPcbaVersionGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CmdPcbaVersionGet\n     * @static\n     * @param {CmdPcbaVersionGet} message CmdPcbaVersionGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdPcbaVersionGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CmdPcbaVersionGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof CmdPcbaVersionGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CmdPcbaVersionGet} CmdPcbaVersionGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdPcbaVersionGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.CmdPcbaVersionGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CmdPcbaVersionGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CmdPcbaVersionGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CmdPcbaVersionGet} CmdPcbaVersionGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdPcbaVersionGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CmdPcbaVersionGet message.\n     * @function verify\n     * @memberof CmdPcbaVersionGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CmdPcbaVersionGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CmdPcbaVersionGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CmdPcbaVersionGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CmdPcbaVersionGet} CmdPcbaVersionGet\n     */\n    CmdPcbaVersionGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.CmdPcbaVersionGet)\n            return object;\n        return new $root.CmdPcbaVersionGet();\n    };\n\n    /**\n     * Creates a plain object from a CmdPcbaVersionGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CmdPcbaVersionGet\n     * @static\n     * @param {CmdPcbaVersionGet} message CmdPcbaVersionGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CmdPcbaVersionGet.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this CmdPcbaVersionGet to JSON.\n     * @function toJSON\n     * @memberof CmdPcbaVersionGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CmdPcbaVersionGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return CmdPcbaVersionGet;\n})();\n\nconst RespPcbaVersionGet = $root.RespPcbaVersionGet = (() => {\n\n    /**\n     * Properties of a RespPcbaVersionGet.\n     * @exports IRespPcbaVersionGet\n     * @interface IRespPcbaVersionGet\n     * @property {number|null} [result] RespPcbaVersionGet result\n     * @property {string|null} [PcbaVersion] RespPcbaVersionGet PcbaVersion\n     */\n\n    /**\n     * Constructs a new RespPcbaVersionGet.\n     * @exports RespPcbaVersionGet\n     * @classdesc Represents a RespPcbaVersionGet.\n     * @implements IRespPcbaVersionGet\n     * @constructor\n     * @param {IRespPcbaVersionGet=} [properties] Properties to set\n     */\n    function RespPcbaVersionGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RespPcbaVersionGet result.\n     * @member {number} result\n     * @memberof RespPcbaVersionGet\n     * @instance\n     */\n    RespPcbaVersionGet.prototype.result = 0;\n\n    /**\n     * RespPcbaVersionGet PcbaVersion.\n     * @member {string} PcbaVersion\n     * @memberof RespPcbaVersionGet\n     * @instance\n     */\n    RespPcbaVersionGet.prototype.PcbaVersion = \"\";\n\n    /**\n     * Creates a new RespPcbaVersionGet instance using the specified properties.\n     * @function create\n     * @memberof RespPcbaVersionGet\n     * @static\n     * @param {IRespPcbaVersionGet=} [properties] Properties to set\n     * @returns {RespPcbaVersionGet} RespPcbaVersionGet instance\n     */\n    RespPcbaVersionGet.create = function create(properties) {\n        return new RespPcbaVersionGet(properties);\n    };\n\n    /**\n     * Encodes the specified RespPcbaVersionGet message. Does not implicitly {@link RespPcbaVersionGet.verify|verify} messages.\n     * @function encode\n     * @memberof RespPcbaVersionGet\n     * @static\n     * @param {RespPcbaVersionGet} message RespPcbaVersionGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespPcbaVersionGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n        if (message.PcbaVersion != null && Object.hasOwnProperty.call(message, \"PcbaVersion\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.PcbaVersion);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RespPcbaVersionGet message, length delimited. Does not implicitly {@link RespPcbaVersionGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RespPcbaVersionGet\n     * @static\n     * @param {RespPcbaVersionGet} message RespPcbaVersionGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespPcbaVersionGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RespPcbaVersionGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof RespPcbaVersionGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RespPcbaVersionGet} RespPcbaVersionGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespPcbaVersionGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.RespPcbaVersionGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.result = reader.int32();\n                break;\n            case 2:\n                message.PcbaVersion = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RespPcbaVersionGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RespPcbaVersionGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RespPcbaVersionGet} RespPcbaVersionGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespPcbaVersionGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RespPcbaVersionGet message.\n     * @function verify\n     * @memberof RespPcbaVersionGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RespPcbaVersionGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            if (!$util.isInteger(message.result))\n                return \"result: integer expected\";\n        if (message.PcbaVersion != null && message.hasOwnProperty(\"PcbaVersion\"))\n            if (!$util.isString(message.PcbaVersion))\n                return \"PcbaVersion: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a RespPcbaVersionGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RespPcbaVersionGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RespPcbaVersionGet} RespPcbaVersionGet\n     */\n    RespPcbaVersionGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.RespPcbaVersionGet)\n            return object;\n        let message = new $root.RespPcbaVersionGet();\n        if (object.result != null)\n            message.result = object.result | 0;\n        if (object.PcbaVersion != null)\n            message.PcbaVersion = String(object.PcbaVersion);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a RespPcbaVersionGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RespPcbaVersionGet\n     * @static\n     * @param {RespPcbaVersionGet} message RespPcbaVersionGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RespPcbaVersionGet.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.result = 0;\n            object.PcbaVersion = \"\";\n        }\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            object.result = message.result;\n        if (message.PcbaVersion != null && message.hasOwnProperty(\"PcbaVersion\"))\n            object.PcbaVersion = message.PcbaVersion;\n        return object;\n    };\n\n    /**\n     * Converts this RespPcbaVersionGet to JSON.\n     * @function toJSON\n     * @memberof RespPcbaVersionGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RespPcbaVersionGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return RespPcbaVersionGet;\n})();\n\nconst CmdModelGet = $root.CmdModelGet = (() => {\n\n    /**\n     * Properties of a CmdModelGet.\n     * @exports ICmdModelGet\n     * @interface ICmdModelGet\n     */\n\n    /**\n     * Constructs a new CmdModelGet.\n     * @exports CmdModelGet\n     * @classdesc Represents a CmdModelGet.\n     * @implements ICmdModelGet\n     * @constructor\n     * @param {ICmdModelGet=} [properties] Properties to set\n     */\n    function CmdModelGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new CmdModelGet instance using the specified properties.\n     * @function create\n     * @memberof CmdModelGet\n     * @static\n     * @param {ICmdModelGet=} [properties] Properties to set\n     * @returns {CmdModelGet} CmdModelGet instance\n     */\n    CmdModelGet.create = function create(properties) {\n        return new CmdModelGet(properties);\n    };\n\n    /**\n     * Encodes the specified CmdModelGet message. Does not implicitly {@link CmdModelGet.verify|verify} messages.\n     * @function encode\n     * @memberof CmdModelGet\n     * @static\n     * @param {CmdModelGet} message CmdModelGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdModelGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CmdModelGet message, length delimited. Does not implicitly {@link CmdModelGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CmdModelGet\n     * @static\n     * @param {CmdModelGet} message CmdModelGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdModelGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CmdModelGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof CmdModelGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CmdModelGet} CmdModelGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdModelGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.CmdModelGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CmdModelGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CmdModelGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CmdModelGet} CmdModelGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdModelGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CmdModelGet message.\n     * @function verify\n     * @memberof CmdModelGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CmdModelGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CmdModelGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CmdModelGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CmdModelGet} CmdModelGet\n     */\n    CmdModelGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.CmdModelGet)\n            return object;\n        return new $root.CmdModelGet();\n    };\n\n    /**\n     * Creates a plain object from a CmdModelGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CmdModelGet\n     * @static\n     * @param {CmdModelGet} message CmdModelGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CmdModelGet.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this CmdModelGet to JSON.\n     * @function toJSON\n     * @memberof CmdModelGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CmdModelGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return CmdModelGet;\n})();\n\nconst RespModelGet = $root.RespModelGet = (() => {\n\n    /**\n     * Properties of a RespModelGet.\n     * @exports IRespModelGet\n     * @interface IRespModelGet\n     * @property {number|null} [result] RespModelGet result\n     * @property {string|null} [model] RespModelGet model\n     */\n\n    /**\n     * Constructs a new RespModelGet.\n     * @exports RespModelGet\n     * @classdesc Represents a RespModelGet.\n     * @implements IRespModelGet\n     * @constructor\n     * @param {IRespModelGet=} [properties] Properties to set\n     */\n    function RespModelGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RespModelGet result.\n     * @member {number} result\n     * @memberof RespModelGet\n     * @instance\n     */\n    RespModelGet.prototype.result = 0;\n\n    /**\n     * RespModelGet model.\n     * @member {string} model\n     * @memberof RespModelGet\n     * @instance\n     */\n    RespModelGet.prototype.model = \"\";\n\n    /**\n     * Creates a new RespModelGet instance using the specified properties.\n     * @function create\n     * @memberof RespModelGet\n     * @static\n     * @param {IRespModelGet=} [properties] Properties to set\n     * @returns {RespModelGet} RespModelGet instance\n     */\n    RespModelGet.create = function create(properties) {\n        return new RespModelGet(properties);\n    };\n\n    /**\n     * Encodes the specified RespModelGet message. Does not implicitly {@link RespModelGet.verify|verify} messages.\n     * @function encode\n     * @memberof RespModelGet\n     * @static\n     * @param {RespModelGet} message RespModelGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespModelGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n        if (message.model != null && Object.hasOwnProperty.call(message, \"model\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.model);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RespModelGet message, length delimited. Does not implicitly {@link RespModelGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RespModelGet\n     * @static\n     * @param {RespModelGet} message RespModelGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespModelGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RespModelGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof RespModelGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RespModelGet} RespModelGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespModelGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.RespModelGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.result = reader.int32();\n                break;\n            case 2:\n                message.model = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RespModelGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RespModelGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RespModelGet} RespModelGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespModelGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RespModelGet message.\n     * @function verify\n     * @memberof RespModelGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RespModelGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            if (!$util.isInteger(message.result))\n                return \"result: integer expected\";\n        if (message.model != null && message.hasOwnProperty(\"model\"))\n            if (!$util.isString(message.model))\n                return \"model: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a RespModelGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RespModelGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RespModelGet} RespModelGet\n     */\n    RespModelGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.RespModelGet)\n            return object;\n        let message = new $root.RespModelGet();\n        if (object.result != null)\n            message.result = object.result | 0;\n        if (object.model != null)\n            message.model = String(object.model);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a RespModelGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RespModelGet\n     * @static\n     * @param {RespModelGet} message RespModelGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RespModelGet.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.result = 0;\n            object.model = \"\";\n        }\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            object.result = message.result;\n        if (message.model != null && message.hasOwnProperty(\"model\"))\n            object.model = message.model;\n        return object;\n    };\n\n    /**\n     * Converts this RespModelGet to JSON.\n     * @function toJSON\n     * @memberof RespModelGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RespModelGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return RespModelGet;\n})();\n\nconst CmdTermsSet = $root.CmdTermsSet = (() => {\n\n    /**\n     * Properties of a CmdTermsSet.\n     * @exports ICmdTermsSet\n     * @interface ICmdTermsSet\n     * @property {number|null} [termsBits] CmdTermsSet termsBits\n     */\n\n    /**\n     * Constructs a new CmdTermsSet.\n     * @exports CmdTermsSet\n     * @classdesc Represents a CmdTermsSet.\n     * @implements ICmdTermsSet\n     * @constructor\n     * @param {ICmdTermsSet=} [properties] Properties to set\n     */\n    function CmdTermsSet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CmdTermsSet termsBits.\n     * @member {number} termsBits\n     * @memberof CmdTermsSet\n     * @instance\n     */\n    CmdTermsSet.prototype.termsBits = 0;\n\n    /**\n     * Creates a new CmdTermsSet instance using the specified properties.\n     * @function create\n     * @memberof CmdTermsSet\n     * @static\n     * @param {ICmdTermsSet=} [properties] Properties to set\n     * @returns {CmdTermsSet} CmdTermsSet instance\n     */\n    CmdTermsSet.create = function create(properties) {\n        return new CmdTermsSet(properties);\n    };\n\n    /**\n     * Encodes the specified CmdTermsSet message. Does not implicitly {@link CmdTermsSet.verify|verify} messages.\n     * @function encode\n     * @memberof CmdTermsSet\n     * @static\n     * @param {CmdTermsSet} message CmdTermsSet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdTermsSet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.termsBits != null && Object.hasOwnProperty.call(message, \"termsBits\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.termsBits);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CmdTermsSet message, length delimited. Does not implicitly {@link CmdTermsSet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CmdTermsSet\n     * @static\n     * @param {CmdTermsSet} message CmdTermsSet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdTermsSet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CmdTermsSet message from the specified reader or buffer.\n     * @function decode\n     * @memberof CmdTermsSet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CmdTermsSet} CmdTermsSet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdTermsSet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.CmdTermsSet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.termsBits = reader.uint32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CmdTermsSet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CmdTermsSet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CmdTermsSet} CmdTermsSet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdTermsSet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CmdTermsSet message.\n     * @function verify\n     * @memberof CmdTermsSet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CmdTermsSet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.termsBits != null && message.hasOwnProperty(\"termsBits\"))\n            if (!$util.isInteger(message.termsBits))\n                return \"termsBits: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CmdTermsSet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CmdTermsSet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CmdTermsSet} CmdTermsSet\n     */\n    CmdTermsSet.fromObject = function fromObject(object) {\n        if (object instanceof $root.CmdTermsSet)\n            return object;\n        let message = new $root.CmdTermsSet();\n        if (object.termsBits != null)\n            message.termsBits = object.termsBits >>> 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a CmdTermsSet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CmdTermsSet\n     * @static\n     * @param {CmdTermsSet} message CmdTermsSet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CmdTermsSet.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults)\n            object.termsBits = 0;\n        if (message.termsBits != null && message.hasOwnProperty(\"termsBits\"))\n            object.termsBits = message.termsBits;\n        return object;\n    };\n\n    /**\n     * Converts this CmdTermsSet to JSON.\n     * @function toJSON\n     * @memberof CmdTermsSet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CmdTermsSet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return CmdTermsSet;\n})();\n\nconst RespTermsSet = $root.RespTermsSet = (() => {\n\n    /**\n     * Properties of a RespTermsSet.\n     * @exports IRespTermsSet\n     * @interface IRespTermsSet\n     * @property {number|null} [result] RespTermsSet result\n     */\n\n    /**\n     * Constructs a new RespTermsSet.\n     * @exports RespTermsSet\n     * @classdesc Represents a RespTermsSet.\n     * @implements IRespTermsSet\n     * @constructor\n     * @param {IRespTermsSet=} [properties] Properties to set\n     */\n    function RespTermsSet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RespTermsSet result.\n     * @member {number} result\n     * @memberof RespTermsSet\n     * @instance\n     */\n    RespTermsSet.prototype.result = 0;\n\n    /**\n     * Creates a new RespTermsSet instance using the specified properties.\n     * @function create\n     * @memberof RespTermsSet\n     * @static\n     * @param {IRespTermsSet=} [properties] Properties to set\n     * @returns {RespTermsSet} RespTermsSet instance\n     */\n    RespTermsSet.create = function create(properties) {\n        return new RespTermsSet(properties);\n    };\n\n    /**\n     * Encodes the specified RespTermsSet message. Does not implicitly {@link RespTermsSet.verify|verify} messages.\n     * @function encode\n     * @memberof RespTermsSet\n     * @static\n     * @param {RespTermsSet} message RespTermsSet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespTermsSet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RespTermsSet message, length delimited. Does not implicitly {@link RespTermsSet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RespTermsSet\n     * @static\n     * @param {RespTermsSet} message RespTermsSet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespTermsSet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RespTermsSet message from the specified reader or buffer.\n     * @function decode\n     * @memberof RespTermsSet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RespTermsSet} RespTermsSet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespTermsSet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.RespTermsSet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.result = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RespTermsSet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RespTermsSet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RespTermsSet} RespTermsSet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespTermsSet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RespTermsSet message.\n     * @function verify\n     * @memberof RespTermsSet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RespTermsSet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            if (!$util.isInteger(message.result))\n                return \"result: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a RespTermsSet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RespTermsSet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RespTermsSet} RespTermsSet\n     */\n    RespTermsSet.fromObject = function fromObject(object) {\n        if (object instanceof $root.RespTermsSet)\n            return object;\n        let message = new $root.RespTermsSet();\n        if (object.result != null)\n            message.result = object.result | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a RespTermsSet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RespTermsSet\n     * @static\n     * @param {RespTermsSet} message RespTermsSet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RespTermsSet.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults)\n            object.result = 0;\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            object.result = message.result;\n        return object;\n    };\n\n    /**\n     * Converts this RespTermsSet to JSON.\n     * @function toJSON\n     * @memberof RespTermsSet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RespTermsSet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return RespTermsSet;\n})();\n\nconst CmdTermsGet = $root.CmdTermsGet = (() => {\n\n    /**\n     * Properties of a CmdTermsGet.\n     * @exports ICmdTermsGet\n     * @interface ICmdTermsGet\n     */\n\n    /**\n     * Constructs a new CmdTermsGet.\n     * @exports CmdTermsGet\n     * @classdesc Represents a CmdTermsGet.\n     * @implements ICmdTermsGet\n     * @constructor\n     * @param {ICmdTermsGet=} [properties] Properties to set\n     */\n    function CmdTermsGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new CmdTermsGet instance using the specified properties.\n     * @function create\n     * @memberof CmdTermsGet\n     * @static\n     * @param {ICmdTermsGet=} [properties] Properties to set\n     * @returns {CmdTermsGet} CmdTermsGet instance\n     */\n    CmdTermsGet.create = function create(properties) {\n        return new CmdTermsGet(properties);\n    };\n\n    /**\n     * Encodes the specified CmdTermsGet message. Does not implicitly {@link CmdTermsGet.verify|verify} messages.\n     * @function encode\n     * @memberof CmdTermsGet\n     * @static\n     * @param {CmdTermsGet} message CmdTermsGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdTermsGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CmdTermsGet message, length delimited. Does not implicitly {@link CmdTermsGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CmdTermsGet\n     * @static\n     * @param {CmdTermsGet} message CmdTermsGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdTermsGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CmdTermsGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof CmdTermsGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CmdTermsGet} CmdTermsGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdTermsGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.CmdTermsGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CmdTermsGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CmdTermsGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CmdTermsGet} CmdTermsGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdTermsGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CmdTermsGet message.\n     * @function verify\n     * @memberof CmdTermsGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CmdTermsGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CmdTermsGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CmdTermsGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CmdTermsGet} CmdTermsGet\n     */\n    CmdTermsGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.CmdTermsGet)\n            return object;\n        return new $root.CmdTermsGet();\n    };\n\n    /**\n     * Creates a plain object from a CmdTermsGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CmdTermsGet\n     * @static\n     * @param {CmdTermsGet} message CmdTermsGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CmdTermsGet.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this CmdTermsGet to JSON.\n     * @function toJSON\n     * @memberof CmdTermsGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CmdTermsGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return CmdTermsGet;\n})();\n\nconst RespTermsGet = $root.RespTermsGet = (() => {\n\n    /**\n     * Properties of a RespTermsGet.\n     * @exports IRespTermsGet\n     * @interface IRespTermsGet\n     * @property {number|null} [result] RespTermsGet result\n     * @property {number|null} [termsBits] RespTermsGet termsBits\n     */\n\n    /**\n     * Constructs a new RespTermsGet.\n     * @exports RespTermsGet\n     * @classdesc Represents a RespTermsGet.\n     * @implements IRespTermsGet\n     * @constructor\n     * @param {IRespTermsGet=} [properties] Properties to set\n     */\n    function RespTermsGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RespTermsGet result.\n     * @member {number} result\n     * @memberof RespTermsGet\n     * @instance\n     */\n    RespTermsGet.prototype.result = 0;\n\n    /**\n     * RespTermsGet termsBits.\n     * @member {number} termsBits\n     * @memberof RespTermsGet\n     * @instance\n     */\n    RespTermsGet.prototype.termsBits = 0;\n\n    /**\n     * Creates a new RespTermsGet instance using the specified properties.\n     * @function create\n     * @memberof RespTermsGet\n     * @static\n     * @param {IRespTermsGet=} [properties] Properties to set\n     * @returns {RespTermsGet} RespTermsGet instance\n     */\n    RespTermsGet.create = function create(properties) {\n        return new RespTermsGet(properties);\n    };\n\n    /**\n     * Encodes the specified RespTermsGet message. Does not implicitly {@link RespTermsGet.verify|verify} messages.\n     * @function encode\n     * @memberof RespTermsGet\n     * @static\n     * @param {RespTermsGet} message RespTermsGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespTermsGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n        if (message.termsBits != null && Object.hasOwnProperty.call(message, \"termsBits\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.termsBits);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RespTermsGet message, length delimited. Does not implicitly {@link RespTermsGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RespTermsGet\n     * @static\n     * @param {RespTermsGet} message RespTermsGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespTermsGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RespTermsGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof RespTermsGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RespTermsGet} RespTermsGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespTermsGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.RespTermsGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.result = reader.int32();\n                break;\n            case 2:\n                message.termsBits = reader.uint32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RespTermsGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RespTermsGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RespTermsGet} RespTermsGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespTermsGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RespTermsGet message.\n     * @function verify\n     * @memberof RespTermsGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RespTermsGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            if (!$util.isInteger(message.result))\n                return \"result: integer expected\";\n        if (message.termsBits != null && message.hasOwnProperty(\"termsBits\"))\n            if (!$util.isInteger(message.termsBits))\n                return \"termsBits: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a RespTermsGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RespTermsGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RespTermsGet} RespTermsGet\n     */\n    RespTermsGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.RespTermsGet)\n            return object;\n        let message = new $root.RespTermsGet();\n        if (object.result != null)\n            message.result = object.result | 0;\n        if (object.termsBits != null)\n            message.termsBits = object.termsBits >>> 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a RespTermsGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RespTermsGet\n     * @static\n     * @param {RespTermsGet} message RespTermsGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RespTermsGet.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.result = 0;\n            object.termsBits = 0;\n        }\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            object.result = message.result;\n        if (message.termsBits != null && message.hasOwnProperty(\"termsBits\"))\n            object.termsBits = message.termsBits;\n        return object;\n    };\n\n    /**\n     * Converts this RespTermsGet to JSON.\n     * @function toJSON\n     * @memberof RespTermsGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RespTermsGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return RespTermsGet;\n})();\n\nconst CmdFirmwareVersionGet = $root.CmdFirmwareVersionGet = (() => {\n\n    /**\n     * Properties of a CmdFirmwareVersionGet.\n     * @exports ICmdFirmwareVersionGet\n     * @interface ICmdFirmwareVersionGet\n     */\n\n    /**\n     * Constructs a new CmdFirmwareVersionGet.\n     * @exports CmdFirmwareVersionGet\n     * @classdesc Represents a CmdFirmwareVersionGet.\n     * @implements ICmdFirmwareVersionGet\n     * @constructor\n     * @param {ICmdFirmwareVersionGet=} [properties] Properties to set\n     */\n    function CmdFirmwareVersionGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new CmdFirmwareVersionGet instance using the specified properties.\n     * @function create\n     * @memberof CmdFirmwareVersionGet\n     * @static\n     * @param {ICmdFirmwareVersionGet=} [properties] Properties to set\n     * @returns {CmdFirmwareVersionGet} CmdFirmwareVersionGet instance\n     */\n    CmdFirmwareVersionGet.create = function create(properties) {\n        return new CmdFirmwareVersionGet(properties);\n    };\n\n    /**\n     * Encodes the specified CmdFirmwareVersionGet message. Does not implicitly {@link CmdFirmwareVersionGet.verify|verify} messages.\n     * @function encode\n     * @memberof CmdFirmwareVersionGet\n     * @static\n     * @param {CmdFirmwareVersionGet} message CmdFirmwareVersionGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdFirmwareVersionGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CmdFirmwareVersionGet message, length delimited. Does not implicitly {@link CmdFirmwareVersionGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CmdFirmwareVersionGet\n     * @static\n     * @param {CmdFirmwareVersionGet} message CmdFirmwareVersionGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdFirmwareVersionGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CmdFirmwareVersionGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof CmdFirmwareVersionGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CmdFirmwareVersionGet} CmdFirmwareVersionGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdFirmwareVersionGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.CmdFirmwareVersionGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CmdFirmwareVersionGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CmdFirmwareVersionGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CmdFirmwareVersionGet} CmdFirmwareVersionGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdFirmwareVersionGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CmdFirmwareVersionGet message.\n     * @function verify\n     * @memberof CmdFirmwareVersionGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CmdFirmwareVersionGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CmdFirmwareVersionGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CmdFirmwareVersionGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CmdFirmwareVersionGet} CmdFirmwareVersionGet\n     */\n    CmdFirmwareVersionGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.CmdFirmwareVersionGet)\n            return object;\n        return new $root.CmdFirmwareVersionGet();\n    };\n\n    /**\n     * Creates a plain object from a CmdFirmwareVersionGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CmdFirmwareVersionGet\n     * @static\n     * @param {CmdFirmwareVersionGet} message CmdFirmwareVersionGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CmdFirmwareVersionGet.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this CmdFirmwareVersionGet to JSON.\n     * @function toJSON\n     * @memberof CmdFirmwareVersionGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CmdFirmwareVersionGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return CmdFirmwareVersionGet;\n})();\n\nconst RespFirmwareVersionGet = $root.RespFirmwareVersionGet = (() => {\n\n    /**\n     * Properties of a RespFirmwareVersionGet.\n     * @exports IRespFirmwareVersionGet\n     * @interface IRespFirmwareVersionGet\n     * @property {number|null} [result] RespFirmwareVersionGet result\n     * @property {string|null} [semver] RespFirmwareVersionGet semver\n     */\n\n    /**\n     * Constructs a new RespFirmwareVersionGet.\n     * @exports RespFirmwareVersionGet\n     * @classdesc Represents a RespFirmwareVersionGet.\n     * @implements IRespFirmwareVersionGet\n     * @constructor\n     * @param {IRespFirmwareVersionGet=} [properties] Properties to set\n     */\n    function RespFirmwareVersionGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RespFirmwareVersionGet result.\n     * @member {number} result\n     * @memberof RespFirmwareVersionGet\n     * @instance\n     */\n    RespFirmwareVersionGet.prototype.result = 0;\n\n    /**\n     * RespFirmwareVersionGet semver.\n     * @member {string} semver\n     * @memberof RespFirmwareVersionGet\n     * @instance\n     */\n    RespFirmwareVersionGet.prototype.semver = \"\";\n\n    /**\n     * Creates a new RespFirmwareVersionGet instance using the specified properties.\n     * @function create\n     * @memberof RespFirmwareVersionGet\n     * @static\n     * @param {IRespFirmwareVersionGet=} [properties] Properties to set\n     * @returns {RespFirmwareVersionGet} RespFirmwareVersionGet instance\n     */\n    RespFirmwareVersionGet.create = function create(properties) {\n        return new RespFirmwareVersionGet(properties);\n    };\n\n    /**\n     * Encodes the specified RespFirmwareVersionGet message. Does not implicitly {@link RespFirmwareVersionGet.verify|verify} messages.\n     * @function encode\n     * @memberof RespFirmwareVersionGet\n     * @static\n     * @param {RespFirmwareVersionGet} message RespFirmwareVersionGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespFirmwareVersionGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n        if (message.semver != null && Object.hasOwnProperty.call(message, \"semver\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.semver);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RespFirmwareVersionGet message, length delimited. Does not implicitly {@link RespFirmwareVersionGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RespFirmwareVersionGet\n     * @static\n     * @param {RespFirmwareVersionGet} message RespFirmwareVersionGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespFirmwareVersionGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RespFirmwareVersionGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof RespFirmwareVersionGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RespFirmwareVersionGet} RespFirmwareVersionGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespFirmwareVersionGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.RespFirmwareVersionGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.result = reader.int32();\n                break;\n            case 2:\n                message.semver = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RespFirmwareVersionGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RespFirmwareVersionGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RespFirmwareVersionGet} RespFirmwareVersionGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespFirmwareVersionGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RespFirmwareVersionGet message.\n     * @function verify\n     * @memberof RespFirmwareVersionGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RespFirmwareVersionGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            if (!$util.isInteger(message.result))\n                return \"result: integer expected\";\n        if (message.semver != null && message.hasOwnProperty(\"semver\"))\n            if (!$util.isString(message.semver))\n                return \"semver: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a RespFirmwareVersionGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RespFirmwareVersionGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RespFirmwareVersionGet} RespFirmwareVersionGet\n     */\n    RespFirmwareVersionGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.RespFirmwareVersionGet)\n            return object;\n        let message = new $root.RespFirmwareVersionGet();\n        if (object.result != null)\n            message.result = object.result | 0;\n        if (object.semver != null)\n            message.semver = String(object.semver);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a RespFirmwareVersionGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RespFirmwareVersionGet\n     * @static\n     * @param {RespFirmwareVersionGet} message RespFirmwareVersionGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RespFirmwareVersionGet.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.result = 0;\n            object.semver = \"\";\n        }\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            object.result = message.result;\n        if (message.semver != null && message.hasOwnProperty(\"semver\"))\n            object.semver = message.semver;\n        return object;\n    };\n\n    /**\n     * Converts this RespFirmwareVersionGet to JSON.\n     * @function toJSON\n     * @memberof RespFirmwareVersionGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RespFirmwareVersionGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return RespFirmwareVersionGet;\n})();\n\nconst CmdWifiStaMacGet = $root.CmdWifiStaMacGet = (() => {\n\n    /**\n     * Properties of a CmdWifiStaMacGet.\n     * @exports ICmdWifiStaMacGet\n     * @interface ICmdWifiStaMacGet\n     */\n\n    /**\n     * Constructs a new CmdWifiStaMacGet.\n     * @exports CmdWifiStaMacGet\n     * @classdesc Represents a CmdWifiStaMacGet.\n     * @implements ICmdWifiStaMacGet\n     * @constructor\n     * @param {ICmdWifiStaMacGet=} [properties] Properties to set\n     */\n    function CmdWifiStaMacGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new CmdWifiStaMacGet instance using the specified properties.\n     * @function create\n     * @memberof CmdWifiStaMacGet\n     * @static\n     * @param {ICmdWifiStaMacGet=} [properties] Properties to set\n     * @returns {CmdWifiStaMacGet} CmdWifiStaMacGet instance\n     */\n    CmdWifiStaMacGet.create = function create(properties) {\n        return new CmdWifiStaMacGet(properties);\n    };\n\n    /**\n     * Encodes the specified CmdWifiStaMacGet message. Does not implicitly {@link CmdWifiStaMacGet.verify|verify} messages.\n     * @function encode\n     * @memberof CmdWifiStaMacGet\n     * @static\n     * @param {CmdWifiStaMacGet} message CmdWifiStaMacGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdWifiStaMacGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CmdWifiStaMacGet message, length delimited. Does not implicitly {@link CmdWifiStaMacGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CmdWifiStaMacGet\n     * @static\n     * @param {CmdWifiStaMacGet} message CmdWifiStaMacGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdWifiStaMacGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CmdWifiStaMacGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof CmdWifiStaMacGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CmdWifiStaMacGet} CmdWifiStaMacGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdWifiStaMacGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.CmdWifiStaMacGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CmdWifiStaMacGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CmdWifiStaMacGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CmdWifiStaMacGet} CmdWifiStaMacGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdWifiStaMacGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CmdWifiStaMacGet message.\n     * @function verify\n     * @memberof CmdWifiStaMacGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CmdWifiStaMacGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CmdWifiStaMacGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CmdWifiStaMacGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CmdWifiStaMacGet} CmdWifiStaMacGet\n     */\n    CmdWifiStaMacGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.CmdWifiStaMacGet)\n            return object;\n        return new $root.CmdWifiStaMacGet();\n    };\n\n    /**\n     * Creates a plain object from a CmdWifiStaMacGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CmdWifiStaMacGet\n     * @static\n     * @param {CmdWifiStaMacGet} message CmdWifiStaMacGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CmdWifiStaMacGet.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this CmdWifiStaMacGet to JSON.\n     * @function toJSON\n     * @memberof CmdWifiStaMacGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CmdWifiStaMacGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return CmdWifiStaMacGet;\n})();\n\nconst RespWifiStaMacGet = $root.RespWifiStaMacGet = (() => {\n\n    /**\n     * Properties of a RespWifiStaMacGet.\n     * @exports IRespWifiStaMacGet\n     * @interface IRespWifiStaMacGet\n     * @property {number|null} [result] RespWifiStaMacGet result\n     * @property {string|null} [mac] RespWifiStaMacGet mac\n     */\n\n    /**\n     * Constructs a new RespWifiStaMacGet.\n     * @exports RespWifiStaMacGet\n     * @classdesc Represents a RespWifiStaMacGet.\n     * @implements IRespWifiStaMacGet\n     * @constructor\n     * @param {IRespWifiStaMacGet=} [properties] Properties to set\n     */\n    function RespWifiStaMacGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RespWifiStaMacGet result.\n     * @member {number} result\n     * @memberof RespWifiStaMacGet\n     * @instance\n     */\n    RespWifiStaMacGet.prototype.result = 0;\n\n    /**\n     * RespWifiStaMacGet mac.\n     * @member {string} mac\n     * @memberof RespWifiStaMacGet\n     * @instance\n     */\n    RespWifiStaMacGet.prototype.mac = \"\";\n\n    /**\n     * Creates a new RespWifiStaMacGet instance using the specified properties.\n     * @function create\n     * @memberof RespWifiStaMacGet\n     * @static\n     * @param {IRespWifiStaMacGet=} [properties] Properties to set\n     * @returns {RespWifiStaMacGet} RespWifiStaMacGet instance\n     */\n    RespWifiStaMacGet.create = function create(properties) {\n        return new RespWifiStaMacGet(properties);\n    };\n\n    /**\n     * Encodes the specified RespWifiStaMacGet message. Does not implicitly {@link RespWifiStaMacGet.verify|verify} messages.\n     * @function encode\n     * @memberof RespWifiStaMacGet\n     * @static\n     * @param {RespWifiStaMacGet} message RespWifiStaMacGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespWifiStaMacGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n        if (message.mac != null && Object.hasOwnProperty.call(message, \"mac\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.mac);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RespWifiStaMacGet message, length delimited. Does not implicitly {@link RespWifiStaMacGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RespWifiStaMacGet\n     * @static\n     * @param {RespWifiStaMacGet} message RespWifiStaMacGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespWifiStaMacGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RespWifiStaMacGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof RespWifiStaMacGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RespWifiStaMacGet} RespWifiStaMacGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespWifiStaMacGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.RespWifiStaMacGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.result = reader.int32();\n                break;\n            case 2:\n                message.mac = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RespWifiStaMacGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RespWifiStaMacGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RespWifiStaMacGet} RespWifiStaMacGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespWifiStaMacGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RespWifiStaMacGet message.\n     * @function verify\n     * @memberof RespWifiStaMacGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RespWifiStaMacGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            if (!$util.isInteger(message.result))\n                return \"result: integer expected\";\n        if (message.mac != null && message.hasOwnProperty(\"mac\"))\n            if (!$util.isString(message.mac))\n                return \"mac: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a RespWifiStaMacGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RespWifiStaMacGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RespWifiStaMacGet} RespWifiStaMacGet\n     */\n    RespWifiStaMacGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.RespWifiStaMacGet)\n            return object;\n        let message = new $root.RespWifiStaMacGet();\n        if (object.result != null)\n            message.result = object.result | 0;\n        if (object.mac != null)\n            message.mac = String(object.mac);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a RespWifiStaMacGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RespWifiStaMacGet\n     * @static\n     * @param {RespWifiStaMacGet} message RespWifiStaMacGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RespWifiStaMacGet.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.result = 0;\n            object.mac = \"\";\n        }\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            object.result = message.result;\n        if (message.mac != null && message.hasOwnProperty(\"mac\"))\n            object.mac = message.mac;\n        return object;\n    };\n\n    /**\n     * Converts this RespWifiStaMacGet to JSON.\n     * @function toJSON\n     * @memberof RespWifiStaMacGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RespWifiStaMacGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return RespWifiStaMacGet;\n})();\n\nconst CmdWifiStaIpGet = $root.CmdWifiStaIpGet = (() => {\n\n    /**\n     * Properties of a CmdWifiStaIpGet.\n     * @exports ICmdWifiStaIpGet\n     * @interface ICmdWifiStaIpGet\n     */\n\n    /**\n     * Constructs a new CmdWifiStaIpGet.\n     * @exports CmdWifiStaIpGet\n     * @classdesc Represents a CmdWifiStaIpGet.\n     * @implements ICmdWifiStaIpGet\n     * @constructor\n     * @param {ICmdWifiStaIpGet=} [properties] Properties to set\n     */\n    function CmdWifiStaIpGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new CmdWifiStaIpGet instance using the specified properties.\n     * @function create\n     * @memberof CmdWifiStaIpGet\n     * @static\n     * @param {ICmdWifiStaIpGet=} [properties] Properties to set\n     * @returns {CmdWifiStaIpGet} CmdWifiStaIpGet instance\n     */\n    CmdWifiStaIpGet.create = function create(properties) {\n        return new CmdWifiStaIpGet(properties);\n    };\n\n    /**\n     * Encodes the specified CmdWifiStaIpGet message. Does not implicitly {@link CmdWifiStaIpGet.verify|verify} messages.\n     * @function encode\n     * @memberof CmdWifiStaIpGet\n     * @static\n     * @param {CmdWifiStaIpGet} message CmdWifiStaIpGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdWifiStaIpGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CmdWifiStaIpGet message, length delimited. Does not implicitly {@link CmdWifiStaIpGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CmdWifiStaIpGet\n     * @static\n     * @param {CmdWifiStaIpGet} message CmdWifiStaIpGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdWifiStaIpGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CmdWifiStaIpGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof CmdWifiStaIpGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CmdWifiStaIpGet} CmdWifiStaIpGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdWifiStaIpGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.CmdWifiStaIpGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CmdWifiStaIpGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CmdWifiStaIpGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CmdWifiStaIpGet} CmdWifiStaIpGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdWifiStaIpGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CmdWifiStaIpGet message.\n     * @function verify\n     * @memberof CmdWifiStaIpGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CmdWifiStaIpGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CmdWifiStaIpGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CmdWifiStaIpGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CmdWifiStaIpGet} CmdWifiStaIpGet\n     */\n    CmdWifiStaIpGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.CmdWifiStaIpGet)\n            return object;\n        return new $root.CmdWifiStaIpGet();\n    };\n\n    /**\n     * Creates a plain object from a CmdWifiStaIpGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CmdWifiStaIpGet\n     * @static\n     * @param {CmdWifiStaIpGet} message CmdWifiStaIpGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CmdWifiStaIpGet.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this CmdWifiStaIpGet to JSON.\n     * @function toJSON\n     * @memberof CmdWifiStaIpGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CmdWifiStaIpGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return CmdWifiStaIpGet;\n})();\n\nconst RespWifiStaIpGet = $root.RespWifiStaIpGet = (() => {\n\n    /**\n     * Properties of a RespWifiStaIpGet.\n     * @exports IRespWifiStaIpGet\n     * @interface IRespWifiStaIpGet\n     * @property {number|null} [result] RespWifiStaIpGet result\n     * @property {string|null} [ip] RespWifiStaIpGet ip\n     */\n\n    /**\n     * Constructs a new RespWifiStaIpGet.\n     * @exports RespWifiStaIpGet\n     * @classdesc Represents a RespWifiStaIpGet.\n     * @implements IRespWifiStaIpGet\n     * @constructor\n     * @param {IRespWifiStaIpGet=} [properties] Properties to set\n     */\n    function RespWifiStaIpGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RespWifiStaIpGet result.\n     * @member {number} result\n     * @memberof RespWifiStaIpGet\n     * @instance\n     */\n    RespWifiStaIpGet.prototype.result = 0;\n\n    /**\n     * RespWifiStaIpGet ip.\n     * @member {string} ip\n     * @memberof RespWifiStaIpGet\n     * @instance\n     */\n    RespWifiStaIpGet.prototype.ip = \"\";\n\n    /**\n     * Creates a new RespWifiStaIpGet instance using the specified properties.\n     * @function create\n     * @memberof RespWifiStaIpGet\n     * @static\n     * @param {IRespWifiStaIpGet=} [properties] Properties to set\n     * @returns {RespWifiStaIpGet} RespWifiStaIpGet instance\n     */\n    RespWifiStaIpGet.create = function create(properties) {\n        return new RespWifiStaIpGet(properties);\n    };\n\n    /**\n     * Encodes the specified RespWifiStaIpGet message. Does not implicitly {@link RespWifiStaIpGet.verify|verify} messages.\n     * @function encode\n     * @memberof RespWifiStaIpGet\n     * @static\n     * @param {RespWifiStaIpGet} message RespWifiStaIpGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespWifiStaIpGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n        if (message.ip != null && Object.hasOwnProperty.call(message, \"ip\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.ip);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RespWifiStaIpGet message, length delimited. Does not implicitly {@link RespWifiStaIpGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RespWifiStaIpGet\n     * @static\n     * @param {RespWifiStaIpGet} message RespWifiStaIpGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespWifiStaIpGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RespWifiStaIpGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof RespWifiStaIpGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RespWifiStaIpGet} RespWifiStaIpGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespWifiStaIpGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.RespWifiStaIpGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.result = reader.int32();\n                break;\n            case 2:\n                message.ip = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RespWifiStaIpGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RespWifiStaIpGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RespWifiStaIpGet} RespWifiStaIpGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespWifiStaIpGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RespWifiStaIpGet message.\n     * @function verify\n     * @memberof RespWifiStaIpGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RespWifiStaIpGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            if (!$util.isInteger(message.result))\n                return \"result: integer expected\";\n        if (message.ip != null && message.hasOwnProperty(\"ip\"))\n            if (!$util.isString(message.ip))\n                return \"ip: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a RespWifiStaIpGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RespWifiStaIpGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RespWifiStaIpGet} RespWifiStaIpGet\n     */\n    RespWifiStaIpGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.RespWifiStaIpGet)\n            return object;\n        let message = new $root.RespWifiStaIpGet();\n        if (object.result != null)\n            message.result = object.result | 0;\n        if (object.ip != null)\n            message.ip = String(object.ip);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a RespWifiStaIpGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RespWifiStaIpGet\n     * @static\n     * @param {RespWifiStaIpGet} message RespWifiStaIpGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RespWifiStaIpGet.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.result = 0;\n            object.ip = \"\";\n        }\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            object.result = message.result;\n        if (message.ip != null && message.hasOwnProperty(\"ip\"))\n            object.ip = message.ip;\n        return object;\n    };\n\n    /**\n     * Converts this RespWifiStaIpGet to JSON.\n     * @function toJSON\n     * @memberof RespWifiStaIpGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RespWifiStaIpGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return RespWifiStaIpGet;\n})();\n\nconst CmdPing = $root.CmdPing = (() => {\n\n    /**\n     * Properties of a CmdPing.\n     * @exports ICmdPing\n     * @interface ICmdPing\n     */\n\n    /**\n     * Constructs a new CmdPing.\n     * @exports CmdPing\n     * @classdesc Represents a CmdPing.\n     * @implements ICmdPing\n     * @constructor\n     * @param {ICmdPing=} [properties] Properties to set\n     */\n    function CmdPing(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new CmdPing instance using the specified properties.\n     * @function create\n     * @memberof CmdPing\n     * @static\n     * @param {ICmdPing=} [properties] Properties to set\n     * @returns {CmdPing} CmdPing instance\n     */\n    CmdPing.create = function create(properties) {\n        return new CmdPing(properties);\n    };\n\n    /**\n     * Encodes the specified CmdPing message. Does not implicitly {@link CmdPing.verify|verify} messages.\n     * @function encode\n     * @memberof CmdPing\n     * @static\n     * @param {CmdPing} message CmdPing message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdPing.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CmdPing message, length delimited. Does not implicitly {@link CmdPing.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CmdPing\n     * @static\n     * @param {CmdPing} message CmdPing message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdPing.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CmdPing message from the specified reader or buffer.\n     * @function decode\n     * @memberof CmdPing\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CmdPing} CmdPing\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdPing.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.CmdPing();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CmdPing message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CmdPing\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CmdPing} CmdPing\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdPing.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CmdPing message.\n     * @function verify\n     * @memberof CmdPing\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CmdPing.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CmdPing message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CmdPing\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CmdPing} CmdPing\n     */\n    CmdPing.fromObject = function fromObject(object) {\n        if (object instanceof $root.CmdPing)\n            return object;\n        return new $root.CmdPing();\n    };\n\n    /**\n     * Creates a plain object from a CmdPing message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CmdPing\n     * @static\n     * @param {CmdPing} message CmdPing\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CmdPing.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this CmdPing to JSON.\n     * @function toJSON\n     * @memberof CmdPing\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CmdPing.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return CmdPing;\n})();\n\nconst RespPing = $root.RespPing = (() => {\n\n    /**\n     * Properties of a RespPing.\n     * @exports IRespPing\n     * @interface IRespPing\n     */\n\n    /**\n     * Constructs a new RespPing.\n     * @exports RespPing\n     * @classdesc Represents a RespPing.\n     * @implements IRespPing\n     * @constructor\n     * @param {IRespPing=} [properties] Properties to set\n     */\n    function RespPing(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new RespPing instance using the specified properties.\n     * @function create\n     * @memberof RespPing\n     * @static\n     * @param {IRespPing=} [properties] Properties to set\n     * @returns {RespPing} RespPing instance\n     */\n    RespPing.create = function create(properties) {\n        return new RespPing(properties);\n    };\n\n    /**\n     * Encodes the specified RespPing message. Does not implicitly {@link RespPing.verify|verify} messages.\n     * @function encode\n     * @memberof RespPing\n     * @static\n     * @param {RespPing} message RespPing message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespPing.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RespPing message, length delimited. Does not implicitly {@link RespPing.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RespPing\n     * @static\n     * @param {RespPing} message RespPing message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespPing.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RespPing message from the specified reader or buffer.\n     * @function decode\n     * @memberof RespPing\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RespPing} RespPing\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespPing.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.RespPing();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RespPing message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RespPing\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RespPing} RespPing\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespPing.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RespPing message.\n     * @function verify\n     * @memberof RespPing\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RespPing.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a RespPing message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RespPing\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RespPing} RespPing\n     */\n    RespPing.fromObject = function fromObject(object) {\n        if (object instanceof $root.RespPing)\n            return object;\n        return new $root.RespPing();\n    };\n\n    /**\n     * Creates a plain object from a RespPing message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RespPing\n     * @static\n     * @param {RespPing} message RespPing\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RespPing.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this RespPing to JSON.\n     * @function toJSON\n     * @memberof RespPing\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RespPing.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return RespPing;\n})();\n\nconst CmdEIOConnect = $root.CmdEIOConnect = (() => {\n\n    /**\n     * Properties of a CmdEIOConnect.\n     * @exports ICmdEIOConnect\n     * @interface ICmdEIOConnect\n     */\n\n    /**\n     * Constructs a new CmdEIOConnect.\n     * @exports CmdEIOConnect\n     * @classdesc Represents a CmdEIOConnect.\n     * @implements ICmdEIOConnect\n     * @constructor\n     * @param {ICmdEIOConnect=} [properties] Properties to set\n     */\n    function CmdEIOConnect(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new CmdEIOConnect instance using the specified properties.\n     * @function create\n     * @memberof CmdEIOConnect\n     * @static\n     * @param {ICmdEIOConnect=} [properties] Properties to set\n     * @returns {CmdEIOConnect} CmdEIOConnect instance\n     */\n    CmdEIOConnect.create = function create(properties) {\n        return new CmdEIOConnect(properties);\n    };\n\n    /**\n     * Encodes the specified CmdEIOConnect message. Does not implicitly {@link CmdEIOConnect.verify|verify} messages.\n     * @function encode\n     * @memberof CmdEIOConnect\n     * @static\n     * @param {CmdEIOConnect} message CmdEIOConnect message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdEIOConnect.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CmdEIOConnect message, length delimited. Does not implicitly {@link CmdEIOConnect.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CmdEIOConnect\n     * @static\n     * @param {CmdEIOConnect} message CmdEIOConnect message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdEIOConnect.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CmdEIOConnect message from the specified reader or buffer.\n     * @function decode\n     * @memberof CmdEIOConnect\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CmdEIOConnect} CmdEIOConnect\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdEIOConnect.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.CmdEIOConnect();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CmdEIOConnect message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CmdEIOConnect\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CmdEIOConnect} CmdEIOConnect\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdEIOConnect.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CmdEIOConnect message.\n     * @function verify\n     * @memberof CmdEIOConnect\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CmdEIOConnect.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CmdEIOConnect message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CmdEIOConnect\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CmdEIOConnect} CmdEIOConnect\n     */\n    CmdEIOConnect.fromObject = function fromObject(object) {\n        if (object instanceof $root.CmdEIOConnect)\n            return object;\n        return new $root.CmdEIOConnect();\n    };\n\n    /**\n     * Creates a plain object from a CmdEIOConnect message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CmdEIOConnect\n     * @static\n     * @param {CmdEIOConnect} message CmdEIOConnect\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CmdEIOConnect.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this CmdEIOConnect to JSON.\n     * @function toJSON\n     * @memberof CmdEIOConnect\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CmdEIOConnect.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return CmdEIOConnect;\n})();\n\nconst RespEIOConnect = $root.RespEIOConnect = (() => {\n\n    /**\n     * Properties of a RespEIOConnect.\n     * @exports IRespEIOConnect\n     * @interface IRespEIOConnect\n     * @property {number|null} [result] RespEIOConnect result\n     */\n\n    /**\n     * Constructs a new RespEIOConnect.\n     * @exports RespEIOConnect\n     * @classdesc Represents a RespEIOConnect.\n     * @implements IRespEIOConnect\n     * @constructor\n     * @param {IRespEIOConnect=} [properties] Properties to set\n     */\n    function RespEIOConnect(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RespEIOConnect result.\n     * @member {number} result\n     * @memberof RespEIOConnect\n     * @instance\n     */\n    RespEIOConnect.prototype.result = 0;\n\n    /**\n     * Creates a new RespEIOConnect instance using the specified properties.\n     * @function create\n     * @memberof RespEIOConnect\n     * @static\n     * @param {IRespEIOConnect=} [properties] Properties to set\n     * @returns {RespEIOConnect} RespEIOConnect instance\n     */\n    RespEIOConnect.create = function create(properties) {\n        return new RespEIOConnect(properties);\n    };\n\n    /**\n     * Encodes the specified RespEIOConnect message. Does not implicitly {@link RespEIOConnect.verify|verify} messages.\n     * @function encode\n     * @memberof RespEIOConnect\n     * @static\n     * @param {RespEIOConnect} message RespEIOConnect message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespEIOConnect.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RespEIOConnect message, length delimited. Does not implicitly {@link RespEIOConnect.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RespEIOConnect\n     * @static\n     * @param {RespEIOConnect} message RespEIOConnect message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespEIOConnect.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RespEIOConnect message from the specified reader or buffer.\n     * @function decode\n     * @memberof RespEIOConnect\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RespEIOConnect} RespEIOConnect\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespEIOConnect.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.RespEIOConnect();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.result = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RespEIOConnect message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RespEIOConnect\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RespEIOConnect} RespEIOConnect\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespEIOConnect.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RespEIOConnect message.\n     * @function verify\n     * @memberof RespEIOConnect\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RespEIOConnect.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            if (!$util.isInteger(message.result))\n                return \"result: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a RespEIOConnect message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RespEIOConnect\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RespEIOConnect} RespEIOConnect\n     */\n    RespEIOConnect.fromObject = function fromObject(object) {\n        if (object instanceof $root.RespEIOConnect)\n            return object;\n        let message = new $root.RespEIOConnect();\n        if (object.result != null)\n            message.result = object.result | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a RespEIOConnect message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RespEIOConnect\n     * @static\n     * @param {RespEIOConnect} message RespEIOConnect\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RespEIOConnect.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults)\n            object.result = 0;\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            object.result = message.result;\n        return object;\n    };\n\n    /**\n     * Converts this RespEIOConnect to JSON.\n     * @function toJSON\n     * @memberof RespEIOConnect\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RespEIOConnect.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return RespEIOConnect;\n})();\n\nconst CmdConfigWifiSsidGet = $root.CmdConfigWifiSsidGet = (() => {\n\n    /**\n     * Properties of a CmdConfigWifiSsidGet.\n     * @exports ICmdConfigWifiSsidGet\n     * @interface ICmdConfigWifiSsidGet\n     */\n\n    /**\n     * Constructs a new CmdConfigWifiSsidGet.\n     * @exports CmdConfigWifiSsidGet\n     * @classdesc Represents a CmdConfigWifiSsidGet.\n     * @implements ICmdConfigWifiSsidGet\n     * @constructor\n     * @param {ICmdConfigWifiSsidGet=} [properties] Properties to set\n     */\n    function CmdConfigWifiSsidGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new CmdConfigWifiSsidGet instance using the specified properties.\n     * @function create\n     * @memberof CmdConfigWifiSsidGet\n     * @static\n     * @param {ICmdConfigWifiSsidGet=} [properties] Properties to set\n     * @returns {CmdConfigWifiSsidGet} CmdConfigWifiSsidGet instance\n     */\n    CmdConfigWifiSsidGet.create = function create(properties) {\n        return new CmdConfigWifiSsidGet(properties);\n    };\n\n    /**\n     * Encodes the specified CmdConfigWifiSsidGet message. Does not implicitly {@link CmdConfigWifiSsidGet.verify|verify} messages.\n     * @function encode\n     * @memberof CmdConfigWifiSsidGet\n     * @static\n     * @param {CmdConfigWifiSsidGet} message CmdConfigWifiSsidGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdConfigWifiSsidGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified CmdConfigWifiSsidGet message, length delimited. Does not implicitly {@link CmdConfigWifiSsidGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof CmdConfigWifiSsidGet\n     * @static\n     * @param {CmdConfigWifiSsidGet} message CmdConfigWifiSsidGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CmdConfigWifiSsidGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CmdConfigWifiSsidGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof CmdConfigWifiSsidGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {CmdConfigWifiSsidGet} CmdConfigWifiSsidGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdConfigWifiSsidGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.CmdConfigWifiSsidGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a CmdConfigWifiSsidGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof CmdConfigWifiSsidGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {CmdConfigWifiSsidGet} CmdConfigWifiSsidGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CmdConfigWifiSsidGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CmdConfigWifiSsidGet message.\n     * @function verify\n     * @memberof CmdConfigWifiSsidGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CmdConfigWifiSsidGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a CmdConfigWifiSsidGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof CmdConfigWifiSsidGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {CmdConfigWifiSsidGet} CmdConfigWifiSsidGet\n     */\n    CmdConfigWifiSsidGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.CmdConfigWifiSsidGet)\n            return object;\n        return new $root.CmdConfigWifiSsidGet();\n    };\n\n    /**\n     * Creates a plain object from a CmdConfigWifiSsidGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof CmdConfigWifiSsidGet\n     * @static\n     * @param {CmdConfigWifiSsidGet} message CmdConfigWifiSsidGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CmdConfigWifiSsidGet.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this CmdConfigWifiSsidGet to JSON.\n     * @function toJSON\n     * @memberof CmdConfigWifiSsidGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CmdConfigWifiSsidGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return CmdConfigWifiSsidGet;\n})();\n\nconst RespConfigWifiSsidGet = $root.RespConfigWifiSsidGet = (() => {\n\n    /**\n     * Properties of a RespConfigWifiSsidGet.\n     * @exports IRespConfigWifiSsidGet\n     * @interface IRespConfigWifiSsidGet\n     * @property {number|null} [result] RespConfigWifiSsidGet result\n     * @property {string|null} [ssid] RespConfigWifiSsidGet ssid\n     */\n\n    /**\n     * Constructs a new RespConfigWifiSsidGet.\n     * @exports RespConfigWifiSsidGet\n     * @classdesc Represents a RespConfigWifiSsidGet.\n     * @implements IRespConfigWifiSsidGet\n     * @constructor\n     * @param {IRespConfigWifiSsidGet=} [properties] Properties to set\n     */\n    function RespConfigWifiSsidGet(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RespConfigWifiSsidGet result.\n     * @member {number} result\n     * @memberof RespConfigWifiSsidGet\n     * @instance\n     */\n    RespConfigWifiSsidGet.prototype.result = 0;\n\n    /**\n     * RespConfigWifiSsidGet ssid.\n     * @member {string} ssid\n     * @memberof RespConfigWifiSsidGet\n     * @instance\n     */\n    RespConfigWifiSsidGet.prototype.ssid = \"\";\n\n    /**\n     * Creates a new RespConfigWifiSsidGet instance using the specified properties.\n     * @function create\n     * @memberof RespConfigWifiSsidGet\n     * @static\n     * @param {IRespConfigWifiSsidGet=} [properties] Properties to set\n     * @returns {RespConfigWifiSsidGet} RespConfigWifiSsidGet instance\n     */\n    RespConfigWifiSsidGet.create = function create(properties) {\n        return new RespConfigWifiSsidGet(properties);\n    };\n\n    /**\n     * Encodes the specified RespConfigWifiSsidGet message. Does not implicitly {@link RespConfigWifiSsidGet.verify|verify} messages.\n     * @function encode\n     * @memberof RespConfigWifiSsidGet\n     * @static\n     * @param {RespConfigWifiSsidGet} message RespConfigWifiSsidGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespConfigWifiSsidGet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);\n        if (message.ssid != null && Object.hasOwnProperty.call(message, \"ssid\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.ssid);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RespConfigWifiSsidGet message, length delimited. Does not implicitly {@link RespConfigWifiSsidGet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RespConfigWifiSsidGet\n     * @static\n     * @param {RespConfigWifiSsidGet} message RespConfigWifiSsidGet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RespConfigWifiSsidGet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RespConfigWifiSsidGet message from the specified reader or buffer.\n     * @function decode\n     * @memberof RespConfigWifiSsidGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RespConfigWifiSsidGet} RespConfigWifiSsidGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespConfigWifiSsidGet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.RespConfigWifiSsidGet();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.result = reader.int32();\n                break;\n            case 2:\n                message.ssid = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RespConfigWifiSsidGet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RespConfigWifiSsidGet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RespConfigWifiSsidGet} RespConfigWifiSsidGet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RespConfigWifiSsidGet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RespConfigWifiSsidGet message.\n     * @function verify\n     * @memberof RespConfigWifiSsidGet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RespConfigWifiSsidGet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            if (!$util.isInteger(message.result))\n                return \"result: integer expected\";\n        if (message.ssid != null && message.hasOwnProperty(\"ssid\"))\n            if (!$util.isString(message.ssid))\n                return \"ssid: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a RespConfigWifiSsidGet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RespConfigWifiSsidGet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RespConfigWifiSsidGet} RespConfigWifiSsidGet\n     */\n    RespConfigWifiSsidGet.fromObject = function fromObject(object) {\n        if (object instanceof $root.RespConfigWifiSsidGet)\n            return object;\n        let message = new $root.RespConfigWifiSsidGet();\n        if (object.result != null)\n            message.result = object.result | 0;\n        if (object.ssid != null)\n            message.ssid = String(object.ssid);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a RespConfigWifiSsidGet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RespConfigWifiSsidGet\n     * @static\n     * @param {RespConfigWifiSsidGet} message RespConfigWifiSsidGet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RespConfigWifiSsidGet.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.result = 0;\n            object.ssid = \"\";\n        }\n        if (message.result != null && message.hasOwnProperty(\"result\"))\n            object.result = message.result;\n        if (message.ssid != null && message.hasOwnProperty(\"ssid\"))\n            object.ssid = message.ssid;\n        return object;\n    };\n\n    /**\n     * Converts this RespConfigWifiSsidGet to JSON.\n     * @function toJSON\n     * @memberof RespConfigWifiSsidGet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RespConfigWifiSsidGet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return RespConfigWifiSsidGet;\n})();\n\n/**\n * HdyMsgType enum.\n * @exports HdyMsgType\n * @enum {number}\n * @property {number} TypeCmdProtocolVersionGet=0 TypeCmdProtocolVersionGet value\n * @property {number} TypeRespProtocolVersionGet=1 TypeRespProtocolVersionGet value\n * @property {number} TypeCmdConnectionKeyGet=2 TypeCmdConnectionKeyGet value\n * @property {number} TypeRespConnectionKeyGet=3 TypeRespConnectionKeyGet value\n * @property {number} TypeCmdConnectionKeyGen=6 TypeCmdConnectionKeyGen value\n * @property {number} TypeRespConnectionKeyGen=7 TypeRespConnectionKeyGen value\n * @property {number} TypeCmdSerialNumberGet=8 TypeCmdSerialNumberGet value\n * @property {number} TypeRespSerialNumberGet=9 TypeRespSerialNumberGet value\n * @property {number} TypeCmdProductionDateGet=10 TypeCmdProductionDateGet value\n * @property {number} TypeRespProductionDateGet=11 TypeRespProductionDateGet value\n * @property {number} TypeCmdHardwareVersionGet=12 TypeCmdHardwareVersionGet value\n * @property {number} TypeRespHardwareVersionGet=13 TypeRespHardwareVersionGet value\n * @property {number} TypeCmdPcbaVersionGet=14 TypeCmdPcbaVersionGet value\n * @property {number} TypeRespPcbaVersionGet=15 TypeRespPcbaVersionGet value\n * @property {number} TypeCmdModelGet=16 TypeCmdModelGet value\n * @property {number} TypeRespModelGet=17 TypeRespModelGet value\n * @property {number} TypeCmdTermsSet=18 TypeCmdTermsSet value\n * @property {number} TypeRespTermsSet=19 TypeRespTermsSet value\n * @property {number} TypeCmdTermsGet=20 TypeCmdTermsGet value\n * @property {number} TypeRespTermsGet=21 TypeRespTermsGet value\n * @property {number} TypeCmdFirmwareVersionGet=22 TypeCmdFirmwareVersionGet value\n * @property {number} TypeRespFirmwareVersionGet=23 TypeRespFirmwareVersionGet value\n * @property {number} TypeCmdWifiStaMacGet=24 TypeCmdWifiStaMacGet value\n * @property {number} TypeRespWifiStaMacGet=25 TypeRespWifiStaMacGet value\n * @property {number} TypeCmdWifiStaIpGet=26 TypeCmdWifiStaIpGet value\n * @property {number} TypeRespWifiStaIpGet=27 TypeRespWifiStaIpGet value\n * @property {number} TypeCmdPing=28 TypeCmdPing value\n * @property {number} TypeRespPing=29 TypeRespPing value\n * @property {number} TypeCmdEIOConnect=30 TypeCmdEIOConnect value\n * @property {number} TypeRespEIOConnect=31 TypeRespEIOConnect value\n * @property {number} TypeCmdConfigWifiSsidGet=32 TypeCmdConfigWifiSsidGet value\n * @property {number} TypeRespConfigWifiSsidGet=33 TypeRespConfigWifiSsidGet value\n */\nconst HdyMsgType = $root.HdyMsgType = (() => {\n    const valuesById = {}, values = Object.create(valuesById);\n    values[valuesById[0] = \"TypeCmdProtocolVersionGet\"] = 0;\n    values[valuesById[1] = \"TypeRespProtocolVersionGet\"] = 1;\n    values[valuesById[2] = \"TypeCmdConnectionKeyGet\"] = 2;\n    values[valuesById[3] = \"TypeRespConnectionKeyGet\"] = 3;\n    values[valuesById[6] = \"TypeCmdConnectionKeyGen\"] = 6;\n    values[valuesById[7] = \"TypeRespConnectionKeyGen\"] = 7;\n    values[valuesById[8] = \"TypeCmdSerialNumberGet\"] = 8;\n    values[valuesById[9] = \"TypeRespSerialNumberGet\"] = 9;\n    values[valuesById[10] = \"TypeCmdProductionDateGet\"] = 10;\n    values[valuesById[11] = \"TypeRespProductionDateGet\"] = 11;\n    values[valuesById[12] = \"TypeCmdHardwareVersionGet\"] = 12;\n    values[valuesById[13] = \"TypeRespHardwareVersionGet\"] = 13;\n    values[valuesById[14] = \"TypeCmdPcbaVersionGet\"] = 14;\n    values[valuesById[15] = \"TypeRespPcbaVersionGet\"] = 15;\n    values[valuesById[16] = \"TypeCmdModelGet\"] = 16;\n    values[valuesById[17] = \"TypeRespModelGet\"] = 17;\n    values[valuesById[18] = \"TypeCmdTermsSet\"] = 18;\n    values[valuesById[19] = \"TypeRespTermsSet\"] = 19;\n    values[valuesById[20] = \"TypeCmdTermsGet\"] = 20;\n    values[valuesById[21] = \"TypeRespTermsGet\"] = 21;\n    values[valuesById[22] = \"TypeCmdFirmwareVersionGet\"] = 22;\n    values[valuesById[23] = \"TypeRespFirmwareVersionGet\"] = 23;\n    values[valuesById[24] = \"TypeCmdWifiStaMacGet\"] = 24;\n    values[valuesById[25] = \"TypeRespWifiStaMacGet\"] = 25;\n    values[valuesById[26] = \"TypeCmdWifiStaIpGet\"] = 26;\n    values[valuesById[27] = \"TypeRespWifiStaIpGet\"] = 27;\n    values[valuesById[28] = \"TypeCmdPing\"] = 28;\n    values[valuesById[29] = \"TypeRespPing\"] = 29;\n    values[valuesById[30] = \"TypeCmdEIOConnect\"] = 30;\n    values[valuesById[31] = \"TypeRespEIOConnect\"] = 31;\n    values[valuesById[32] = \"TypeCmdConfigWifiSsidGet\"] = 32;\n    values[valuesById[33] = \"TypeRespConfigWifiSsidGet\"] = 33;\n    return values;\n})();\n\nconst HdyPayload = $root.HdyPayload = (() => {\n\n    /**\n     * Properties of a HdyPayload.\n     * @exports IHdyPayload\n     * @interface IHdyPayload\n     * @property {HdyMsgType|null} [msg] HdyPayload msg\n     * @property {CmdProtocolVersionGet|null} [cmdProtocolVersionGet] HdyPayload cmdProtocolVersionGet\n     * @property {RespProtocolVersionGet|null} [respProtocolVersionGet] HdyPayload respProtocolVersionGet\n     * @property {CmdConnectionKeyGet|null} [cmdConnectionKeyGet] HdyPayload cmdConnectionKeyGet\n     * @property {RespConnectionKeyGet|null} [respConnectionKeyGet] HdyPayload respConnectionKeyGet\n     * @property {CmdConnectionKeyGen|null} [cmdConnectionKeyGen] HdyPayload cmdConnectionKeyGen\n     * @property {RespConnectionKeyGen|null} [respConnectionKeyGen] HdyPayload respConnectionKeyGen\n     * @property {CmdSerialNumberGet|null} [cmdSerialNumberGet] HdyPayload cmdSerialNumberGet\n     * @property {RespSerialNumberGet|null} [respSerialNumberGet] HdyPayload respSerialNumberGet\n     * @property {CmdProductionDateGet|null} [cmdProductionDateGet] HdyPayload cmdProductionDateGet\n     * @property {RespProductionDateGet|null} [respProductionDateGet] HdyPayload respProductionDateGet\n     * @property {CmdHardwareVersionGet|null} [cmdHardwareVersionGet] HdyPayload cmdHardwareVersionGet\n     * @property {RespHardwareVersionGet|null} [respHardwareVersionGet] HdyPayload respHardwareVersionGet\n     * @property {CmdPcbaVersionGet|null} [cmdPcbaVersionGet] HdyPayload cmdPcbaVersionGet\n     * @property {RespPcbaVersionGet|null} [respPcbaVersionGet] HdyPayload respPcbaVersionGet\n     * @property {CmdModelGet|null} [cmdModelGet] HdyPayload cmdModelGet\n     * @property {RespModelGet|null} [respModelGet] HdyPayload respModelGet\n     * @property {CmdTermsSet|null} [cmdTermsSet] HdyPayload cmdTermsSet\n     * @property {RespTermsSet|null} [respTermsSet] HdyPayload respTermsSet\n     * @property {CmdTermsGet|null} [cmdTermsGet] HdyPayload cmdTermsGet\n     * @property {RespTermsGet|null} [respTermsGet] HdyPayload respTermsGet\n     * @property {CmdFirmwareVersionGet|null} [cmdFirmwareVersionGet] HdyPayload cmdFirmwareVersionGet\n     * @property {RespFirmwareVersionGet|null} [respFirmwareVersionGet] HdyPayload respFirmwareVersionGet\n     * @property {CmdWifiStaMacGet|null} [cmdWifiStaMacGet] HdyPayload cmdWifiStaMacGet\n     * @property {RespWifiStaMacGet|null} [respWifiStaMacGet] HdyPayload respWifiStaMacGet\n     * @property {CmdWifiStaIpGet|null} [cmdWifiStaIpGet] HdyPayload cmdWifiStaIpGet\n     * @property {RespWifiStaIpGet|null} [respWifiStaIpGet] HdyPayload respWifiStaIpGet\n     * @property {CmdPing|null} [cmdPing] HdyPayload cmdPing\n     * @property {RespPing|null} [respPing] HdyPayload respPing\n     * @property {CmdEIOConnect|null} [cmdEioConnect] HdyPayload cmdEioConnect\n     * @property {RespEIOConnect|null} [respEioConnect] HdyPayload respEioConnect\n     * @property {CmdConfigWifiSsidGet|null} [cmdConfigWifiSsidGet] HdyPayload cmdConfigWifiSsidGet\n     * @property {RespConfigWifiSsidGet|null} [respConfigWifiSsidGet] HdyPayload respConfigWifiSsidGet\n     */\n\n    /**\n     * Constructs a new HdyPayload.\n     * @exports HdyPayload\n     * @classdesc Represents a HdyPayload.\n     * @implements IHdyPayload\n     * @constructor\n     * @param {IHdyPayload=} [properties] Properties to set\n     */\n    function HdyPayload(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * HdyPayload msg.\n     * @member {HdyMsgType} msg\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.msg = 0;\n\n    /**\n     * HdyPayload cmdProtocolVersionGet.\n     * @member {CmdProtocolVersionGet|null|undefined} cmdProtocolVersionGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.cmdProtocolVersionGet = null;\n\n    /**\n     * HdyPayload respProtocolVersionGet.\n     * @member {RespProtocolVersionGet|null|undefined} respProtocolVersionGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.respProtocolVersionGet = null;\n\n    /**\n     * HdyPayload cmdConnectionKeyGet.\n     * @member {CmdConnectionKeyGet|null|undefined} cmdConnectionKeyGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.cmdConnectionKeyGet = null;\n\n    /**\n     * HdyPayload respConnectionKeyGet.\n     * @member {RespConnectionKeyGet|null|undefined} respConnectionKeyGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.respConnectionKeyGet = null;\n\n    /**\n     * HdyPayload cmdConnectionKeyGen.\n     * @member {CmdConnectionKeyGen|null|undefined} cmdConnectionKeyGen\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.cmdConnectionKeyGen = null;\n\n    /**\n     * HdyPayload respConnectionKeyGen.\n     * @member {RespConnectionKeyGen|null|undefined} respConnectionKeyGen\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.respConnectionKeyGen = null;\n\n    /**\n     * HdyPayload cmdSerialNumberGet.\n     * @member {CmdSerialNumberGet|null|undefined} cmdSerialNumberGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.cmdSerialNumberGet = null;\n\n    /**\n     * HdyPayload respSerialNumberGet.\n     * @member {RespSerialNumberGet|null|undefined} respSerialNumberGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.respSerialNumberGet = null;\n\n    /**\n     * HdyPayload cmdProductionDateGet.\n     * @member {CmdProductionDateGet|null|undefined} cmdProductionDateGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.cmdProductionDateGet = null;\n\n    /**\n     * HdyPayload respProductionDateGet.\n     * @member {RespProductionDateGet|null|undefined} respProductionDateGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.respProductionDateGet = null;\n\n    /**\n     * HdyPayload cmdHardwareVersionGet.\n     * @member {CmdHardwareVersionGet|null|undefined} cmdHardwareVersionGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.cmdHardwareVersionGet = null;\n\n    /**\n     * HdyPayload respHardwareVersionGet.\n     * @member {RespHardwareVersionGet|null|undefined} respHardwareVersionGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.respHardwareVersionGet = null;\n\n    /**\n     * HdyPayload cmdPcbaVersionGet.\n     * @member {CmdPcbaVersionGet|null|undefined} cmdPcbaVersionGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.cmdPcbaVersionGet = null;\n\n    /**\n     * HdyPayload respPcbaVersionGet.\n     * @member {RespPcbaVersionGet|null|undefined} respPcbaVersionGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.respPcbaVersionGet = null;\n\n    /**\n     * HdyPayload cmdModelGet.\n     * @member {CmdModelGet|null|undefined} cmdModelGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.cmdModelGet = null;\n\n    /**\n     * HdyPayload respModelGet.\n     * @member {RespModelGet|null|undefined} respModelGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.respModelGet = null;\n\n    /**\n     * HdyPayload cmdTermsSet.\n     * @member {CmdTermsSet|null|undefined} cmdTermsSet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.cmdTermsSet = null;\n\n    /**\n     * HdyPayload respTermsSet.\n     * @member {RespTermsSet|null|undefined} respTermsSet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.respTermsSet = null;\n\n    /**\n     * HdyPayload cmdTermsGet.\n     * @member {CmdTermsGet|null|undefined} cmdTermsGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.cmdTermsGet = null;\n\n    /**\n     * HdyPayload respTermsGet.\n     * @member {RespTermsGet|null|undefined} respTermsGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.respTermsGet = null;\n\n    /**\n     * HdyPayload cmdFirmwareVersionGet.\n     * @member {CmdFirmwareVersionGet|null|undefined} cmdFirmwareVersionGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.cmdFirmwareVersionGet = null;\n\n    /**\n     * HdyPayload respFirmwareVersionGet.\n     * @member {RespFirmwareVersionGet|null|undefined} respFirmwareVersionGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.respFirmwareVersionGet = null;\n\n    /**\n     * HdyPayload cmdWifiStaMacGet.\n     * @member {CmdWifiStaMacGet|null|undefined} cmdWifiStaMacGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.cmdWifiStaMacGet = null;\n\n    /**\n     * HdyPayload respWifiStaMacGet.\n     * @member {RespWifiStaMacGet|null|undefined} respWifiStaMacGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.respWifiStaMacGet = null;\n\n    /**\n     * HdyPayload cmdWifiStaIpGet.\n     * @member {CmdWifiStaIpGet|null|undefined} cmdWifiStaIpGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.cmdWifiStaIpGet = null;\n\n    /**\n     * HdyPayload respWifiStaIpGet.\n     * @member {RespWifiStaIpGet|null|undefined} respWifiStaIpGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.respWifiStaIpGet = null;\n\n    /**\n     * HdyPayload cmdPing.\n     * @member {CmdPing|null|undefined} cmdPing\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.cmdPing = null;\n\n    /**\n     * HdyPayload respPing.\n     * @member {RespPing|null|undefined} respPing\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.respPing = null;\n\n    /**\n     * HdyPayload cmdEioConnect.\n     * @member {CmdEIOConnect|null|undefined} cmdEioConnect\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.cmdEioConnect = null;\n\n    /**\n     * HdyPayload respEioConnect.\n     * @member {RespEIOConnect|null|undefined} respEioConnect\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.respEioConnect = null;\n\n    /**\n     * HdyPayload cmdConfigWifiSsidGet.\n     * @member {CmdConfigWifiSsidGet|null|undefined} cmdConfigWifiSsidGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.cmdConfigWifiSsidGet = null;\n\n    /**\n     * HdyPayload respConfigWifiSsidGet.\n     * @member {RespConfigWifiSsidGet|null|undefined} respConfigWifiSsidGet\n     * @memberof HdyPayload\n     * @instance\n     */\n    HdyPayload.prototype.respConfigWifiSsidGet = null;\n\n    // OneOf field names bound to virtual getters and setters\n    let $oneOfFields;\n\n    /**\n     * HdyPayload payload.\n     * @member {\"cmdProtocolVersionGet\"|\"respProtocolVersionGet\"|\"cmdConnectionKeyGet\"|\"respConnectionKeyGet\"|\"cmdConnectionKeyGen\"|\"respConnectionKeyGen\"|\"cmdSerialNumberGet\"|\"respSerialNumberGet\"|\"cmdProductionDateGet\"|\"respProductionDateGet\"|\"cmdHardwareVersionGet\"|\"respHardwareVersionGet\"|\"cmdPcbaVersionGet\"|\"respPcbaVersionGet\"|\"cmdModelGet\"|\"respModelGet\"|\"cmdTermsSet\"|\"respTermsSet\"|\"cmdTermsGet\"|\"respTermsGet\"|\"cmdFirmwareVersionGet\"|\"respFirmwareVersionGet\"|\"cmdWifiStaMacGet\"|\"respWifiStaMacGet\"|\"cmdWifiStaIpGet\"|\"respWifiStaIpGet\"|\"cmdPing\"|\"respPing\"|\"cmdEioConnect\"|\"respEioConnect\"|\"cmdConfigWifiSsidGet\"|\"respConfigWifiSsidGet\"|undefined} payload\n     * @memberof HdyPayload\n     * @instance\n     */\n    Object.defineProperty(HdyPayload.prototype, \"payload\", {\n        get: $util.oneOfGetter($oneOfFields = [\"cmdProtocolVersionGet\", \"respProtocolVersionGet\", \"cmdConnectionKeyGet\", \"respConnectionKeyGet\", \"cmdConnectionKeyGen\", \"respConnectionKeyGen\", \"cmdSerialNumberGet\", \"respSerialNumberGet\", \"cmdProductionDateGet\", \"respProductionDateGet\", \"cmdHardwareVersionGet\", \"respHardwareVersionGet\", \"cmdPcbaVersionGet\", \"respPcbaVersionGet\", \"cmdModelGet\", \"respModelGet\", \"cmdTermsSet\", \"respTermsSet\", \"cmdTermsGet\", \"respTermsGet\", \"cmdFirmwareVersionGet\", \"respFirmwareVersionGet\", \"cmdWifiStaMacGet\", \"respWifiStaMacGet\", \"cmdWifiStaIpGet\", \"respWifiStaIpGet\", \"cmdPing\", \"respPing\", \"cmdEioConnect\", \"respEioConnect\", \"cmdConfigWifiSsidGet\", \"respConfigWifiSsidGet\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Creates a new HdyPayload instance using the specified properties.\n     * @function create\n     * @memberof HdyPayload\n     * @static\n     * @param {IHdyPayload=} [properties] Properties to set\n     * @returns {HdyPayload} HdyPayload instance\n     */\n    HdyPayload.create = function create(properties) {\n        return new HdyPayload(properties);\n    };\n\n    /**\n     * Encodes the specified HdyPayload message. Does not implicitly {@link HdyPayload.verify|verify} messages.\n     * @function encode\n     * @memberof HdyPayload\n     * @static\n     * @param {HdyPayload} message HdyPayload message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    HdyPayload.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.msg != null && Object.hasOwnProperty.call(message, \"msg\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.msg);\n        if (message.cmdProtocolVersionGet != null && Object.hasOwnProperty.call(message, \"cmdProtocolVersionGet\"))\n            $root.CmdProtocolVersionGet.encode(message.cmdProtocolVersionGet, writer.uint32(/* id 100, wireType 2 =*/802).fork()).ldelim();\n        if (message.respProtocolVersionGet != null && Object.hasOwnProperty.call(message, \"respProtocolVersionGet\"))\n            $root.RespProtocolVersionGet.encode(message.respProtocolVersionGet, writer.uint32(/* id 101, wireType 2 =*/810).fork()).ldelim();\n        if (message.cmdConnectionKeyGet != null && Object.hasOwnProperty.call(message, \"cmdConnectionKeyGet\"))\n            $root.CmdConnectionKeyGet.encode(message.cmdConnectionKeyGet, writer.uint32(/* id 102, wireType 2 =*/818).fork()).ldelim();\n        if (message.respConnectionKeyGet != null && Object.hasOwnProperty.call(message, \"respConnectionKeyGet\"))\n            $root.RespConnectionKeyGet.encode(message.respConnectionKeyGet, writer.uint32(/* id 103, wireType 2 =*/826).fork()).ldelim();\n        if (message.cmdConnectionKeyGen != null && Object.hasOwnProperty.call(message, \"cmdConnectionKeyGen\"))\n            $root.CmdConnectionKeyGen.encode(message.cmdConnectionKeyGen, writer.uint32(/* id 106, wireType 2 =*/850).fork()).ldelim();\n        if (message.respConnectionKeyGen != null && Object.hasOwnProperty.call(message, \"respConnectionKeyGen\"))\n            $root.RespConnectionKeyGen.encode(message.respConnectionKeyGen, writer.uint32(/* id 107, wireType 2 =*/858).fork()).ldelim();\n        if (message.cmdSerialNumberGet != null && Object.hasOwnProperty.call(message, \"cmdSerialNumberGet\"))\n            $root.CmdSerialNumberGet.encode(message.cmdSerialNumberGet, writer.uint32(/* id 108, wireType 2 =*/866).fork()).ldelim();\n        if (message.respSerialNumberGet != null && Object.hasOwnProperty.call(message, \"respSerialNumberGet\"))\n            $root.RespSerialNumberGet.encode(message.respSerialNumberGet, writer.uint32(/* id 109, wireType 2 =*/874).fork()).ldelim();\n        if (message.cmdProductionDateGet != null && Object.hasOwnProperty.call(message, \"cmdProductionDateGet\"))\n            $root.CmdProductionDateGet.encode(message.cmdProductionDateGet, writer.uint32(/* id 110, wireType 2 =*/882).fork()).ldelim();\n        if (message.respProductionDateGet != null && Object.hasOwnProperty.call(message, \"respProductionDateGet\"))\n            $root.RespProductionDateGet.encode(message.respProductionDateGet, writer.uint32(/* id 111, wireType 2 =*/890).fork()).ldelim();\n        if (message.cmdHardwareVersionGet != null && Object.hasOwnProperty.call(message, \"cmdHardwareVersionGet\"))\n            $root.CmdHardwareVersionGet.encode(message.cmdHardwareVersionGet, writer.uint32(/* id 112, wireType 2 =*/898).fork()).ldelim();\n        if (message.respHardwareVersionGet != null && Object.hasOwnProperty.call(message, \"respHardwareVersionGet\"))\n            $root.RespHardwareVersionGet.encode(message.respHardwareVersionGet, writer.uint32(/* id 113, wireType 2 =*/906).fork()).ldelim();\n        if (message.cmdPcbaVersionGet != null && Object.hasOwnProperty.call(message, \"cmdPcbaVersionGet\"))\n            $root.CmdPcbaVersionGet.encode(message.cmdPcbaVersionGet, writer.uint32(/* id 114, wireType 2 =*/914).fork()).ldelim();\n        if (message.respPcbaVersionGet != null && Object.hasOwnProperty.call(message, \"respPcbaVersionGet\"))\n            $root.RespPcbaVersionGet.encode(message.respPcbaVersionGet, writer.uint32(/* id 115, wireType 2 =*/922).fork()).ldelim();\n        if (message.cmdModelGet != null && Object.hasOwnProperty.call(message, \"cmdModelGet\"))\n            $root.CmdModelGet.encode(message.cmdModelGet, writer.uint32(/* id 116, wireType 2 =*/930).fork()).ldelim();\n        if (message.respModelGet != null && Object.hasOwnProperty.call(message, \"respModelGet\"))\n            $root.RespModelGet.encode(message.respModelGet, writer.uint32(/* id 117, wireType 2 =*/938).fork()).ldelim();\n        if (message.cmdTermsSet != null && Object.hasOwnProperty.call(message, \"cmdTermsSet\"))\n            $root.CmdTermsSet.encode(message.cmdTermsSet, writer.uint32(/* id 118, wireType 2 =*/946).fork()).ldelim();\n        if (message.respTermsSet != null && Object.hasOwnProperty.call(message, \"respTermsSet\"))\n            $root.RespTermsSet.encode(message.respTermsSet, writer.uint32(/* id 119, wireType 2 =*/954).fork()).ldelim();\n        if (message.cmdTermsGet != null && Object.hasOwnProperty.call(message, \"cmdTermsGet\"))\n            $root.CmdTermsGet.encode(message.cmdTermsGet, writer.uint32(/* id 120, wireType 2 =*/962).fork()).ldelim();\n        if (message.respTermsGet != null && Object.hasOwnProperty.call(message, \"respTermsGet\"))\n            $root.RespTermsGet.encode(message.respTermsGet, writer.uint32(/* id 121, wireType 2 =*/970).fork()).ldelim();\n        if (message.cmdFirmwareVersionGet != null && Object.hasOwnProperty.call(message, \"cmdFirmwareVersionGet\"))\n            $root.CmdFirmwareVersionGet.encode(message.cmdFirmwareVersionGet, writer.uint32(/* id 122, wireType 2 =*/978).fork()).ldelim();\n        if (message.respFirmwareVersionGet != null && Object.hasOwnProperty.call(message, \"respFirmwareVersionGet\"))\n            $root.RespFirmwareVersionGet.encode(message.respFirmwareVersionGet, writer.uint32(/* id 123, wireType 2 =*/986).fork()).ldelim();\n        if (message.cmdWifiStaMacGet != null && Object.hasOwnProperty.call(message, \"cmdWifiStaMacGet\"))\n            $root.CmdWifiStaMacGet.encode(message.cmdWifiStaMacGet, writer.uint32(/* id 124, wireType 2 =*/994).fork()).ldelim();\n        if (message.respWifiStaMacGet != null && Object.hasOwnProperty.call(message, \"respWifiStaMacGet\"))\n            $root.RespWifiStaMacGet.encode(message.respWifiStaMacGet, writer.uint32(/* id 125, wireType 2 =*/1002).fork()).ldelim();\n        if (message.cmdWifiStaIpGet != null && Object.hasOwnProperty.call(message, \"cmdWifiStaIpGet\"))\n            $root.CmdWifiStaIpGet.encode(message.cmdWifiStaIpGet, writer.uint32(/* id 126, wireType 2 =*/1010).fork()).ldelim();\n        if (message.respWifiStaIpGet != null && Object.hasOwnProperty.call(message, \"respWifiStaIpGet\"))\n            $root.RespWifiStaIpGet.encode(message.respWifiStaIpGet, writer.uint32(/* id 127, wireType 2 =*/1018).fork()).ldelim();\n        if (message.cmdPing != null && Object.hasOwnProperty.call(message, \"cmdPing\"))\n            $root.CmdPing.encode(message.cmdPing, writer.uint32(/* id 128, wireType 2 =*/1026).fork()).ldelim();\n        if (message.respPing != null && Object.hasOwnProperty.call(message, \"respPing\"))\n            $root.RespPing.encode(message.respPing, writer.uint32(/* id 129, wireType 2 =*/1034).fork()).ldelim();\n        if (message.cmdEioConnect != null && Object.hasOwnProperty.call(message, \"cmdEioConnect\"))\n            $root.CmdEIOConnect.encode(message.cmdEioConnect, writer.uint32(/* id 130, wireType 2 =*/1042).fork()).ldelim();\n        if (message.respEioConnect != null && Object.hasOwnProperty.call(message, \"respEioConnect\"))\n            $root.RespEIOConnect.encode(message.respEioConnect, writer.uint32(/* id 131, wireType 2 =*/1050).fork()).ldelim();\n        if (message.cmdConfigWifiSsidGet != null && Object.hasOwnProperty.call(message, \"cmdConfigWifiSsidGet\"))\n            $root.CmdConfigWifiSsidGet.encode(message.cmdConfigWifiSsidGet, writer.uint32(/* id 132, wireType 2 =*/1058).fork()).ldelim();\n        if (message.respConfigWifiSsidGet != null && Object.hasOwnProperty.call(message, \"respConfigWifiSsidGet\"))\n            $root.RespConfigWifiSsidGet.encode(message.respConfigWifiSsidGet, writer.uint32(/* id 133, wireType 2 =*/1066).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified HdyPayload message, length delimited. Does not implicitly {@link HdyPayload.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof HdyPayload\n     * @static\n     * @param {HdyPayload} message HdyPayload message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    HdyPayload.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a HdyPayload message from the specified reader or buffer.\n     * @function decode\n     * @memberof HdyPayload\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {HdyPayload} HdyPayload\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    HdyPayload.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.HdyPayload();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.msg = reader.int32();\n                break;\n            case 100:\n                message.cmdProtocolVersionGet = $root.CmdProtocolVersionGet.decode(reader, reader.uint32());\n                break;\n            case 101:\n                message.respProtocolVersionGet = $root.RespProtocolVersionGet.decode(reader, reader.uint32());\n                break;\n            case 102:\n                message.cmdConnectionKeyGet = $root.CmdConnectionKeyGet.decode(reader, reader.uint32());\n                break;\n            case 103:\n                message.respConnectionKeyGet = $root.RespConnectionKeyGet.decode(reader, reader.uint32());\n                break;\n            case 106:\n                message.cmdConnectionKeyGen = $root.CmdConnectionKeyGen.decode(reader, reader.uint32());\n                break;\n            case 107:\n                message.respConnectionKeyGen = $root.RespConnectionKeyGen.decode(reader, reader.uint32());\n                break;\n            case 108:\n                message.cmdSerialNumberGet = $root.CmdSerialNumberGet.decode(reader, reader.uint32());\n                break;\n            case 109:\n                message.respSerialNumberGet = $root.RespSerialNumberGet.decode(reader, reader.uint32());\n                break;\n            case 110:\n                message.cmdProductionDateGet = $root.CmdProductionDateGet.decode(reader, reader.uint32());\n                break;\n            case 111:\n                message.respProductionDateGet = $root.RespProductionDateGet.decode(reader, reader.uint32());\n                break;\n            case 112:\n                message.cmdHardwareVersionGet = $root.CmdHardwareVersionGet.decode(reader, reader.uint32());\n                break;\n            case 113:\n                message.respHardwareVersionGet = $root.RespHardwareVersionGet.decode(reader, reader.uint32());\n                break;\n            case 114:\n                message.cmdPcbaVersionGet = $root.CmdPcbaVersionGet.decode(reader, reader.uint32());\n                break;\n            case 115:\n                message.respPcbaVersionGet = $root.RespPcbaVersionGet.decode(reader, reader.uint32());\n                break;\n            case 116:\n                message.cmdModelGet = $root.CmdModelGet.decode(reader, reader.uint32());\n                break;\n            case 117:\n                message.respModelGet = $root.RespModelGet.decode(reader, reader.uint32());\n                break;\n            case 118:\n                message.cmdTermsSet = $root.CmdTermsSet.decode(reader, reader.uint32());\n                break;\n            case 119:\n                message.respTermsSet = $root.RespTermsSet.decode(reader, reader.uint32());\n                break;\n            case 120:\n                message.cmdTermsGet = $root.CmdTermsGet.decode(reader, reader.uint32());\n                break;\n            case 121:\n                message.respTermsGet = $root.RespTermsGet.decode(reader, reader.uint32());\n                break;\n            case 122:\n                message.cmdFirmwareVersionGet = $root.CmdFirmwareVersionGet.decode(reader, reader.uint32());\n                break;\n            case 123:\n                message.respFirmwareVersionGet = $root.RespFirmwareVersionGet.decode(reader, reader.uint32());\n                break;\n            case 124:\n                message.cmdWifiStaMacGet = $root.CmdWifiStaMacGet.decode(reader, reader.uint32());\n                break;\n            case 125:\n                message.respWifiStaMacGet = $root.RespWifiStaMacGet.decode(reader, reader.uint32());\n                break;\n            case 126:\n                message.cmdWifiStaIpGet = $root.CmdWifiStaIpGet.decode(reader, reader.uint32());\n                break;\n            case 127:\n                message.respWifiStaIpGet = $root.RespWifiStaIpGet.decode(reader, reader.uint32());\n                break;\n            case 128:\n                message.cmdPing = $root.CmdPing.decode(reader, reader.uint32());\n                break;\n            case 129:\n                message.respPing = $root.RespPing.decode(reader, reader.uint32());\n                break;\n            case 130:\n                message.cmdEioConnect = $root.CmdEIOConnect.decode(reader, reader.uint32());\n                break;\n            case 131:\n                message.respEioConnect = $root.RespEIOConnect.decode(reader, reader.uint32());\n                break;\n            case 132:\n                message.cmdConfigWifiSsidGet = $root.CmdConfigWifiSsidGet.decode(reader, reader.uint32());\n                break;\n            case 133:\n                message.respConfigWifiSsidGet = $root.RespConfigWifiSsidGet.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a HdyPayload message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof HdyPayload\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {HdyPayload} HdyPayload\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    HdyPayload.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a HdyPayload message.\n     * @function verify\n     * @memberof HdyPayload\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    HdyPayload.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        let properties = {};\n        if (message.msg != null && message.hasOwnProperty(\"msg\"))\n            switch (message.msg) {\n            default:\n                return \"msg: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n            case 6:\n            case 7:\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n            case 16:\n            case 17:\n            case 18:\n            case 19:\n            case 20:\n            case 21:\n            case 22:\n            case 23:\n            case 24:\n            case 25:\n            case 26:\n            case 27:\n            case 28:\n            case 29:\n            case 30:\n            case 31:\n            case 32:\n            case 33:\n                break;\n            }\n        if (message.cmdProtocolVersionGet != null && message.hasOwnProperty(\"cmdProtocolVersionGet\")) {\n            properties.payload = 1;\n            {\n                let error = $root.CmdProtocolVersionGet.verify(message.cmdProtocolVersionGet);\n                if (error)\n                    return \"cmdProtocolVersionGet.\" + error;\n            }\n        }\n        if (message.respProtocolVersionGet != null && message.hasOwnProperty(\"respProtocolVersionGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.RespProtocolVersionGet.verify(message.respProtocolVersionGet);\n                if (error)\n                    return \"respProtocolVersionGet.\" + error;\n            }\n        }\n        if (message.cmdConnectionKeyGet != null && message.hasOwnProperty(\"cmdConnectionKeyGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.CmdConnectionKeyGet.verify(message.cmdConnectionKeyGet);\n                if (error)\n                    return \"cmdConnectionKeyGet.\" + error;\n            }\n        }\n        if (message.respConnectionKeyGet != null && message.hasOwnProperty(\"respConnectionKeyGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.RespConnectionKeyGet.verify(message.respConnectionKeyGet);\n                if (error)\n                    return \"respConnectionKeyGet.\" + error;\n            }\n        }\n        if (message.cmdConnectionKeyGen != null && message.hasOwnProperty(\"cmdConnectionKeyGen\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.CmdConnectionKeyGen.verify(message.cmdConnectionKeyGen);\n                if (error)\n                    return \"cmdConnectionKeyGen.\" + error;\n            }\n        }\n        if (message.respConnectionKeyGen != null && message.hasOwnProperty(\"respConnectionKeyGen\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.RespConnectionKeyGen.verify(message.respConnectionKeyGen);\n                if (error)\n                    return \"respConnectionKeyGen.\" + error;\n            }\n        }\n        if (message.cmdSerialNumberGet != null && message.hasOwnProperty(\"cmdSerialNumberGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.CmdSerialNumberGet.verify(message.cmdSerialNumberGet);\n                if (error)\n                    return \"cmdSerialNumberGet.\" + error;\n            }\n        }\n        if (message.respSerialNumberGet != null && message.hasOwnProperty(\"respSerialNumberGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.RespSerialNumberGet.verify(message.respSerialNumberGet);\n                if (error)\n                    return \"respSerialNumberGet.\" + error;\n            }\n        }\n        if (message.cmdProductionDateGet != null && message.hasOwnProperty(\"cmdProductionDateGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.CmdProductionDateGet.verify(message.cmdProductionDateGet);\n                if (error)\n                    return \"cmdProductionDateGet.\" + error;\n            }\n        }\n        if (message.respProductionDateGet != null && message.hasOwnProperty(\"respProductionDateGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.RespProductionDateGet.verify(message.respProductionDateGet);\n                if (error)\n                    return \"respProductionDateGet.\" + error;\n            }\n        }\n        if (message.cmdHardwareVersionGet != null && message.hasOwnProperty(\"cmdHardwareVersionGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.CmdHardwareVersionGet.verify(message.cmdHardwareVersionGet);\n                if (error)\n                    return \"cmdHardwareVersionGet.\" + error;\n            }\n        }\n        if (message.respHardwareVersionGet != null && message.hasOwnProperty(\"respHardwareVersionGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.RespHardwareVersionGet.verify(message.respHardwareVersionGet);\n                if (error)\n                    return \"respHardwareVersionGet.\" + error;\n            }\n        }\n        if (message.cmdPcbaVersionGet != null && message.hasOwnProperty(\"cmdPcbaVersionGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.CmdPcbaVersionGet.verify(message.cmdPcbaVersionGet);\n                if (error)\n                    return \"cmdPcbaVersionGet.\" + error;\n            }\n        }\n        if (message.respPcbaVersionGet != null && message.hasOwnProperty(\"respPcbaVersionGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.RespPcbaVersionGet.verify(message.respPcbaVersionGet);\n                if (error)\n                    return \"respPcbaVersionGet.\" + error;\n            }\n        }\n        if (message.cmdModelGet != null && message.hasOwnProperty(\"cmdModelGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.CmdModelGet.verify(message.cmdModelGet);\n                if (error)\n                    return \"cmdModelGet.\" + error;\n            }\n        }\n        if (message.respModelGet != null && message.hasOwnProperty(\"respModelGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.RespModelGet.verify(message.respModelGet);\n                if (error)\n                    return \"respModelGet.\" + error;\n            }\n        }\n        if (message.cmdTermsSet != null && message.hasOwnProperty(\"cmdTermsSet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.CmdTermsSet.verify(message.cmdTermsSet);\n                if (error)\n                    return \"cmdTermsSet.\" + error;\n            }\n        }\n        if (message.respTermsSet != null && message.hasOwnProperty(\"respTermsSet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.RespTermsSet.verify(message.respTermsSet);\n                if (error)\n                    return \"respTermsSet.\" + error;\n            }\n        }\n        if (message.cmdTermsGet != null && message.hasOwnProperty(\"cmdTermsGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.CmdTermsGet.verify(message.cmdTermsGet);\n                if (error)\n                    return \"cmdTermsGet.\" + error;\n            }\n        }\n        if (message.respTermsGet != null && message.hasOwnProperty(\"respTermsGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.RespTermsGet.verify(message.respTermsGet);\n                if (error)\n                    return \"respTermsGet.\" + error;\n            }\n        }\n        if (message.cmdFirmwareVersionGet != null && message.hasOwnProperty(\"cmdFirmwareVersionGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.CmdFirmwareVersionGet.verify(message.cmdFirmwareVersionGet);\n                if (error)\n                    return \"cmdFirmwareVersionGet.\" + error;\n            }\n        }\n        if (message.respFirmwareVersionGet != null && message.hasOwnProperty(\"respFirmwareVersionGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.RespFirmwareVersionGet.verify(message.respFirmwareVersionGet);\n                if (error)\n                    return \"respFirmwareVersionGet.\" + error;\n            }\n        }\n        if (message.cmdWifiStaMacGet != null && message.hasOwnProperty(\"cmdWifiStaMacGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.CmdWifiStaMacGet.verify(message.cmdWifiStaMacGet);\n                if (error)\n                    return \"cmdWifiStaMacGet.\" + error;\n            }\n        }\n        if (message.respWifiStaMacGet != null && message.hasOwnProperty(\"respWifiStaMacGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.RespWifiStaMacGet.verify(message.respWifiStaMacGet);\n                if (error)\n                    return \"respWifiStaMacGet.\" + error;\n            }\n        }\n        if (message.cmdWifiStaIpGet != null && message.hasOwnProperty(\"cmdWifiStaIpGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.CmdWifiStaIpGet.verify(message.cmdWifiStaIpGet);\n                if (error)\n                    return \"cmdWifiStaIpGet.\" + error;\n            }\n        }\n        if (message.respWifiStaIpGet != null && message.hasOwnProperty(\"respWifiStaIpGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.RespWifiStaIpGet.verify(message.respWifiStaIpGet);\n                if (error)\n                    return \"respWifiStaIpGet.\" + error;\n            }\n        }\n        if (message.cmdPing != null && message.hasOwnProperty(\"cmdPing\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.CmdPing.verify(message.cmdPing);\n                if (error)\n                    return \"cmdPing.\" + error;\n            }\n        }\n        if (message.respPing != null && message.hasOwnProperty(\"respPing\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.RespPing.verify(message.respPing);\n                if (error)\n                    return \"respPing.\" + error;\n            }\n        }\n        if (message.cmdEioConnect != null && message.hasOwnProperty(\"cmdEioConnect\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.CmdEIOConnect.verify(message.cmdEioConnect);\n                if (error)\n                    return \"cmdEioConnect.\" + error;\n            }\n        }\n        if (message.respEioConnect != null && message.hasOwnProperty(\"respEioConnect\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.RespEIOConnect.verify(message.respEioConnect);\n                if (error)\n                    return \"respEioConnect.\" + error;\n            }\n        }\n        if (message.cmdConfigWifiSsidGet != null && message.hasOwnProperty(\"cmdConfigWifiSsidGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.CmdConfigWifiSsidGet.verify(message.cmdConfigWifiSsidGet);\n                if (error)\n                    return \"cmdConfigWifiSsidGet.\" + error;\n            }\n        }\n        if (message.respConfigWifiSsidGet != null && message.hasOwnProperty(\"respConfigWifiSsidGet\")) {\n            if (properties.payload === 1)\n                return \"payload: multiple values\";\n            properties.payload = 1;\n            {\n                let error = $root.RespConfigWifiSsidGet.verify(message.respConfigWifiSsidGet);\n                if (error)\n                    return \"respConfigWifiSsidGet.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a HdyPayload message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof HdyPayload\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {HdyPayload} HdyPayload\n     */\n    HdyPayload.fromObject = function fromObject(object) {\n        if (object instanceof $root.HdyPayload)\n            return object;\n        let message = new $root.HdyPayload();\n        switch (object.msg) {\n        case \"TypeCmdProtocolVersionGet\":\n        case 0:\n            message.msg = 0;\n            break;\n        case \"TypeRespProtocolVersionGet\":\n        case 1:\n            message.msg = 1;\n            break;\n        case \"TypeCmdConnectionKeyGet\":\n        case 2:\n            message.msg = 2;\n            break;\n        case \"TypeRespConnectionKeyGet\":\n        case 3:\n            message.msg = 3;\n            break;\n        case \"TypeCmdConnectionKeyGen\":\n        case 6:\n            message.msg = 6;\n            break;\n        case \"TypeRespConnectionKeyGen\":\n        case 7:\n            message.msg = 7;\n            break;\n        case \"TypeCmdSerialNumberGet\":\n        case 8:\n            message.msg = 8;\n            break;\n        case \"TypeRespSerialNumberGet\":\n        case 9:\n            message.msg = 9;\n            break;\n        case \"TypeCmdProductionDateGet\":\n        case 10:\n            message.msg = 10;\n            break;\n        case \"TypeRespProductionDateGet\":\n        case 11:\n            message.msg = 11;\n            break;\n        case \"TypeCmdHardwareVersionGet\":\n        case 12:\n            message.msg = 12;\n            break;\n        case \"TypeRespHardwareVersionGet\":\n        case 13:\n            message.msg = 13;\n            break;\n        case \"TypeCmdPcbaVersionGet\":\n        case 14:\n            message.msg = 14;\n            break;\n        case \"TypeRespPcbaVersionGet\":\n        case 15:\n            message.msg = 15;\n            break;\n        case \"TypeCmdModelGet\":\n        case 16:\n            message.msg = 16;\n            break;\n        case \"TypeRespModelGet\":\n        case 17:\n            message.msg = 17;\n            break;\n        case \"TypeCmdTermsSet\":\n        case 18:\n            message.msg = 18;\n            break;\n        case \"TypeRespTermsSet\":\n        case 19:\n            message.msg = 19;\n            break;\n        case \"TypeCmdTermsGet\":\n        case 20:\n            message.msg = 20;\n            break;\n        case \"TypeRespTermsGet\":\n        case 21:\n            message.msg = 21;\n            break;\n        case \"TypeCmdFirmwareVersionGet\":\n        case 22:\n            message.msg = 22;\n            break;\n        case \"TypeRespFirmwareVersionGet\":\n        case 23:\n            message.msg = 23;\n            break;\n        case \"TypeCmdWifiStaMacGet\":\n        case 24:\n            message.msg = 24;\n            break;\n        case \"TypeRespWifiStaMacGet\":\n        case 25:\n            message.msg = 25;\n            break;\n        case \"TypeCmdWifiStaIpGet\":\n        case 26:\n            message.msg = 26;\n            break;\n        case \"TypeRespWifiStaIpGet\":\n        case 27:\n            message.msg = 27;\n            break;\n        case \"TypeCmdPing\":\n        case 28:\n            message.msg = 28;\n            break;\n        case \"TypeRespPing\":\n        case 29:\n            message.msg = 29;\n            break;\n        case \"TypeCmdEIOConnect\":\n        case 30:\n            message.msg = 30;\n            break;\n        case \"TypeRespEIOConnect\":\n        case 31:\n            message.msg = 31;\n            break;\n        case \"TypeCmdConfigWifiSsidGet\":\n        case 32:\n            message.msg = 32;\n            break;\n        case \"TypeRespConfigWifiSsidGet\":\n        case 33:\n            message.msg = 33;\n            break;\n        }\n        if (object.cmdProtocolVersionGet != null) {\n            if (typeof object.cmdProtocolVersionGet !== \"object\")\n                throw TypeError(\".HdyPayload.cmdProtocolVersionGet: object expected\");\n            message.cmdProtocolVersionGet = $root.CmdProtocolVersionGet.fromObject(object.cmdProtocolVersionGet);\n        }\n        if (object.respProtocolVersionGet != null) {\n            if (typeof object.respProtocolVersionGet !== \"object\")\n                throw TypeError(\".HdyPayload.respProtocolVersionGet: object expected\");\n            message.respProtocolVersionGet = $root.RespProtocolVersionGet.fromObject(object.respProtocolVersionGet);\n        }\n        if (object.cmdConnectionKeyGet != null) {\n            if (typeof object.cmdConnectionKeyGet !== \"object\")\n                throw TypeError(\".HdyPayload.cmdConnectionKeyGet: object expected\");\n            message.cmdConnectionKeyGet = $root.CmdConnectionKeyGet.fromObject(object.cmdConnectionKeyGet);\n        }\n        if (object.respConnectionKeyGet != null) {\n            if (typeof object.respConnectionKeyGet !== \"object\")\n                throw TypeError(\".HdyPayload.respConnectionKeyGet: object expected\");\n            message.respConnectionKeyGet = $root.RespConnectionKeyGet.fromObject(object.respConnectionKeyGet);\n        }\n        if (object.cmdConnectionKeyGen != null) {\n            if (typeof object.cmdConnectionKeyGen !== \"object\")\n                throw TypeError(\".HdyPayload.cmdConnectionKeyGen: object expected\");\n            message.cmdConnectionKeyGen = $root.CmdConnectionKeyGen.fromObject(object.cmdConnectionKeyGen);\n        }\n        if (object.respConnectionKeyGen != null) {\n            if (typeof object.respConnectionKeyGen !== \"object\")\n                throw TypeError(\".HdyPayload.respConnectionKeyGen: object expected\");\n            message.respConnectionKeyGen = $root.RespConnectionKeyGen.fromObject(object.respConnectionKeyGen);\n        }\n        if (object.cmdSerialNumberGet != null) {\n            if (typeof object.cmdSerialNumberGet !== \"object\")\n                throw TypeError(\".HdyPayload.cmdSerialNumberGet: object expected\");\n            message.cmdSerialNumberGet = $root.CmdSerialNumberGet.fromObject(object.cmdSerialNumberGet);\n        }\n        if (object.respSerialNumberGet != null) {\n            if (typeof object.respSerialNumberGet !== \"object\")\n                throw TypeError(\".HdyPayload.respSerialNumberGet: object expected\");\n            message.respSerialNumberGet = $root.RespSerialNumberGet.fromObject(object.respSerialNumberGet);\n        }\n        if (object.cmdProductionDateGet != null) {\n            if (typeof object.cmdProductionDateGet !== \"object\")\n                throw TypeError(\".HdyPayload.cmdProductionDateGet: object expected\");\n            message.cmdProductionDateGet = $root.CmdProductionDateGet.fromObject(object.cmdProductionDateGet);\n        }\n        if (object.respProductionDateGet != null) {\n            if (typeof object.respProductionDateGet !== \"object\")\n                throw TypeError(\".HdyPayload.respProductionDateGet: object expected\");\n            message.respProductionDateGet = $root.RespProductionDateGet.fromObject(object.respProductionDateGet);\n        }\n        if (object.cmdHardwareVersionGet != null) {\n            if (typeof object.cmdHardwareVersionGet !== \"object\")\n                throw TypeError(\".HdyPayload.cmdHardwareVersionGet: object expected\");\n            message.cmdHardwareVersionGet = $root.CmdHardwareVersionGet.fromObject(object.cmdHardwareVersionGet);\n        }\n        if (object.respHardwareVersionGet != null) {\n            if (typeof object.respHardwareVersionGet !== \"object\")\n                throw TypeError(\".HdyPayload.respHardwareVersionGet: object expected\");\n            message.respHardwareVersionGet = $root.RespHardwareVersionGet.fromObject(object.respHardwareVersionGet);\n        }\n        if (object.cmdPcbaVersionGet != null) {\n            if (typeof object.cmdPcbaVersionGet !== \"object\")\n                throw TypeError(\".HdyPayload.cmdPcbaVersionGet: object expected\");\n            message.cmdPcbaVersionGet = $root.CmdPcbaVersionGet.fromObject(object.cmdPcbaVersionGet);\n        }\n        if (object.respPcbaVersionGet != null) {\n            if (typeof object.respPcbaVersionGet !== \"object\")\n                throw TypeError(\".HdyPayload.respPcbaVersionGet: object expected\");\n            message.respPcbaVersionGet = $root.RespPcbaVersionGet.fromObject(object.respPcbaVersionGet);\n        }\n        if (object.cmdModelGet != null) {\n            if (typeof object.cmdModelGet !== \"object\")\n                throw TypeError(\".HdyPayload.cmdModelGet: object expected\");\n            message.cmdModelGet = $root.CmdModelGet.fromObject(object.cmdModelGet);\n        }\n        if (object.respModelGet != null) {\n            if (typeof object.respModelGet !== \"object\")\n                throw TypeError(\".HdyPayload.respModelGet: object expected\");\n            message.respModelGet = $root.RespModelGet.fromObject(object.respModelGet);\n        }\n        if (object.cmdTermsSet != null) {\n            if (typeof object.cmdTermsSet !== \"object\")\n                throw TypeError(\".HdyPayload.cmdTermsSet: object expected\");\n            message.cmdTermsSet = $root.CmdTermsSet.fromObject(object.cmdTermsSet);\n        }\n        if (object.respTermsSet != null) {\n            if (typeof object.respTermsSet !== \"object\")\n                throw TypeError(\".HdyPayload.respTermsSet: object expected\");\n            message.respTermsSet = $root.RespTermsSet.fromObject(object.respTermsSet);\n        }\n        if (object.cmdTermsGet != null) {\n            if (typeof object.cmdTermsGet !== \"object\")\n                throw TypeError(\".HdyPayload.cmdTermsGet: object expected\");\n            message.cmdTermsGet = $root.CmdTermsGet.fromObject(object.cmdTermsGet);\n        }\n        if (object.respTermsGet != null) {\n            if (typeof object.respTermsGet !== \"object\")\n                throw TypeError(\".HdyPayload.respTermsGet: object expected\");\n            message.respTermsGet = $root.RespTermsGet.fromObject(object.respTermsGet);\n        }\n        if (object.cmdFirmwareVersionGet != null) {\n            if (typeof object.cmdFirmwareVersionGet !== \"object\")\n                throw TypeError(\".HdyPayload.cmdFirmwareVersionGet: object expected\");\n            message.cmdFirmwareVersionGet = $root.CmdFirmwareVersionGet.fromObject(object.cmdFirmwareVersionGet);\n        }\n        if (object.respFirmwareVersionGet != null) {\n            if (typeof object.respFirmwareVersionGet !== \"object\")\n                throw TypeError(\".HdyPayload.respFirmwareVersionGet: object expected\");\n            message.respFirmwareVersionGet = $root.RespFirmwareVersionGet.fromObject(object.respFirmwareVersionGet);\n        }\n        if (object.cmdWifiStaMacGet != null) {\n            if (typeof object.cmdWifiStaMacGet !== \"object\")\n                throw TypeError(\".HdyPayload.cmdWifiStaMacGet: object expected\");\n            message.cmdWifiStaMacGet = $root.CmdWifiStaMacGet.fromObject(object.cmdWifiStaMacGet);\n        }\n        if (object.respWifiStaMacGet != null) {\n            if (typeof object.respWifiStaMacGet !== \"object\")\n                throw TypeError(\".HdyPayload.respWifiStaMacGet: object expected\");\n            message.respWifiStaMacGet = $root.RespWifiStaMacGet.fromObject(object.respWifiStaMacGet);\n        }\n        if (object.cmdWifiStaIpGet != null) {\n            if (typeof object.cmdWifiStaIpGet !== \"object\")\n                throw TypeError(\".HdyPayload.cmdWifiStaIpGet: object expected\");\n            message.cmdWifiStaIpGet = $root.CmdWifiStaIpGet.fromObject(object.cmdWifiStaIpGet);\n        }\n        if (object.respWifiStaIpGet != null) {\n            if (typeof object.respWifiStaIpGet !== \"object\")\n                throw TypeError(\".HdyPayload.respWifiStaIpGet: object expected\");\n            message.respWifiStaIpGet = $root.RespWifiStaIpGet.fromObject(object.respWifiStaIpGet);\n        }\n        if (object.cmdPing != null) {\n            if (typeof object.cmdPing !== \"object\")\n                throw TypeError(\".HdyPayload.cmdPing: object expected\");\n            message.cmdPing = $root.CmdPing.fromObject(object.cmdPing);\n        }\n        if (object.respPing != null) {\n            if (typeof object.respPing !== \"object\")\n                throw TypeError(\".HdyPayload.respPing: object expected\");\n            message.respPing = $root.RespPing.fromObject(object.respPing);\n        }\n        if (object.cmdEioConnect != null) {\n            if (typeof object.cmdEioConnect !== \"object\")\n                throw TypeError(\".HdyPayload.cmdEioConnect: object expected\");\n            message.cmdEioConnect = $root.CmdEIOConnect.fromObject(object.cmdEioConnect);\n        }\n        if (object.respEioConnect != null) {\n            if (typeof object.respEioConnect !== \"object\")\n                throw TypeError(\".HdyPayload.respEioConnect: object expected\");\n            message.respEioConnect = $root.RespEIOConnect.fromObject(object.respEioConnect);\n        }\n        if (object.cmdConfigWifiSsidGet != null) {\n            if (typeof object.cmdConfigWifiSsidGet !== \"object\")\n                throw TypeError(\".HdyPayload.cmdConfigWifiSsidGet: object expected\");\n            message.cmdConfigWifiSsidGet = $root.CmdConfigWifiSsidGet.fromObject(object.cmdConfigWifiSsidGet);\n        }\n        if (object.respConfigWifiSsidGet != null) {\n            if (typeof object.respConfigWifiSsidGet !== \"object\")\n                throw TypeError(\".HdyPayload.respConfigWifiSsidGet: object expected\");\n            message.respConfigWifiSsidGet = $root.RespConfigWifiSsidGet.fromObject(object.respConfigWifiSsidGet);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a HdyPayload message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof HdyPayload\n     * @static\n     * @param {HdyPayload} message HdyPayload\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    HdyPayload.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults)\n            object.msg = options.enums === String ? \"TypeCmdProtocolVersionGet\" : 0;\n        if (message.msg != null && message.hasOwnProperty(\"msg\"))\n            object.msg = options.enums === String ? $root.HdyMsgType[message.msg] : message.msg;\n        if (message.cmdProtocolVersionGet != null && message.hasOwnProperty(\"cmdProtocolVersionGet\")) {\n            object.cmdProtocolVersionGet = $root.CmdProtocolVersionGet.toObject(message.cmdProtocolVersionGet, options);\n            if (options.oneofs)\n                object.payload = \"cmdProtocolVersionGet\";\n        }\n        if (message.respProtocolVersionGet != null && message.hasOwnProperty(\"respProtocolVersionGet\")) {\n            object.respProtocolVersionGet = $root.RespProtocolVersionGet.toObject(message.respProtocolVersionGet, options);\n            if (options.oneofs)\n                object.payload = \"respProtocolVersionGet\";\n        }\n        if (message.cmdConnectionKeyGet != null && message.hasOwnProperty(\"cmdConnectionKeyGet\")) {\n            object.cmdConnectionKeyGet = $root.CmdConnectionKeyGet.toObject(message.cmdConnectionKeyGet, options);\n            if (options.oneofs)\n                object.payload = \"cmdConnectionKeyGet\";\n        }\n        if (message.respConnectionKeyGet != null && message.hasOwnProperty(\"respConnectionKeyGet\")) {\n            object.respConnectionKeyGet = $root.RespConnectionKeyGet.toObject(message.respConnectionKeyGet, options);\n            if (options.oneofs)\n                object.payload = \"respConnectionKeyGet\";\n        }\n        if (message.cmdConnectionKeyGen != null && message.hasOwnProperty(\"cmdConnectionKeyGen\")) {\n            object.cmdConnectionKeyGen = $root.CmdConnectionKeyGen.toObject(message.cmdConnectionKeyGen, options);\n            if (options.oneofs)\n                object.payload = \"cmdConnectionKeyGen\";\n        }\n        if (message.respConnectionKeyGen != null && message.hasOwnProperty(\"respConnectionKeyGen\")) {\n            object.respConnectionKeyGen = $root.RespConnectionKeyGen.toObject(message.respConnectionKeyGen, options);\n            if (options.oneofs)\n                object.payload = \"respConnectionKeyGen\";\n        }\n        if (message.cmdSerialNumberGet != null && message.hasOwnProperty(\"cmdSerialNumberGet\")) {\n            object.cmdSerialNumberGet = $root.CmdSerialNumberGet.toObject(message.cmdSerialNumberGet, options);\n            if (options.oneofs)\n                object.payload = \"cmdSerialNumberGet\";\n        }\n        if (message.respSerialNumberGet != null && message.hasOwnProperty(\"respSerialNumberGet\")) {\n            object.respSerialNumberGet = $root.RespSerialNumberGet.toObject(message.respSerialNumberGet, options);\n            if (options.oneofs)\n                object.payload = \"respSerialNumberGet\";\n        }\n        if (message.cmdProductionDateGet != null && message.hasOwnProperty(\"cmdProductionDateGet\")) {\n            object.cmdProductionDateGet = $root.CmdProductionDateGet.toObject(message.cmdProductionDateGet, options);\n            if (options.oneofs)\n                object.payload = \"cmdProductionDateGet\";\n        }\n        if (message.respProductionDateGet != null && message.hasOwnProperty(\"respProductionDateGet\")) {\n            object.respProductionDateGet = $root.RespProductionDateGet.toObject(message.respProductionDateGet, options);\n            if (options.oneofs)\n                object.payload = \"respProductionDateGet\";\n        }\n        if (message.cmdHardwareVersionGet != null && message.hasOwnProperty(\"cmdHardwareVersionGet\")) {\n            object.cmdHardwareVersionGet = $root.CmdHardwareVersionGet.toObject(message.cmdHardwareVersionGet, options);\n            if (options.oneofs)\n                object.payload = \"cmdHardwareVersionGet\";\n        }\n        if (message.respHardwareVersionGet != null && message.hasOwnProperty(\"respHardwareVersionGet\")) {\n            object.respHardwareVersionGet = $root.RespHardwareVersionGet.toObject(message.respHardwareVersionGet, options);\n            if (options.oneofs)\n                object.payload = \"respHardwareVersionGet\";\n        }\n        if (message.cmdPcbaVersionGet != null && message.hasOwnProperty(\"cmdPcbaVersionGet\")) {\n            object.cmdPcbaVersionGet = $root.CmdPcbaVersionGet.toObject(message.cmdPcbaVersionGet, options);\n            if (options.oneofs)\n                object.payload = \"cmdPcbaVersionGet\";\n        }\n        if (message.respPcbaVersionGet != null && message.hasOwnProperty(\"respPcbaVersionGet\")) {\n            object.respPcbaVersionGet = $root.RespPcbaVersionGet.toObject(message.respPcbaVersionGet, options);\n            if (options.oneofs)\n                object.payload = \"respPcbaVersionGet\";\n        }\n        if (message.cmdModelGet != null && message.hasOwnProperty(\"cmdModelGet\")) {\n            object.cmdModelGet = $root.CmdModelGet.toObject(message.cmdModelGet, options);\n            if (options.oneofs)\n                object.payload = \"cmdModelGet\";\n        }\n        if (message.respModelGet != null && message.hasOwnProperty(\"respModelGet\")) {\n            object.respModelGet = $root.RespModelGet.toObject(message.respModelGet, options);\n            if (options.oneofs)\n                object.payload = \"respModelGet\";\n        }\n        if (message.cmdTermsSet != null && message.hasOwnProperty(\"cmdTermsSet\")) {\n            object.cmdTermsSet = $root.CmdTermsSet.toObject(message.cmdTermsSet, options);\n            if (options.oneofs)\n                object.payload = \"cmdTermsSet\";\n        }\n        if (message.respTermsSet != null && message.hasOwnProperty(\"respTermsSet\")) {\n            object.respTermsSet = $root.RespTermsSet.toObject(message.respTermsSet, options);\n            if (options.oneofs)\n                object.payload = \"respTermsSet\";\n        }\n        if (message.cmdTermsGet != null && message.hasOwnProperty(\"cmdTermsGet\")) {\n            object.cmdTermsGet = $root.CmdTermsGet.toObject(message.cmdTermsGet, options);\n            if (options.oneofs)\n                object.payload = \"cmdTermsGet\";\n        }\n        if (message.respTermsGet != null && message.hasOwnProperty(\"respTermsGet\")) {\n            object.respTermsGet = $root.RespTermsGet.toObject(message.respTermsGet, options);\n            if (options.oneofs)\n                object.payload = \"respTermsGet\";\n        }\n        if (message.cmdFirmwareVersionGet != null && message.hasOwnProperty(\"cmdFirmwareVersionGet\")) {\n            object.cmdFirmwareVersionGet = $root.CmdFirmwareVersionGet.toObject(message.cmdFirmwareVersionGet, options);\n            if (options.oneofs)\n                object.payload = \"cmdFirmwareVersionGet\";\n        }\n        if (message.respFirmwareVersionGet != null && message.hasOwnProperty(\"respFirmwareVersionGet\")) {\n            object.respFirmwareVersionGet = $root.RespFirmwareVersionGet.toObject(message.respFirmwareVersionGet, options);\n            if (options.oneofs)\n                object.payload = \"respFirmwareVersionGet\";\n        }\n        if (message.cmdWifiStaMacGet != null && message.hasOwnProperty(\"cmdWifiStaMacGet\")) {\n            object.cmdWifiStaMacGet = $root.CmdWifiStaMacGet.toObject(message.cmdWifiStaMacGet, options);\n            if (options.oneofs)\n                object.payload = \"cmdWifiStaMacGet\";\n        }\n        if (message.respWifiStaMacGet != null && message.hasOwnProperty(\"respWifiStaMacGet\")) {\n            object.respWifiStaMacGet = $root.RespWifiStaMacGet.toObject(message.respWifiStaMacGet, options);\n            if (options.oneofs)\n                object.payload = \"respWifiStaMacGet\";\n        }\n        if (message.cmdWifiStaIpGet != null && message.hasOwnProperty(\"cmdWifiStaIpGet\")) {\n            object.cmdWifiStaIpGet = $root.CmdWifiStaIpGet.toObject(message.cmdWifiStaIpGet, options);\n            if (options.oneofs)\n                object.payload = \"cmdWifiStaIpGet\";\n        }\n        if (message.respWifiStaIpGet != null && message.hasOwnProperty(\"respWifiStaIpGet\")) {\n            object.respWifiStaIpGet = $root.RespWifiStaIpGet.toObject(message.respWifiStaIpGet, options);\n            if (options.oneofs)\n                object.payload = \"respWifiStaIpGet\";\n        }\n        if (message.cmdPing != null && message.hasOwnProperty(\"cmdPing\")) {\n            object.cmdPing = $root.CmdPing.toObject(message.cmdPing, options);\n            if (options.oneofs)\n                object.payload = \"cmdPing\";\n        }\n        if (message.respPing != null && message.hasOwnProperty(\"respPing\")) {\n            object.respPing = $root.RespPing.toObject(message.respPing, options);\n            if (options.oneofs)\n                object.payload = \"respPing\";\n        }\n        if (message.cmdEioConnect != null && message.hasOwnProperty(\"cmdEioConnect\")) {\n            object.cmdEioConnect = $root.CmdEIOConnect.toObject(message.cmdEioConnect, options);\n            if (options.oneofs)\n                object.payload = \"cmdEioConnect\";\n        }\n        if (message.respEioConnect != null && message.hasOwnProperty(\"respEioConnect\")) {\n            object.respEioConnect = $root.RespEIOConnect.toObject(message.respEioConnect, options);\n            if (options.oneofs)\n                object.payload = \"respEioConnect\";\n        }\n        if (message.cmdConfigWifiSsidGet != null && message.hasOwnProperty(\"cmdConfigWifiSsidGet\")) {\n            object.cmdConfigWifiSsidGet = $root.CmdConfigWifiSsidGet.toObject(message.cmdConfigWifiSsidGet, options);\n            if (options.oneofs)\n                object.payload = \"cmdConfigWifiSsidGet\";\n        }\n        if (message.respConfigWifiSsidGet != null && message.hasOwnProperty(\"respConfigWifiSsidGet\")) {\n            object.respConfigWifiSsidGet = $root.RespConfigWifiSsidGet.toObject(message.respConfigWifiSsidGet, options);\n            if (options.oneofs)\n                object.payload = \"respConfigWifiSsidGet\";\n        }\n        return object;\n    };\n\n    /**\n     * Converts this HdyPayload to JSON.\n     * @function toJSON\n     * @memberof HdyPayload\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    HdyPayload.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return HdyPayload;\n})();\n\n\n\n\n//# sourceURL=webpack://EntryPoint/./proto-ts/bundel.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _proto_ts_bundel_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../proto-ts/bundel.js */ \"./proto-ts/bundel.js\");\n\n \n\n\nconst UUID_ESP = \"1775244d-6b43-439b-877c-060f2d9bed07\"; //Service ID\nconst CHARACTERISTICS_PROV_SESSION = \"1775ff51-6b43-439b-877c-060f2d9bed07\";\nconst CHARACTERISTICS_HANDY_PLUG = \"1775ff55-6b43-439b-877c-060f2d9bed07\";\n\nconst BLE_NAME = \"The Handy\";\n\nlet bleDevice;\nlet gattService;\nlet handyplugCharacteristic;\nasync function connectBle() {\n    return new Promise((resolve, reject) => {\n        navigator.bluetooth\n        .requestDevice({\n            filters: [\n                {\n                    name: BLE_NAME,\n                },\n            ],\n            optionalServices: [UUID_ESP],\n        })\n        .then((device) => {\n            console.log(\"Connected. Device:\", device);\n            bleDevice = device;\n            resolve(device);\n        })\n        .catch((error) => {\n            console.error(error);\n            reject(error);\n        });\n    });\n}\n\nasync function disconnect() {\n    if (bleDevice !== undefined) {\n        await bleDevice.gatt?.disconnect();\n        console.log(\"Disconnected\");\n    }\n}\n\nasync function wait(ms) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, ms);\n    });\n}\n\nasync function connectGatt() {\n    console.log(\"startSession\");\n    if (bleDevice === undefined) {\n        throw \"bleDevice not connected\";\n    } else if (bleDevice.gatt === undefined) {\n        throw \"bleDevice.gatt is undefined\";\n    }\n    await wait(100); //Should not be needed: wait for device to be ready\n    console.log(\"Connecting to GATT server...\");\n    let gattServer;\n    try {\n        gattServer = await bleDevice.gatt.connect();\n        console.log(\"gatt connected. gattServer:\", gattServer);\n    } catch (error) {\n        console.log(\"error:\", error);\n        throw error;\n    }\n\n    await wait(50); //Should not be needed: wait for device to be ready\n    try {\n        gattService = await gattServer.getPrimaryService(UUID_ESP);\n        console.log(\"gattService:\", gattService);\n    } catch (error) {\n        console.log(\"error:\", error);\n        throw error;\n    }\n}\n\nasync function startSession() {\n    let provSession = await gattService.getCharacteristic(CHARACTERISTICS_PROV_SESSION);\n    console.log(\"provSession:\", provSession);\n    await wait(50);\n    let s0SessionCmd = _proto_ts_bundel_js__WEBPACK_IMPORTED_MODULE_1__.espressif.S0SessionCmd.create();\n    let sec0Payload = _proto_ts_bundel_js__WEBPACK_IMPORTED_MODULE_1__.espressif.Sec0Payload.create({\n        sc: s0SessionCmd,\n    });\n    let newSessionData = _proto_ts_bundel_js__WEBPACK_IMPORTED_MODULE_1__.espressif.SessionData.create({\n        secVer: 0,\n        sec0: sec0Payload,\n    });\n\n    let newSessionDataBytes = _proto_ts_bundel_js__WEBPACK_IMPORTED_MODULE_1__.espressif.SessionData.encode(newSessionData).finish();\n    await provSession.writeValue(newSessionDataBytes);\n\n\n    console.log(\"Handy BLE session Connected!\");\n}\n\nasync function startHandyplugSession() {\n    //Both RX and TX is on this char\n    handyplugCharacteristic = await gattService.getCharacteristic(CHARACTERISTICS_HANDY_PLUG);\n    console.log(\"handyplugChar:\", handyplugCharacteristic);\n}\nasync function sendLinearCmd(position,duration) {\n    let Id = Math.round(Math.random() * 10000); //2147483647 max int value\n    let msgProto;\n    const vector= _proto_ts_bundel_js__WEBPACK_IMPORTED_MODULE_1__.handyplug.LinearCmd.Vector.create({\n        Index: 0,\n        Duration: duration,\n        Position: position\n    })\n    const linearCmd= _proto_ts_bundel_js__WEBPACK_IMPORTED_MODULE_1__.handyplug.LinearCmd.create({\n        Id: Id,\n        DeviceIndex: 0,\n        Vectors: [vector]\n    })\n    msgProto = _proto_ts_bundel_js__WEBPACK_IMPORTED_MODULE_1__.handyplug.Message.create({\n        LinearCmd: linearCmd\n    });\n    let payload = _proto_ts_bundel_js__WEBPACK_IMPORTED_MODULE_1__.handyplug.Payload.create({\n        Messages: [msgProto]\n    });\n    let payloadBytes = _proto_ts_bundel_js__WEBPACK_IMPORTED_MODULE_1__.handyplug.Payload.encode(payload).finish();\n    await handyplugCharacteristic.writeValue(payloadBytes);\n    await wait(5);\n    const res = await handyplugCharacteristic.readValue();\n    console.log('res', res);\n}\n\n\nwindow.handy = {\n    connectBle,\n    disconnect,\n    connectGatt,\n    startSession,\n    startHandyplugSession,\n    sendLinearCmd\n};\n\n//# sourceURL=webpack://EntryPoint/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	EntryPoint = __webpack_exports__;
/******/ 	
/******/ })()
;